
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  000051f2  00005266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003d08  00000000  00000000  000052f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011af  00000000  00000000  00008ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000a45b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000cf8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000dd3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000de9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000e129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e8f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 46 21 	call	0x428c	; 0x428c <main>
      7a:	0c 94 f7 28 	jmp	0x51ee	; 0x51ee <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c0 28 	jmp	0x5180	; 0x5180 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e7       	ldi	r26, 0x7C	; 124
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 dc 28 	jmp	0x51b8	; 0x51b8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cc 28 	jmp	0x5198	; 0x5198 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cc 28 	jmp	0x5198	; 0x5198 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c0 28 	jmp	0x5180	; 0x5180 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e7       	ldi	r24, 0x7C	; 124
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 dc 28 	jmp	0x51b8	; 0x51b8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cc 28 	jmp	0x5198	; 0x5198 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cc 28 	jmp	0x5198	; 0x5198 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cc 28 	jmp	0x5198	; 0x5198 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d0 28 	jmp	0x51a0	; 0x51a0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	6f ef       	ldi	r22, 0xFF	; 255
     b42:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	6f ef       	ldi	r22, 0xFF	; 255
     b4a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	60 e4       	ldi	r22, 0x40	; 64
     b52:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	6f ef       	ldi	r22, 0xFF	; 255
     b5a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_voidSetPortDir>
}
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	27 97       	sbiw	r28, 0x07	; 7
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	6a 83       	std	Y+2, r22	; 0x02
     b7c:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	85 30       	cpi	r24, 0x05	; 5
     b82:	08 f0       	brcs	.+2      	; 0xb86 <DIO_voidSetPinDir+0x22>
     b84:	f4 c0       	rjmp	.+488    	; 0xd6e <DIO_voidSetPinDir+0x20a>
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	88 23       	and	r24, r24
     b8a:	09 f4       	brne	.+2      	; 0xb8e <DIO_voidSetPinDir+0x2a>
     b8c:	f0 c0       	rjmp	.+480    	; 0xd6e <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 30       	cpi	r24, 0x08	; 8
     b92:	08 f0       	brcs	.+2      	; 0xb96 <DIO_voidSetPinDir+0x32>
     b94:	ec c0       	rjmp	.+472    	; 0xd6e <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	09 f0       	breq	.+2      	; 0xb9e <DIO_voidSetPinDir+0x3a>
     b9c:	70 c0       	rjmp	.+224    	; 0xc7e <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	3f 83       	std	Y+7, r19	; 0x07
     ba6:	2e 83       	std	Y+6, r18	; 0x06
     ba8:	8e 81       	ldd	r24, Y+6	; 0x06
     baa:	9f 81       	ldd	r25, Y+7	; 0x07
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	91 05       	cpc	r25, r1
     bb0:	51 f1       	breq	.+84     	; 0xc06 <DIO_voidSetPinDir+0xa2>
     bb2:	2e 81       	ldd	r18, Y+6	; 0x06
     bb4:	3f 81       	ldd	r19, Y+7	; 0x07
     bb6:	23 30       	cpi	r18, 0x03	; 3
     bb8:	31 05       	cpc	r19, r1
     bba:	34 f4       	brge	.+12     	; 0xbc8 <DIO_voidSetPinDir+0x64>
     bbc:	8e 81       	ldd	r24, Y+6	; 0x06
     bbe:	9f 81       	ldd	r25, Y+7	; 0x07
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	91 05       	cpc	r25, r1
     bc4:	61 f0       	breq	.+24     	; 0xbde <DIO_voidSetPinDir+0x7a>
     bc6:	d3 c0       	rjmp	.+422    	; 0xd6e <DIO_voidSetPinDir+0x20a>
     bc8:	2e 81       	ldd	r18, Y+6	; 0x06
     bca:	3f 81       	ldd	r19, Y+7	; 0x07
     bcc:	23 30       	cpi	r18, 0x03	; 3
     bce:	31 05       	cpc	r19, r1
     bd0:	71 f1       	breq	.+92     	; 0xc2e <DIO_voidSetPinDir+0xca>
     bd2:	8e 81       	ldd	r24, Y+6	; 0x06
     bd4:	9f 81       	ldd	r25, Y+7	; 0x07
     bd6:	84 30       	cpi	r24, 0x04	; 4
     bd8:	91 05       	cpc	r25, r1
     bda:	e9 f1       	breq	.+122    	; 0xc56 <DIO_voidSetPinDir+0xf2>
     bdc:	c8 c0       	rjmp	.+400    	; 0xd6e <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_voidSetPinDir+0x98>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_voidSetPinDir+0x94>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	b4 c0       	rjmp	.+360    	; 0xd6e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
     c06:	a7 e3       	ldi	r26, 0x37	; 55
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e7 e3       	ldi	r30, 0x37	; 55
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_voidSetPinDir+0xc0>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_voidSetPinDir+0xbc>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	a0 c0       	rjmp	.+320    	; 0xd6e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
     c2e:	a4 e3       	ldi	r26, 0x34	; 52
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e4 e3       	ldi	r30, 0x34	; 52
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_voidSetPinDir+0xe8>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_voidSetPinDir+0xe4>
     c50:	84 2b       	or	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	8c c0       	rjmp	.+280    	; 0xd6e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
     c56:	a1 e3       	ldi	r26, 0x31	; 49
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e1 e3       	ldi	r30, 0x31	; 49
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_voidSetPinDir+0x110>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_voidSetPinDir+0x10c>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	78 c0       	rjmp	.+240    	; 0xd6e <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	88 23       	and	r24, r24
     c82:	09 f0       	breq	.+2      	; 0xc86 <DIO_voidSetPinDir+0x122>
     c84:	74 c0       	rjmp	.+232    	; 0xd6e <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	3d 83       	std	Y+5, r19	; 0x05
     c8e:	2c 83       	std	Y+4, r18	; 0x04
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	91 05       	cpc	r25, r1
     c98:	61 f1       	breq	.+88     	; 0xcf2 <DIO_voidSetPinDir+0x18e>
     c9a:	2c 81       	ldd	r18, Y+4	; 0x04
     c9c:	3d 81       	ldd	r19, Y+5	; 0x05
     c9e:	23 30       	cpi	r18, 0x03	; 3
     ca0:	31 05       	cpc	r19, r1
     ca2:	34 f4       	brge	.+12     	; 0xcb0 <DIO_voidSetPinDir+0x14c>
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	9d 81       	ldd	r25, Y+5	; 0x05
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	69 f0       	breq	.+26     	; 0xcc8 <DIO_voidSetPinDir+0x164>
     cae:	5f c0       	rjmp	.+190    	; 0xd6e <DIO_voidSetPinDir+0x20a>
     cb0:	2c 81       	ldd	r18, Y+4	; 0x04
     cb2:	3d 81       	ldd	r19, Y+5	; 0x05
     cb4:	23 30       	cpi	r18, 0x03	; 3
     cb6:	31 05       	cpc	r19, r1
     cb8:	89 f1       	breq	.+98     	; 0xd1c <DIO_voidSetPinDir+0x1b8>
     cba:	8c 81       	ldd	r24, Y+4	; 0x04
     cbc:	9d 81       	ldd	r25, Y+5	; 0x05
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <DIO_voidSetPinDir+0x162>
     cc4:	40 c0       	rjmp	.+128    	; 0xd46 <DIO_voidSetPinDir+0x1e2>
     cc6:	53 c0       	rjmp	.+166    	; 0xd6e <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
     cc8:	aa e3       	ldi	r26, 0x3A	; 58
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e3       	ldi	r30, 0x3A	; 58
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_voidSetPinDir+0x182>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_voidSetPinDir+0x17e>
     cea:	80 95       	com	r24
     cec:	84 23       	and	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	3e c0       	rjmp	.+124    	; 0xd6e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
     cf2:	a7 e3       	ldi	r26, 0x37	; 55
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e7 e3       	ldi	r30, 0x37	; 55
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_voidSetPinDir+0x1ac>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_voidSetPinDir+0x1a8>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	29 c0       	rjmp	.+82     	; 0xd6e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
     d1c:	a4 e3       	ldi	r26, 0x34	; 52
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e4 e3       	ldi	r30, 0x34	; 52
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_voidSetPinDir+0x1d6>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_voidSetPinDir+0x1d2>
     d3e:	80 95       	com	r24
     d40:	84 23       	and	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	14 c0       	rjmp	.+40     	; 0xd6e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
     d46:	a1 e3       	ldi	r26, 0x31	; 49
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e1 e3       	ldi	r30, 0x31	; 49
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_voidSetPinDir+0x200>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DIO_voidSetPinDir+0x1fc>
     d68:	80 95       	com	r24
     d6a:	84 23       	and	r24, r20
     d6c:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
     d6e:	27 96       	adiw	r28, 0x07	; 7
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	27 97       	sbiw	r28, 0x07	; 7
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	6a 83       	std	Y+2, r22	; 0x02
     d98:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	85 30       	cpi	r24, 0x05	; 5
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <DIO_voidSetPinValue+0x22>
     da0:	f4 c0       	rjmp	.+488    	; 0xf8a <DIO_voidSetPinValue+0x20a>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_voidSetPinValue+0x2a>
     da8:	f0 c0       	rjmp	.+480    	; 0xf8a <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	88 30       	cpi	r24, 0x08	; 8
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <DIO_voidSetPinValue+0x32>
     db0:	ec c0       	rjmp	.+472    	; 0xf8a <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	09 f0       	breq	.+2      	; 0xdba <DIO_voidSetPinValue+0x3a>
     db8:	70 c0       	rjmp	.+224    	; 0xe9a <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	3f 83       	std	Y+7, r19	; 0x07
     dc2:	2e 83       	std	Y+6, r18	; 0x06
     dc4:	8e 81       	ldd	r24, Y+6	; 0x06
     dc6:	9f 81       	ldd	r25, Y+7	; 0x07
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	91 05       	cpc	r25, r1
     dcc:	51 f1       	breq	.+84     	; 0xe22 <DIO_voidSetPinValue+0xa2>
     dce:	2e 81       	ldd	r18, Y+6	; 0x06
     dd0:	3f 81       	ldd	r19, Y+7	; 0x07
     dd2:	23 30       	cpi	r18, 0x03	; 3
     dd4:	31 05       	cpc	r19, r1
     dd6:	34 f4       	brge	.+12     	; 0xde4 <DIO_voidSetPinValue+0x64>
     dd8:	8e 81       	ldd	r24, Y+6	; 0x06
     dda:	9f 81       	ldd	r25, Y+7	; 0x07
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	91 05       	cpc	r25, r1
     de0:	61 f0       	breq	.+24     	; 0xdfa <DIO_voidSetPinValue+0x7a>
     de2:	d3 c0       	rjmp	.+422    	; 0xf8a <DIO_voidSetPinValue+0x20a>
     de4:	2e 81       	ldd	r18, Y+6	; 0x06
     de6:	3f 81       	ldd	r19, Y+7	; 0x07
     de8:	23 30       	cpi	r18, 0x03	; 3
     dea:	31 05       	cpc	r19, r1
     dec:	71 f1       	breq	.+92     	; 0xe4a <DIO_voidSetPinValue+0xca>
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	84 30       	cpi	r24, 0x04	; 4
     df4:	91 05       	cpc	r25, r1
     df6:	e9 f1       	breq	.+122    	; 0xe72 <DIO_voidSetPinValue+0xf2>
     df8:	c8 c0       	rjmp	.+400    	; 0xf8a <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
     dfa:	ab e3       	ldi	r26, 0x3B	; 59
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	eb e3       	ldi	r30, 0x3B	; 59
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_voidSetPinValue+0x98>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_voidSetPinValue+0x94>
     e1c:	84 2b       	or	r24, r20
     e1e:	8c 93       	st	X, r24
     e20:	b4 c0       	rjmp	.+360    	; 0xf8a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
     e22:	a8 e3       	ldi	r26, 0x38	; 56
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e8 e3       	ldi	r30, 0x38	; 56
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_voidSetPinValue+0xc0>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_voidSetPinValue+0xbc>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	a0 c0       	rjmp	.+320    	; 0xf8a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
     e4a:	a5 e3       	ldi	r26, 0x35	; 53
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e3       	ldi	r30, 0x35	; 53
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_voidSetPinValue+0xe8>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_voidSetPinValue+0xe4>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	8c c0       	rjmp	.+280    	; 0xf8a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
     e72:	a2 e3       	ldi	r26, 0x32	; 50
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_voidSetPinValue+0x110>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_voidSetPinValue+0x10c>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	78 c0       	rjmp	.+240    	; 0xf8a <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 23       	and	r24, r24
     e9e:	09 f0       	breq	.+2      	; 0xea2 <DIO_voidSetPinValue+0x122>
     ea0:	74 c0       	rjmp	.+232    	; 0xf8a <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3d 83       	std	Y+5, r19	; 0x05
     eaa:	2c 83       	std	Y+4, r18	; 0x04
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	9d 81       	ldd	r25, Y+5	; 0x05
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	91 05       	cpc	r25, r1
     eb4:	61 f1       	breq	.+88     	; 0xf0e <DIO_voidSetPinValue+0x18e>
     eb6:	2c 81       	ldd	r18, Y+4	; 0x04
     eb8:	3d 81       	ldd	r19, Y+5	; 0x05
     eba:	23 30       	cpi	r18, 0x03	; 3
     ebc:	31 05       	cpc	r19, r1
     ebe:	34 f4       	brge	.+12     	; 0xecc <DIO_voidSetPinValue+0x14c>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	91 05       	cpc	r25, r1
     ec8:	69 f0       	breq	.+26     	; 0xee4 <DIO_voidSetPinValue+0x164>
     eca:	5f c0       	rjmp	.+190    	; 0xf8a <DIO_voidSetPinValue+0x20a>
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	23 30       	cpi	r18, 0x03	; 3
     ed2:	31 05       	cpc	r19, r1
     ed4:	89 f1       	breq	.+98     	; 0xf38 <DIO_voidSetPinValue+0x1b8>
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	91 05       	cpc	r25, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <DIO_voidSetPinValue+0x162>
     ee0:	40 c0       	rjmp	.+128    	; 0xf62 <DIO_voidSetPinValue+0x1e2>
     ee2:	53 c0       	rjmp	.+166    	; 0xf8a <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
     ee4:	ab e3       	ldi	r26, 0x3B	; 59
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	eb e3       	ldi	r30, 0x3B	; 59
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_voidSetPinValue+0x182>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_voidSetPinValue+0x17e>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	3e c0       	rjmp	.+124    	; 0xf8a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
     f0e:	a8 e3       	ldi	r26, 0x38	; 56
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e8 e3       	ldi	r30, 0x38	; 56
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_voidSetPinValue+0x1ac>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_voidSetPinValue+0x1a8>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	29 c0       	rjmp	.+82     	; 0xf8a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
     f38:	a5 e3       	ldi	r26, 0x35	; 53
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e5 e3       	ldi	r30, 0x35	; 53
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_voidSetPinValue+0x1d6>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_voidSetPinValue+0x1d2>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
     f62:	a2 e3       	ldi	r26, 0x32	; 50
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e2 e3       	ldi	r30, 0x32	; 50
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_voidSetPinValue+0x200>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_voidSetPinValue+0x1fc>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
     f8a:	27 96       	adiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <DIO_u8GetPinValue+0x6>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <DIO_u8GetPinValue+0x8>
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	85 30       	cpi	r24, 0x05	; 5
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <DIO_u8GetPinValue+0x1a>
     fb4:	74 c0       	rjmp	.+232    	; 0x109e <DIO_u8GetPinValue+0x102>
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	88 23       	and	r24, r24
     fba:	09 f4       	brne	.+2      	; 0xfbe <DIO_u8GetPinValue+0x22>
     fbc:	70 c0       	rjmp	.+224    	; 0x109e <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <DIO_u8GetPinValue+0x2a>
     fc4:	6c c0       	rjmp	.+216    	; 0x109e <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3d 83       	std	Y+5, r19	; 0x05
     fce:	2c 83       	std	Y+4, r18	; 0x04
     fd0:	4c 81       	ldd	r20, Y+4	; 0x04
     fd2:	5d 81       	ldd	r21, Y+5	; 0x05
     fd4:	42 30       	cpi	r20, 0x02	; 2
     fd6:	51 05       	cpc	r21, r1
     fd8:	49 f1       	breq	.+82     	; 0x102c <DIO_u8GetPinValue+0x90>
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	34 f4       	brge	.+12     	; 0xff0 <DIO_u8GetPinValue+0x54>
     fe4:	2c 81       	ldd	r18, Y+4	; 0x04
     fe6:	3d 81       	ldd	r19, Y+5	; 0x05
     fe8:	21 30       	cpi	r18, 0x01	; 1
     fea:	31 05       	cpc	r19, r1
     fec:	61 f0       	breq	.+24     	; 0x1006 <DIO_u8GetPinValue+0x6a>
     fee:	57 c0       	rjmp	.+174    	; 0x109e <DIO_u8GetPinValue+0x102>
     ff0:	4c 81       	ldd	r20, Y+4	; 0x04
     ff2:	5d 81       	ldd	r21, Y+5	; 0x05
     ff4:	43 30       	cpi	r20, 0x03	; 3
     ff6:	51 05       	cpc	r21, r1
     ff8:	61 f1       	breq	.+88     	; 0x1052 <DIO_u8GetPinValue+0xb6>
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	84 30       	cpi	r24, 0x04	; 4
    1000:	91 05       	cpc	r25, r1
    1002:	d1 f1       	breq	.+116    	; 0x1078 <DIO_u8GetPinValue+0xdc>
    1004:	4c c0       	rjmp	.+152    	; 0x109e <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    1006:	e9 e3       	ldi	r30, 0x39	; 57
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_u8GetPinValue+0x82>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_u8GetPinValue+0x7e>
    1022:	ca 01       	movw	r24, r20
    1024:	58 2f       	mov	r21, r24
    1026:	51 70       	andi	r21, 0x01	; 1
    1028:	5b 83       	std	Y+3, r21	; 0x03
    102a:	3b c0       	rjmp	.+118    	; 0x10a2 <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    102c:	e6 e3       	ldi	r30, 0x36	; 54
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a9 01       	movw	r20, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_u8GetPinValue+0xa8>
    1040:	55 95       	asr	r21
    1042:	47 95       	ror	r20
    1044:	8a 95       	dec	r24
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_u8GetPinValue+0xa4>
    1048:	ca 01       	movw	r24, r20
    104a:	58 2f       	mov	r21, r24
    104c:	51 70       	andi	r21, 0x01	; 1
    104e:	5b 83       	std	Y+3, r21	; 0x03
    1050:	28 c0       	rjmp	.+80     	; 0x10a2 <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    1052:	e3 e3       	ldi	r30, 0x33	; 51
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8GetPinValue+0xce>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8GetPinValue+0xca>
    106e:	ca 01       	movw	r24, r20
    1070:	58 2f       	mov	r21, r24
    1072:	51 70       	andi	r21, 0x01	; 1
    1074:	5b 83       	std	Y+3, r21	; 0x03
    1076:	15 c0       	rjmp	.+42     	; 0x10a2 <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    1078:	e0 e3       	ldi	r30, 0x30	; 48
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_u8GetPinValue+0xf4>
    108c:	55 95       	asr	r21
    108e:	47 95       	ror	r20
    1090:	8a 95       	dec	r24
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_u8GetPinValue+0xf0>
    1094:	ca 01       	movw	r24, r20
    1096:	58 2f       	mov	r21, r24
    1098:	51 70       	andi	r21, 0x01	; 1
    109a:	5b 83       	std	Y+3, r21	; 0x03
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_voidTogglePin+0x6>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <DIO_voidTogglePin+0x8>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <DIO_voidTogglePin+0x18>
    10ca:	77 c0       	rjmp	.+238    	; 0x11ba <DIO_voidTogglePin+0x106>
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <DIO_voidTogglePin+0x20>
    10d2:	73 c0       	rjmp	.+230    	; 0x11ba <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_voidTogglePin+0x28>
    10da:	6f c0       	rjmp	.+222    	; 0x11ba <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3c 83       	std	Y+4, r19	; 0x04
    10e4:	2b 83       	std	Y+3, r18	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	91 05       	cpc	r25, r1
    10ee:	51 f1       	breq	.+84     	; 0x1144 <DIO_voidTogglePin+0x90>
    10f0:	2b 81       	ldd	r18, Y+3	; 0x03
    10f2:	3c 81       	ldd	r19, Y+4	; 0x04
    10f4:	23 30       	cpi	r18, 0x03	; 3
    10f6:	31 05       	cpc	r19, r1
    10f8:	34 f4       	brge	.+12     	; 0x1106 <DIO_voidTogglePin+0x52>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	61 f0       	breq	.+24     	; 0x111c <DIO_voidTogglePin+0x68>
    1104:	5a c0       	rjmp	.+180    	; 0x11ba <DIO_voidTogglePin+0x106>
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	23 30       	cpi	r18, 0x03	; 3
    110c:	31 05       	cpc	r19, r1
    110e:	71 f1       	breq	.+92     	; 0x116c <DIO_voidTogglePin+0xb8>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	91 05       	cpc	r25, r1
    1118:	e9 f1       	breq	.+122    	; 0x1194 <DIO_voidTogglePin+0xe0>
    111a:	4f c0       	rjmp	.+158    	; 0x11ba <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    111c:	ab e3       	ldi	r26, 0x3B	; 59
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	eb e3       	ldi	r30, 0x3B	; 59
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_voidTogglePin+0x86>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_voidTogglePin+0x82>
    113e:	84 27       	eor	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	3b c0       	rjmp	.+118    	; 0x11ba <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_voidTogglePin+0xae>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_voidTogglePin+0xaa>
    1166:	84 27       	eor	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	27 c0       	rjmp	.+78     	; 0x11ba <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    116c:	a5 e3       	ldi	r26, 0x35	; 53
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e3       	ldi	r30, 0x35	; 53
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_voidTogglePin+0xd6>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_voidTogglePin+0xd2>
    118e:	84 27       	eor	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	13 c0       	rjmp	.+38     	; 0x11ba <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_voidTogglePin+0xfe>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_voidTogglePin+0xfa>
    11b6:	84 27       	eor	r24, r20
    11b8:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <DIO_voidSetPortDir+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_voidSetPortDir+0x8>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	85 30       	cpi	r24, 0x05	; 5
    11dc:	b0 f5       	brcc	.+108    	; 0x124a <DIO_voidSetPortDir+0x82>
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	88 23       	and	r24, r24
    11e2:	99 f1       	breq	.+102    	; 0x124a <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3c 83       	std	Y+4, r19	; 0x04
    11ec:	2b 83       	std	Y+3, r18	; 0x03
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	91 05       	cpc	r25, r1
    11f6:	d9 f0       	breq	.+54     	; 0x122e <DIO_voidSetPortDir+0x66>
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	23 30       	cpi	r18, 0x03	; 3
    11fe:	31 05       	cpc	r19, r1
    1200:	34 f4       	brge	.+12     	; 0x120e <DIO_voidSetPortDir+0x46>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	61 f0       	breq	.+24     	; 0x1224 <DIO_voidSetPortDir+0x5c>
    120c:	1e c0       	rjmp	.+60     	; 0x124a <DIO_voidSetPortDir+0x82>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	23 30       	cpi	r18, 0x03	; 3
    1214:	31 05       	cpc	r19, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <DIO_voidSetPortDir+0x70>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	91 05       	cpc	r25, r1
    1220:	81 f0       	breq	.+32     	; 0x1242 <DIO_voidSetPortDir+0x7a>
    1222:	13 c0       	rjmp	.+38     	; 0x124a <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    1224:	ea e3       	ldi	r30, 0x3A	; 58
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	0e c0       	rjmp	.+28     	; 0x124a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    122e:	e7 e3       	ldi	r30, 0x37	; 55
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	09 c0       	rjmp	.+18     	; 0x124a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    1238:	e4 e3       	ldi	r30, 0x34	; 52
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
    1240:	04 c0       	rjmp	.+8      	; 0x124a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    1242:	e1 e3       	ldi	r30, 0x31	; 49
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	80 83       	st	Z, r24
			break;
		}
	}
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <DIO_voidSetPortValue+0x6>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <DIO_voidSetPortValue+0x8>
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	85 30       	cpi	r24, 0x05	; 5
    126c:	b0 f5       	brcc	.+108    	; 0x12da <DIO_voidSetPortValue+0x82>
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 23       	and	r24, r24
    1272:	99 f1       	breq	.+102    	; 0x12da <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3c 83       	std	Y+4, r19	; 0x04
    127c:	2b 83       	std	Y+3, r18	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	91 05       	cpc	r25, r1
    1286:	d9 f0       	breq	.+54     	; 0x12be <DIO_voidSetPortValue+0x66>
    1288:	2b 81       	ldd	r18, Y+3	; 0x03
    128a:	3c 81       	ldd	r19, Y+4	; 0x04
    128c:	23 30       	cpi	r18, 0x03	; 3
    128e:	31 05       	cpc	r19, r1
    1290:	34 f4       	brge	.+12     	; 0x129e <DIO_voidSetPortValue+0x46>
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	91 05       	cpc	r25, r1
    129a:	61 f0       	breq	.+24     	; 0x12b4 <DIO_voidSetPortValue+0x5c>
    129c:	1e c0       	rjmp	.+60     	; 0x12da <DIO_voidSetPortValue+0x82>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	23 30       	cpi	r18, 0x03	; 3
    12a4:	31 05       	cpc	r19, r1
    12a6:	81 f0       	breq	.+32     	; 0x12c8 <DIO_voidSetPortValue+0x70>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	91 05       	cpc	r25, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <DIO_voidSetPortValue+0x7a>
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    12b4:	eb e3       	ldi	r30, 0x3B	; 59
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
    12bc:	0e c0       	rjmp	.+28     	; 0x12da <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    12c8:	e5 e3       	ldi	r30, 0x35	; 53
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    12d2:	e2 e3       	ldi	r30, 0x32	; 50
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_u8GetPortValue+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_u8GetPortValue+0x8>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	85 30       	cpi	r24, 0x05	; 5
    12fa:	b8 f5       	brcc	.+110    	; 0x136a <DIO_u8GetPortValue+0x82>
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	88 23       	and	r24, r24
    1300:	a1 f1       	breq	.+104    	; 0x136a <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3c 83       	std	Y+4, r19	; 0x04
    130a:	2b 83       	std	Y+3, r18	; 0x03
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	91 05       	cpc	r25, r1
    1314:	d9 f0       	breq	.+54     	; 0x134c <DIO_u8GetPortValue+0x64>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	23 30       	cpi	r18, 0x03	; 3
    131c:	31 05       	cpc	r19, r1
    131e:	34 f4       	brge	.+12     	; 0x132c <DIO_u8GetPortValue+0x44>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	61 f0       	breq	.+24     	; 0x1342 <DIO_u8GetPortValue+0x5a>
    132a:	1f c0       	rjmp	.+62     	; 0x136a <DIO_u8GetPortValue+0x82>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	23 30       	cpi	r18, 0x03	; 3
    1332:	31 05       	cpc	r19, r1
    1334:	81 f0       	breq	.+32     	; 0x1356 <DIO_u8GetPortValue+0x6e>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	91 05       	cpc	r25, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <DIO_u8GetPortValue+0x78>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    1342:	eb e3       	ldi	r30, 0x3B	; 59
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	90 81       	ld	r25, Z
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	11 c0       	rjmp	.+34     	; 0x136e <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    134c:	e8 e3       	ldi	r30, 0x38	; 56
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	20 81       	ld	r18, Z
    1352:	2a 83       	std	Y+2, r18	; 0x02
    1354:	0c c0       	rjmp	.+24     	; 0x136e <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    1356:	e5 e3       	ldi	r30, 0x35	; 53
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	30 81       	ld	r19, Z
    135c:	3a 83       	std	Y+2, r19	; 0x02
    135e:	07 c0       	rjmp	.+14     	; 0x136e <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    1360:	e2 e3       	ldi	r30, 0x32	; 50
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <DIO_voidTogglePort+0x6>
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	85 30       	cpi	r24, 0x05	; 5
    1390:	08 f0       	brcs	.+2      	; 0x1394 <DIO_voidTogglePort+0x16>
    1392:	43 c0       	rjmp	.+134    	; 0x141a <DIO_voidTogglePort+0x9c>
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	88 23       	and	r24, r24
    1398:	09 f4       	brne	.+2      	; 0x139c <DIO_voidTogglePort+0x1e>
    139a:	3f c0       	rjmp	.+126    	; 0x141a <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3b 83       	std	Y+3, r19	; 0x03
    13a4:	2a 83       	std	Y+2, r18	; 0x02
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	91 05       	cpc	r25, r1
    13ae:	f1 f0       	breq	.+60     	; 0x13ec <DIO_voidTogglePort+0x6e>
    13b0:	2a 81       	ldd	r18, Y+2	; 0x02
    13b2:	3b 81       	ldd	r19, Y+3	; 0x03
    13b4:	23 30       	cpi	r18, 0x03	; 3
    13b6:	31 05       	cpc	r19, r1
    13b8:	34 f4       	brge	.+12     	; 0x13c6 <DIO_voidTogglePort+0x48>
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	61 f0       	breq	.+24     	; 0x13dc <DIO_voidTogglePort+0x5e>
    13c4:	2a c0       	rjmp	.+84     	; 0x141a <DIO_voidTogglePort+0x9c>
    13c6:	2a 81       	ldd	r18, Y+2	; 0x02
    13c8:	3b 81       	ldd	r19, Y+3	; 0x03
    13ca:	23 30       	cpi	r18, 0x03	; 3
    13cc:	31 05       	cpc	r19, r1
    13ce:	b1 f0       	breq	.+44     	; 0x13fc <DIO_voidTogglePort+0x7e>
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	91 05       	cpc	r25, r1
    13d8:	c9 f0       	breq	.+50     	; 0x140c <DIO_voidTogglePort+0x8e>
    13da:	1f c0       	rjmp	.+62     	; 0x141a <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    13dc:	ab e3       	ldi	r26, 0x3B	; 59
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	eb e3       	ldi	r30, 0x3B	; 59
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 95       	com	r24
    13e8:	8c 93       	st	X, r24
    13ea:	17 c0       	rjmp	.+46     	; 0x141a <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    13ec:	a8 e3       	ldi	r26, 0x38	; 56
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 95       	com	r24
    13f8:	8c 93       	st	X, r24
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    13fc:	a5 e3       	ldi	r26, 0x35	; 53
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e5 e3       	ldi	r30, 0x35	; 53
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 95       	com	r24
    1408:	8c 93       	st	X, r24
    140a:	07 c0       	rjmp	.+14     	; 0x141a <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	80 95       	com	r24
    1418:	8c 93       	st	X, r24
				break;
			}
		}
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	6f e7       	ldi	r22, 0x7F	; 127
    1432:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_voidSetPortDir>
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	6f e7       	ldi	r22, 0x7F	; 127
    1448:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	6f e7       	ldi	r22, 0x7F	; 127
    1450:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_voidSetPortDir>
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	60 97       	sbiw	r28, 0x10	; 16
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	9d 87       	std	Y+13, r25	; 0x0d
    1476:	8c 87       	std	Y+12, r24	; 0x0c
    1478:	e3 e9       	ldi	r30, 0x93	; 147
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	ff 87       	std	Y+15, r31	; 0x0f
    147e:	ee 87       	std	Y+14, r30	; 0x0e
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	f8 8b       	std	Y+16, r31	; 0x10
    1484:	ee 85       	ldd	r30, Y+14	; 0x0e
    1486:	ff 85       	ldd	r31, Y+15	; 0x0f
    1488:	00 80       	ld	r0, Z
    148a:	8e 85       	ldd	r24, Y+14	; 0x0e
    148c:	9f 85       	ldd	r25, Y+15	; 0x0f
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	9f 87       	std	Y+15, r25	; 0x0f
    1492:	8e 87       	std	Y+14, r24	; 0x0e
    1494:	ec 85       	ldd	r30, Y+12	; 0x0c
    1496:	fd 85       	ldd	r31, Y+13	; 0x0d
    1498:	00 82       	st	Z, r0
    149a:	8c 85       	ldd	r24, Y+12	; 0x0c
    149c:	9d 85       	ldd	r25, Y+13	; 0x0d
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	9d 87       	std	Y+13, r25	; 0x0d
    14a2:	8c 87       	std	Y+12, r24	; 0x0c
    14a4:	98 89       	ldd	r25, Y+16	; 0x10
    14a6:	91 50       	subi	r25, 0x01	; 1
    14a8:	98 8b       	std	Y+16, r25	; 0x10
    14aa:	e8 89       	ldd	r30, Y+16	; 0x10
    14ac:	ee 23       	and	r30, r30
    14ae:	51 f7       	brne	.-44     	; 0x1484 <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    14b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b2:	8a 30       	cpi	r24, 0x0A	; 10
    14b4:	70 f4       	brcc	.+28     	; 0x14d2 <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    14b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	80 81       	ld	r24, Z
    14c8:	98 2f       	mov	r25, r24
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	69 2f       	mov	r22, r25
    14ce:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
	}
}
    14d2:	60 96       	adiw	r28, 0x10	; 16
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	a1 97       	sbiw	r28, 0x21	; 33
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    14f8:	ce 01       	movw	r24, r28
    14fa:	43 96       	adiw	r24, 0x13	; 19
    14fc:	9e 8f       	std	Y+30, r25	; 0x1e
    14fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1500:	ed e9       	ldi	r30, 0x9D	; 157
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	f8 a3       	std	Y+32, r31	; 0x20
    1506:	ef 8f       	std	Y+31, r30	; 0x1f
    1508:	fa e0       	ldi	r31, 0x0A	; 10
    150a:	f9 a3       	std	Y+33, r31	; 0x21
    150c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    150e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1510:	00 80       	ld	r0, Z
    1512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1514:	98 a1       	ldd	r25, Y+32	; 0x20
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	98 a3       	std	Y+32, r25	; 0x20
    151a:	8f 8f       	std	Y+31, r24	; 0x1f
    151c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    151e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1520:	00 82       	st	Z, r0
    1522:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1524:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	9e 8f       	std	Y+30, r25	; 0x1e
    152a:	8d 8f       	std	Y+29, r24	; 0x1d
    152c:	99 a1       	ldd	r25, Y+33	; 0x21
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	99 a3       	std	Y+33, r25	; 0x21
    1532:	e9 a1       	ldd	r30, Y+33	; 0x21
    1534:	ee 23       	and	r30, r30
    1536:	51 f7       	brne	.-44     	; 0x150c <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    1538:	1f 86       	std	Y+15, r1	; 0x0f
    153a:	18 8a       	std	Y+16, r1	; 0x10
    153c:	19 8a       	std	Y+17, r1	; 0x11
    153e:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1540:	1f 86       	std	Y+15, r1	; 0x0f
    1542:	18 8a       	std	Y+16, r1	; 0x10
    1544:	19 8a       	std	Y+17, r1	; 0x11
    1546:	1a 8a       	std	Y+18, r1	; 0x12
    1548:	8d c0       	rjmp	.+282    	; 0x1664 <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    154a:	8f 85       	ldd	r24, Y+15	; 0x0f
    154c:	98 89       	ldd	r25, Y+16	; 0x10
    154e:	a9 89       	ldd	r26, Y+17	; 0x11
    1550:	ba 89       	ldd	r27, Y+18	; 0x12
    1552:	9e 01       	movw	r18, r28
    1554:	2d 5e       	subi	r18, 0xED	; 237
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	f9 01       	movw	r30, r18
    155a:	e8 0f       	add	r30, r24
    155c:	f9 1f       	adc	r31, r25
    155e:	80 81       	ld	r24, Z
    1560:	98 2f       	mov	r25, r24
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	69 2f       	mov	r22, r25
    1566:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 e2       	ldi	r26, 0x20	; 32
    1570:	b1 e4       	ldi	r27, 0x41	; 65
    1572:	8b 87       	std	Y+11, r24	; 0x0b
    1574:	9c 87       	std	Y+12, r25	; 0x0c
    1576:	ad 87       	std	Y+13, r26	; 0x0d
    1578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	55 e4       	ldi	r21, 0x45	; 69
    158a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8f 83       	std	Y+7, r24	; 0x07
    1594:	98 87       	std	Y+8, r25	; 0x08
    1596:	a9 87       	std	Y+9, r26	; 0x09
    1598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15da:	9e 85       	ldd	r25, Y+14	; 0x0e
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <SevSeg_voidSingleAutoCounter+0x138>
    15fe:	80 e9       	ldi	r24, 0x90	; 144
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <SevSeg_voidSingleAutoCounter+0x126>
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <SevSeg_voidSingleAutoCounter+0x11a>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <SevSeg_voidSingleAutoCounter+0x162>
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    164e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1650:	98 89       	ldd	r25, Y+16	; 0x10
    1652:	a9 89       	ldd	r26, Y+17	; 0x11
    1654:	ba 89       	ldd	r27, Y+18	; 0x12
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	a1 1d       	adc	r26, r1
    165a:	b1 1d       	adc	r27, r1
    165c:	8f 87       	std	Y+15, r24	; 0x0f
    165e:	98 8b       	std	Y+16, r25	; 0x10
    1660:	a9 8b       	std	Y+17, r26	; 0x11
    1662:	ba 8b       	std	Y+18, r27	; 0x12
    1664:	8f 85       	ldd	r24, Y+15	; 0x0f
    1666:	98 89       	ldd	r25, Y+16	; 0x10
    1668:	a9 89       	ldd	r26, Y+17	; 0x11
    166a:	ba 89       	ldd	r27, Y+18	; 0x12
    166c:	8a 30       	cpi	r24, 0x0A	; 10
    166e:	91 05       	cpc	r25, r1
    1670:	a1 05       	cpc	r26, r1
    1672:	b1 05       	cpc	r27, r1
    1674:	0c f4       	brge	.+2      	; 0x1678 <SevSeg_voidSingleAutoCounter+0x194>
    1676:	69 cf       	rjmp	.-302    	; 0x154a <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    1678:	a1 96       	adiw	r28, 0x21	; 33
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	a5 97       	sbiw	r28, 0x25	; 37
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    169e:	ce 01       	movw	r24, r28
    16a0:	47 96       	adiw	r24, 0x17	; 23
    16a2:	9a a3       	std	Y+34, r25	; 0x22
    16a4:	89 a3       	std	Y+33, r24	; 0x21
    16a6:	e7 ea       	ldi	r30, 0xA7	; 167
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	fc a3       	std	Y+36, r31	; 0x24
    16ac:	eb a3       	std	Y+35, r30	; 0x23
    16ae:	fa e0       	ldi	r31, 0x0A	; 10
    16b0:	fd a3       	std	Y+37, r31	; 0x25
    16b2:	eb a1       	ldd	r30, Y+35	; 0x23
    16b4:	fc a1       	ldd	r31, Y+36	; 0x24
    16b6:	00 80       	ld	r0, Z
    16b8:	8b a1       	ldd	r24, Y+35	; 0x23
    16ba:	9c a1       	ldd	r25, Y+36	; 0x24
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	9c a3       	std	Y+36, r25	; 0x24
    16c0:	8b a3       	std	Y+35, r24	; 0x23
    16c2:	e9 a1       	ldd	r30, Y+33	; 0x21
    16c4:	fa a1       	ldd	r31, Y+34	; 0x22
    16c6:	00 82       	st	Z, r0
    16c8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ca:	9a a1       	ldd	r25, Y+34	; 0x22
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	9a a3       	std	Y+34, r25	; 0x22
    16d0:	89 a3       	std	Y+33, r24	; 0x21
    16d2:	9d a1       	ldd	r25, Y+37	; 0x25
    16d4:	91 50       	subi	r25, 0x01	; 1
    16d6:	9d a3       	std	Y+37, r25	; 0x25
    16d8:	ed a1       	ldd	r30, Y+37	; 0x25
    16da:	ee 23       	and	r30, r30
    16dc:	51 f7       	brne	.-44     	; 0x16b2 <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    16de:	1b 8a       	std	Y+19, r1	; 0x13
    16e0:	1c 8a       	std	Y+20, r1	; 0x14
    16e2:	1d 8a       	std	Y+21, r1	; 0x15
    16e4:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    16e6:	1f 86       	std	Y+15, r1	; 0x0f
    16e8:	18 8a       	std	Y+16, r1	; 0x10
    16ea:	19 8a       	std	Y+17, r1	; 0x11
    16ec:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    16ee:	1b 8a       	std	Y+19, r1	; 0x13
    16f0:	1c 8a       	std	Y+20, r1	; 0x14
    16f2:	1d 8a       	std	Y+21, r1	; 0x15
    16f4:	1e 8a       	std	Y+22, r1	; 0x16
    16f6:	b7 c0       	rjmp	.+366    	; 0x1866 <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    16f8:	8b 89       	ldd	r24, Y+19	; 0x13
    16fa:	9c 89       	ldd	r25, Y+20	; 0x14
    16fc:	ad 89       	ldd	r26, Y+21	; 0x15
    16fe:	be 89       	ldd	r27, Y+22	; 0x16
    1700:	9e 01       	movw	r18, r28
    1702:	29 5e       	subi	r18, 0xE9	; 233
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	f9 01       	movw	r30, r18
    1708:	e8 0f       	add	r30, r24
    170a:	f9 1f       	adc	r31, r25
    170c:	80 81       	ld	r24, Z
    170e:	98 2f       	mov	r25, r24
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	69 2f       	mov	r22, r25
    1714:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    1718:	1f 86       	std	Y+15, r1	; 0x0f
    171a:	18 8a       	std	Y+16, r1	; 0x10
    171c:	19 8a       	std	Y+17, r1	; 0x11
    171e:	1a 8a       	std	Y+18, r1	; 0x12
    1720:	8d c0       	rjmp	.+282    	; 0x183c <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1722:	8f 85       	ldd	r24, Y+15	; 0x0f
    1724:	98 89       	ldd	r25, Y+16	; 0x10
    1726:	a9 89       	ldd	r26, Y+17	; 0x11
    1728:	ba 89       	ldd	r27, Y+18	; 0x12
    172a:	9e 01       	movw	r18, r28
    172c:	29 5e       	subi	r18, 0xE9	; 233
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	f9 01       	movw	r30, r18
    1732:	e8 0f       	add	r30, r24
    1734:	f9 1f       	adc	r31, r25
    1736:	80 81       	ld	r24, Z
    1738:	98 2f       	mov	r25, r24
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	69 2f       	mov	r22, r25
    173e:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a0 e2       	ldi	r26, 0x20	; 32
    1748:	b1 e4       	ldi	r27, 0x41	; 65
    174a:	8b 87       	std	Y+11, r24	; 0x0b
    174c:	9c 87       	std	Y+12, r25	; 0x0c
    174e:	ad 87       	std	Y+13, r26	; 0x0d
    1750:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1752:	6b 85       	ldd	r22, Y+11	; 0x0b
    1754:	7c 85       	ldd	r23, Y+12	; 0x0c
    1756:	8d 85       	ldd	r24, Y+13	; 0x0d
    1758:	9e 85       	ldd	r25, Y+14	; 0x0e
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a e7       	ldi	r20, 0x7A	; 122
    1760:	55 e4       	ldi	r21, 0x45	; 69
    1762:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8f 83       	std	Y+7, r24	; 0x07
    176c:	98 87       	std	Y+8, r25	; 0x08
    176e:	a9 87       	std	Y+9, r26	; 0x09
    1770:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1772:	6f 81       	ldd	r22, Y+7	; 0x07
    1774:	78 85       	ldd	r23, Y+8	; 0x08
    1776:	89 85       	ldd	r24, Y+9	; 0x09
    1778:	9a 85       	ldd	r25, Y+10	; 0x0a
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1786:	88 23       	and	r24, r24
    1788:	2c f4       	brge	.+10     	; 0x1794 <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	3f c0       	rjmp	.+126    	; 0x1812 <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	4c f5       	brge	.+82     	; 0x17fe <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	51 e4       	ldi	r21, 0x41	; 65
    17bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <SevSeg_voidDoubleAutoCounter+0x16a>
    17d6:	80 e9       	ldi	r24, 0x90	; 144
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <SevSeg_voidDoubleAutoCounter+0x158>
    17e6:	9c 83       	std	Y+4, r25	; 0x04
    17e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	69 f7       	brne	.-38     	; 0x17d6 <SevSeg_voidDoubleAutoCounter+0x14c>
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <SevSeg_voidDoubleAutoCounter+0x194>
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    1826:	8f 85       	ldd	r24, Y+15	; 0x0f
    1828:	98 89       	ldd	r25, Y+16	; 0x10
    182a:	a9 89       	ldd	r26, Y+17	; 0x11
    182c:	ba 89       	ldd	r27, Y+18	; 0x12
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	a1 1d       	adc	r26, r1
    1832:	b1 1d       	adc	r27, r1
    1834:	8f 87       	std	Y+15, r24	; 0x0f
    1836:	98 8b       	std	Y+16, r25	; 0x10
    1838:	a9 8b       	std	Y+17, r26	; 0x11
    183a:	ba 8b       	std	Y+18, r27	; 0x12
    183c:	8f 85       	ldd	r24, Y+15	; 0x0f
    183e:	98 89       	ldd	r25, Y+16	; 0x10
    1840:	a9 89       	ldd	r26, Y+17	; 0x11
    1842:	ba 89       	ldd	r27, Y+18	; 0x12
    1844:	8a 30       	cpi	r24, 0x0A	; 10
    1846:	91 05       	cpc	r25, r1
    1848:	a1 05       	cpc	r26, r1
    184a:	b1 05       	cpc	r27, r1
    184c:	0c f4       	brge	.+2      	; 0x1850 <SevSeg_voidDoubleAutoCounter+0x1c6>
    184e:	69 cf       	rjmp	.-302    	; 0x1722 <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    1850:	8b 89       	ldd	r24, Y+19	; 0x13
    1852:	9c 89       	ldd	r25, Y+20	; 0x14
    1854:	ad 89       	ldd	r26, Y+21	; 0x15
    1856:	be 89       	ldd	r27, Y+22	; 0x16
    1858:	01 96       	adiw	r24, 0x01	; 1
    185a:	a1 1d       	adc	r26, r1
    185c:	b1 1d       	adc	r27, r1
    185e:	8b 8b       	std	Y+19, r24	; 0x13
    1860:	9c 8b       	std	Y+20, r25	; 0x14
    1862:	ad 8b       	std	Y+21, r26	; 0x15
    1864:	be 8b       	std	Y+22, r27	; 0x16
    1866:	8b 89       	ldd	r24, Y+19	; 0x13
    1868:	9c 89       	ldd	r25, Y+20	; 0x14
    186a:	ad 89       	ldd	r26, Y+21	; 0x15
    186c:	be 89       	ldd	r27, Y+22	; 0x16
    186e:	8a 30       	cpi	r24, 0x0A	; 10
    1870:	91 05       	cpc	r25, r1
    1872:	a1 05       	cpc	r26, r1
    1874:	b1 05       	cpc	r27, r1
    1876:	0c f4       	brge	.+2      	; 0x187a <SevSeg_voidDoubleAutoCounter+0x1f0>
    1878:	3f cf       	rjmp	.-386    	; 0x16f8 <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    187a:	a5 96       	adiw	r28, 0x25	; 37
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	e1 97       	sbiw	r28, 0x31	; 49
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	8b a7       	std	Y+43, r24	; 0x2b
    18a2:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    18a4:	ce 01       	movw	r24, r28
    18a6:	81 96       	adiw	r24, 0x21	; 33
    18a8:	9e a7       	std	Y+46, r25	; 0x2e
    18aa:	8d a7       	std	Y+45, r24	; 0x2d
    18ac:	e1 eb       	ldi	r30, 0xB1	; 177
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	f8 ab       	std	Y+48, r31	; 0x30
    18b2:	ef a7       	std	Y+47, r30	; 0x2f
    18b4:	fa e0       	ldi	r31, 0x0A	; 10
    18b6:	f9 ab       	std	Y+49, r31	; 0x31
    18b8:	ef a5       	ldd	r30, Y+47	; 0x2f
    18ba:	f8 a9       	ldd	r31, Y+48	; 0x30
    18bc:	00 80       	ld	r0, Z
    18be:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c0:	98 a9       	ldd	r25, Y+48	; 0x30
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	98 ab       	std	Y+48, r25	; 0x30
    18c6:	8f a7       	std	Y+47, r24	; 0x2f
    18c8:	ed a5       	ldd	r30, Y+45	; 0x2d
    18ca:	fe a5       	ldd	r31, Y+46	; 0x2e
    18cc:	00 82       	st	Z, r0
    18ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    18d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	9e a7       	std	Y+46, r25	; 0x2e
    18d6:	8d a7       	std	Y+45, r24	; 0x2d
    18d8:	99 a9       	ldd	r25, Y+49	; 0x31
    18da:	91 50       	subi	r25, 0x01	; 1
    18dc:	99 ab       	std	Y+49, r25	; 0x31
    18de:	e9 a9       	ldd	r30, Y+49	; 0x31
    18e0:	ee 23       	and	r30, r30
    18e2:	51 f7       	brne	.-44     	; 0x18b8 <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    18e4:	1d 8e       	std	Y+29, r1	; 0x1d
    18e6:	1e 8e       	std	Y+30, r1	; 0x1e
    18e8:	1f 8e       	std	Y+31, r1	; 0x1f
    18ea:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    18ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ee:	88 23       	and	r24, r24
    18f0:	0c f4       	brge	.+2      	; 0x18f4 <SevSeg_voidSingleRangeCounter+0x68>
    18f2:	64 c1       	rjmp	.+712    	; 0x1bbc <SevSeg_voidSingleRangeCounter+0x330>
    18f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f6:	8a 30       	cpi	r24, 0x0A	; 10
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <SevSeg_voidSingleRangeCounter+0x70>
    18fa:	60 c1       	rjmp	.+704    	; 0x1bbc <SevSeg_voidSingleRangeCounter+0x330>
    18fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    18fe:	8a 30       	cpi	r24, 0x0A	; 10
    1900:	0c f0       	brlt	.+2      	; 0x1904 <SevSeg_voidSingleRangeCounter+0x78>
    1902:	5c c1       	rjmp	.+696    	; 0x1bbc <SevSeg_voidSingleRangeCounter+0x330>
    1904:	8c a5       	ldd	r24, Y+44	; 0x2c
    1906:	88 23       	and	r24, r24
    1908:	0c f4       	brge	.+2      	; 0x190c <SevSeg_voidSingleRangeCounter+0x80>
    190a:	58 c1       	rjmp	.+688    	; 0x1bbc <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    190c:	9b a5       	ldd	r25, Y+43	; 0x2b
    190e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1910:	98 17       	cp	r25, r24
    1912:	0c f0       	brlt	.+2      	; 0x1916 <SevSeg_voidSingleRangeCounter+0x8a>
    1914:	aa c0       	rjmp	.+340    	; 0x1a6a <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    1916:	8b a5       	ldd	r24, Y+43	; 0x2b
    1918:	99 27       	eor	r25, r25
    191a:	87 fd       	sbrc	r24, 7
    191c:	90 95       	com	r25
    191e:	a9 2f       	mov	r26, r25
    1920:	b9 2f       	mov	r27, r25
    1922:	8d 8f       	std	Y+29, r24	; 0x1d
    1924:	9e 8f       	std	Y+30, r25	; 0x1e
    1926:	af 8f       	std	Y+31, r26	; 0x1f
    1928:	b8 a3       	std	Y+32, r27	; 0x20
    192a:	8d c0       	rjmp	.+282    	; 0x1a46 <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    192c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1930:	af 8d       	ldd	r26, Y+31	; 0x1f
    1932:	b8 a1       	ldd	r27, Y+32	; 0x20
    1934:	9e 01       	movw	r18, r28
    1936:	2f 5d       	subi	r18, 0xDF	; 223
    1938:	3f 4f       	sbci	r19, 0xFF	; 255
    193a:	f9 01       	movw	r30, r18
    193c:	e8 0f       	add	r30, r24
    193e:	f9 1f       	adc	r31, r25
    1940:	80 81       	ld	r24, Z
    1942:	98 2f       	mov	r25, r24
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	69 2f       	mov	r22, r25
    1948:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e2       	ldi	r26, 0x20	; 32
    1952:	b1 e4       	ldi	r27, 0x41	; 65
    1954:	89 8f       	std	Y+25, r24	; 0x19
    1956:	9a 8f       	std	Y+26, r25	; 0x1a
    1958:	ab 8f       	std	Y+27, r26	; 0x1b
    195a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	69 8d       	ldd	r22, Y+25	; 0x19
    195e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1960:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1962:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a e7       	ldi	r20, 0x7A	; 122
    196a:	55 e4       	ldi	r21, 0x45	; 69
    196c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8d 8b       	std	Y+21, r24	; 0x15
    1976:	9e 8b       	std	Y+22, r25	; 0x16
    1978:	af 8b       	std	Y+23, r26	; 0x17
    197a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    197c:	6d 89       	ldd	r22, Y+21	; 0x15
    197e:	7e 89       	ldd	r23, Y+22	; 0x16
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	98 8d       	ldd	r25, Y+24	; 0x18
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9c 8b       	std	Y+20, r25	; 0x14
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    199e:	6d 89       	ldd	r22, Y+21	; 0x15
    19a0:	7e 89       	ldd	r23, Y+22	; 0x16
    19a2:	8f 89       	ldd	r24, Y+23	; 0x17
    19a4:	98 8d       	ldd	r25, Y+24	; 0x18
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	69 8d       	ldd	r22, Y+25	; 0x19
    19b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9c 8b       	std	Y+20, r25	; 0x14
    19dc:	8b 8b       	std	Y+19, r24	; 0x13
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <SevSeg_voidSingleRangeCounter+0x172>
    19e0:	80 e9       	ldi	r24, 0x90	; 144
    19e2:	91 e0       	ldi	r25, 0x01	; 1
    19e4:	9a 8b       	std	Y+18, r25	; 0x12
    19e6:	89 8b       	std	Y+17, r24	; 0x11
    19e8:	89 89       	ldd	r24, Y+17	; 0x11
    19ea:	9a 89       	ldd	r25, Y+18	; 0x12
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <SevSeg_voidSingleRangeCounter+0x160>
    19f0:	9a 8b       	std	Y+18, r25	; 0x12
    19f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	8b 89       	ldd	r24, Y+19	; 0x13
    19f6:	9c 89       	ldd	r25, Y+20	; 0x14
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1a00:	9c 89       	ldd	r25, Y+20	; 0x14
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <SevSeg_voidSingleRangeCounter+0x154>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9c 8b       	std	Y+20, r25	; 0x14
    1a1a:	8b 8b       	std	Y+19, r24	; 0x13
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	98 8b       	std	Y+16, r25	; 0x10
    1a22:	8f 87       	std	Y+15, r24	; 0x0f
    1a24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a26:	98 89       	ldd	r25, Y+16	; 0x10
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <SevSeg_voidSingleRangeCounter+0x19c>
    1a2c:	98 8b       	std	Y+16, r25	; 0x10
    1a2e:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    1a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a34:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a36:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	b1 1d       	adc	r27, r1
    1a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a40:	9e 8f       	std	Y+30, r25	; 0x1e
    1a42:	af 8f       	std	Y+31, r26	; 0x1f
    1a44:	b8 a3       	std	Y+32, r27	; 0x20
    1a46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a48:	28 2f       	mov	r18, r24
    1a4a:	33 27       	eor	r19, r19
    1a4c:	27 fd       	sbrc	r18, 7
    1a4e:	30 95       	com	r19
    1a50:	43 2f       	mov	r20, r19
    1a52:	53 2f       	mov	r21, r19
    1a54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a58:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a5a:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a5c:	82 17       	cp	r24, r18
    1a5e:	93 07       	cpc	r25, r19
    1a60:	a4 07       	cpc	r26, r20
    1a62:	b5 07       	cpc	r27, r21
    1a64:	0c f4       	brge	.+2      	; 0x1a68 <SevSeg_voidSingleRangeCounter+0x1dc>
    1a66:	62 cf       	rjmp	.-316    	; 0x192c <SevSeg_voidSingleRangeCounter+0xa0>
    1a68:	a9 c0       	rjmp	.+338    	; 0x1bbc <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    1a6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a6c:	99 27       	eor	r25, r25
    1a6e:	87 fd       	sbrc	r24, 7
    1a70:	90 95       	com	r25
    1a72:	a9 2f       	mov	r26, r25
    1a74:	b9 2f       	mov	r27, r25
    1a76:	8d 8f       	std	Y+29, r24	; 0x1d
    1a78:	9e 8f       	std	Y+30, r25	; 0x1e
    1a7a:	af 8f       	std	Y+31, r26	; 0x1f
    1a7c:	b8 a3       	std	Y+32, r27	; 0x20
    1a7e:	8d c0       	rjmp	.+282    	; 0x1b9a <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1a80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a84:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a86:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a88:	9e 01       	movw	r18, r28
    1a8a:	2f 5d       	subi	r18, 0xDF	; 223
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	f9 01       	movw	r30, r18
    1a90:	e8 0f       	add	r30, r24
    1a92:	f9 1f       	adc	r31, r25
    1a94:	80 81       	ld	r24, Z
    1a96:	98 2f       	mov	r25, r24
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	69 2f       	mov	r22, r25
    1a9c:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e2       	ldi	r26, 0x20	; 32
    1aa6:	b1 e4       	ldi	r27, 0x41	; 65
    1aa8:	8b 87       	std	Y+11, r24	; 0x0b
    1aaa:	9c 87       	std	Y+12, r25	; 0x0c
    1aac:	ad 87       	std	Y+13, r26	; 0x0d
    1aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a e7       	ldi	r20, 0x7A	; 122
    1abe:	55 e4       	ldi	r21, 0x45	; 69
    1ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8f 83       	std	Y+7, r24	; 0x07
    1aca:	98 87       	std	Y+8, r25	; 0x08
    1acc:	a9 87       	std	Y+9, r26	; 0x09
    1ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <SevSeg_voidSingleRangeCounter+0x2c6>
    1b34:	80 e9       	ldi	r24, 0x90	; 144
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <SevSeg_voidSingleRangeCounter+0x2b4>
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <SevSeg_voidSingleRangeCounter+0x2a8>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <SevSeg_voidSingleRangeCounter+0x2f0>
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    1b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b88:	af 8d       	ldd	r26, Y+31	; 0x1f
    1b8a:	b8 a1       	ldd	r27, Y+32	; 0x20
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	a1 09       	sbc	r26, r1
    1b90:	b1 09       	sbc	r27, r1
    1b92:	8d 8f       	std	Y+29, r24	; 0x1d
    1b94:	9e 8f       	std	Y+30, r25	; 0x1e
    1b96:	af 8f       	std	Y+31, r26	; 0x1f
    1b98:	b8 a3       	std	Y+32, r27	; 0x20
    1b9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	33 27       	eor	r19, r19
    1ba0:	27 fd       	sbrc	r18, 7
    1ba2:	30 95       	com	r19
    1ba4:	43 2f       	mov	r20, r19
    1ba6:	53 2f       	mov	r21, r19
    1ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1baa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bac:	af 8d       	ldd	r26, Y+31	; 0x1f
    1bae:	b8 a1       	ldd	r27, Y+32	; 0x20
    1bb0:	82 17       	cp	r24, r18
    1bb2:	93 07       	cpc	r25, r19
    1bb4:	a4 07       	cpc	r26, r20
    1bb6:	b5 07       	cpc	r27, r21
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <SevSeg_voidSingleRangeCounter+0x330>
    1bba:	62 cf       	rjmp	.-316    	; 0x1a80 <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    1bbc:	e1 96       	adiw	r28, 0x31	; 49
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	e9 97       	sbiw	r28, 0x39	; 57
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	8b ab       	std	Y+51, r24	; 0x33
    1be4:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    1be6:	ce 01       	movw	r24, r28
    1be8:	89 96       	adiw	r24, 0x29	; 41
    1bea:	9e ab       	std	Y+54, r25	; 0x36
    1bec:	8d ab       	std	Y+53, r24	; 0x35
    1bee:	eb eb       	ldi	r30, 0xBB	; 187
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	f8 af       	std	Y+56, r31	; 0x38
    1bf4:	ef ab       	std	Y+55, r30	; 0x37
    1bf6:	fa e0       	ldi	r31, 0x0A	; 10
    1bf8:	f9 af       	std	Y+57, r31	; 0x39
    1bfa:	ef a9       	ldd	r30, Y+55	; 0x37
    1bfc:	f8 ad       	ldd	r31, Y+56	; 0x38
    1bfe:	00 80       	ld	r0, Z
    1c00:	8f a9       	ldd	r24, Y+55	; 0x37
    1c02:	98 ad       	ldd	r25, Y+56	; 0x38
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	98 af       	std	Y+56, r25	; 0x38
    1c08:	8f ab       	std	Y+55, r24	; 0x37
    1c0a:	ed a9       	ldd	r30, Y+53	; 0x35
    1c0c:	fe a9       	ldd	r31, Y+54	; 0x36
    1c0e:	00 82       	st	Z, r0
    1c10:	8d a9       	ldd	r24, Y+53	; 0x35
    1c12:	9e a9       	ldd	r25, Y+54	; 0x36
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	9e ab       	std	Y+54, r25	; 0x36
    1c18:	8d ab       	std	Y+53, r24	; 0x35
    1c1a:	99 ad       	ldd	r25, Y+57	; 0x39
    1c1c:	91 50       	subi	r25, 0x01	; 1
    1c1e:	99 af       	std	Y+57, r25	; 0x39
    1c20:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c22:	ee 23       	and	r30, r30
    1c24:	51 f7       	brne	.-44     	; 0x1bfa <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    1c26:	8b a9       	ldd	r24, Y+51	; 0x33
    1c28:	9a e0       	ldi	r25, 0x0A	; 10
    1c2a:	69 2f       	mov	r22, r25
    1c2c:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    1c30:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    1c32:	8b a9       	ldd	r24, Y+51	; 0x33
    1c34:	9a e0       	ldi	r25, 0x0A	; 10
    1c36:	69 2f       	mov	r22, r25
    1c38:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    1c3c:	89 2f       	mov	r24, r25
    1c3e:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    1c40:	8c a9       	ldd	r24, Y+52	; 0x34
    1c42:	9a e0       	ldi	r25, 0x0A	; 10
    1c44:	69 2f       	mov	r22, r25
    1c46:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    1c4a:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    1c4c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c4e:	9a e0       	ldi	r25, 0x0A	; 10
    1c50:	69 2f       	mov	r22, r25
    1c52:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    1c56:	89 2f       	mov	r24, r25
    1c58:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    1c5a:	19 a2       	std	Y+33, r1	; 0x21
    1c5c:	1a a2       	std	Y+34, r1	; 0x22
    1c5e:	1b a2       	std	Y+35, r1	; 0x23
    1c60:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    1c62:	1d 8e       	std	Y+29, r1	; 0x1d
    1c64:	1e 8e       	std	Y+30, r1	; 0x1e
    1c66:	1f 8e       	std	Y+31, r1	; 0x1f
    1c68:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    1c6a:	88 a5       	ldd	r24, Y+40	; 0x28
    1c6c:	88 23       	and	r24, r24
    1c6e:	0c f4       	brge	.+2      	; 0x1c72 <SevSeg_voidDoubleRangeCounter+0xa4>
    1c70:	05 c2       	rjmp	.+1034   	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>
    1c72:	88 a5       	ldd	r24, Y+40	; 0x28
    1c74:	8a 30       	cpi	r24, 0x0A	; 10
    1c76:	0c f0       	brlt	.+2      	; 0x1c7a <SevSeg_voidDoubleRangeCounter+0xac>
    1c78:	01 c2       	rjmp	.+1026   	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>
    1c7a:	8e a1       	ldd	r24, Y+38	; 0x26
    1c7c:	8a 30       	cpi	r24, 0x0A	; 10
    1c7e:	0c f0       	brlt	.+2      	; 0x1c82 <SevSeg_voidDoubleRangeCounter+0xb4>
    1c80:	fd c1       	rjmp	.+1018   	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>
    1c82:	8e a1       	ldd	r24, Y+38	; 0x26
    1c84:	88 23       	and	r24, r24
    1c86:	0c f4       	brge	.+2      	; 0x1c8a <SevSeg_voidDoubleRangeCounter+0xbc>
    1c88:	f9 c1       	rjmp	.+1010   	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    1c8a:	9b a9       	ldd	r25, Y+51	; 0x33
    1c8c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c8e:	98 17       	cp	r25, r24
    1c90:	0c f0       	brlt	.+2      	; 0x1c94 <SevSeg_voidDoubleRangeCounter+0xc6>
    1c92:	fc c0       	rjmp	.+504    	; 0x1e8c <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    1c94:	88 a5       	ldd	r24, Y+40	; 0x28
    1c96:	99 27       	eor	r25, r25
    1c98:	87 fd       	sbrc	r24, 7
    1c9a:	90 95       	com	r25
    1c9c:	a9 2f       	mov	r26, r25
    1c9e:	b9 2f       	mov	r27, r25
    1ca0:	89 a3       	std	Y+33, r24	; 0x21
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	ab a3       	std	Y+35, r26	; 0x23
    1ca6:	bc a3       	std	Y+36, r27	; 0x24
    1ca8:	df c0       	rjmp	.+446    	; 0x1e68 <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    1caa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cac:	9a a1       	ldd	r25, Y+34	; 0x22
    1cae:	ab a1       	ldd	r26, Y+35	; 0x23
    1cb0:	bc a1       	ldd	r27, Y+36	; 0x24
    1cb2:	9e 01       	movw	r18, r28
    1cb4:	27 5d       	subi	r18, 0xD7	; 215
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	f9 01       	movw	r30, r18
    1cba:	e8 0f       	add	r30, r24
    1cbc:	f9 1f       	adc	r31, r25
    1cbe:	80 81       	ld	r24, Z
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	69 2f       	mov	r22, r25
    1cc6:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    1cca:	8f a1       	ldd	r24, Y+39	; 0x27
    1ccc:	99 27       	eor	r25, r25
    1cce:	87 fd       	sbrc	r24, 7
    1cd0:	90 95       	com	r25
    1cd2:	a9 2f       	mov	r26, r25
    1cd4:	b9 2f       	mov	r27, r25
    1cd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1cd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cda:	af 8f       	std	Y+31, r26	; 0x1f
    1cdc:	b8 a3       	std	Y+32, r27	; 0x20
    1cde:	ae c0       	rjmp	.+348    	; 0x1e3c <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1ce0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ce4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ce6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ce8:	9e 01       	movw	r18, r28
    1cea:	27 5d       	subi	r18, 0xD7	; 215
    1cec:	3f 4f       	sbci	r19, 0xFF	; 255
    1cee:	f9 01       	movw	r30, r18
    1cf0:	e8 0f       	add	r30, r24
    1cf2:	f9 1f       	adc	r31, r25
    1cf4:	80 81       	ld	r24, Z
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	69 2f       	mov	r22, r25
    1cfc:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a0 e2       	ldi	r26, 0x20	; 32
    1d06:	b1 e4       	ldi	r27, 0x41	; 65
    1d08:	89 8f       	std	Y+25, r24	; 0x19
    1d0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d10:	69 8d       	ldd	r22, Y+25	; 0x19
    1d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	55 e4       	ldi	r21, 0x45	; 69
    1d20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8d 8b       	std	Y+21, r24	; 0x15
    1d2a:	9e 8b       	std	Y+22, r25	; 0x16
    1d2c:	af 8b       	std	Y+23, r26	; 0x17
    1d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d30:	6d 89       	ldd	r22, Y+21	; 0x15
    1d32:	7e 89       	ldd	r23, Y+22	; 0x16
    1d34:	8f 89       	ldd	r24, Y+23	; 0x17
    1d36:	98 8d       	ldd	r25, Y+24	; 0x18
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	5f e3       	ldi	r21, 0x3F	; 63
    1d40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	3f c0       	rjmp	.+126    	; 0x1dd0 <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	57 e4       	ldi	r21, 0x47	; 71
    1d62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	4c f5       	brge	.+82     	; 0x1dbc <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <SevSeg_voidDoubleRangeCounter+0x1e4>
    1d94:	80 e9       	ldi	r24, 0x90	; 144
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	9a 8b       	std	Y+18, r25	; 0x12
    1d9a:	89 8b       	std	Y+17, r24	; 0x11
    1d9c:	89 89       	ldd	r24, Y+17	; 0x11
    1d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <SevSeg_voidDoubleRangeCounter+0x1d2>
    1da4:	9a 8b       	std	Y+18, r25	; 0x12
    1da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	9c 89       	ldd	r25, Y+20	; 0x14
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	69 f7       	brne	.-38     	; 0x1d94 <SevSeg_voidDoubleRangeCounter+0x1c6>
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
    1dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd4:	98 8b       	std	Y+16, r25	; 0x10
    1dd6:	8f 87       	std	Y+15, r24	; 0x0f
    1dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dda:	98 89       	ldd	r25, Y+16	; 0x10
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <SevSeg_voidDoubleRangeCounter+0x20e>
    1de0:	98 8b       	std	Y+16, r25	; 0x10
    1de2:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    1de4:	8d a1       	ldd	r24, Y+37	; 0x25
    1de6:	28 2f       	mov	r18, r24
    1de8:	33 27       	eor	r19, r19
    1dea:	27 fd       	sbrc	r18, 7
    1dec:	30 95       	com	r19
    1dee:	43 2f       	mov	r20, r19
    1df0:	53 2f       	mov	r21, r19
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df6:	af 8d       	ldd	r26, Y+31	; 0x1f
    1df8:	b8 a1       	ldd	r27, Y+32	; 0x20
    1dfa:	28 17       	cp	r18, r24
    1dfc:	39 07       	cpc	r19, r25
    1dfe:	4a 07       	cpc	r20, r26
    1e00:	5b 07       	cpc	r21, r27
    1e02:	89 f4       	brne	.+34     	; 0x1e26 <SevSeg_voidDoubleRangeCounter+0x258>
    1e04:	8e a1       	ldd	r24, Y+38	; 0x26
    1e06:	28 2f       	mov	r18, r24
    1e08:	33 27       	eor	r19, r19
    1e0a:	27 fd       	sbrc	r18, 7
    1e0c:	30 95       	com	r19
    1e0e:	43 2f       	mov	r20, r19
    1e10:	53 2f       	mov	r21, r19
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	ab a1       	ldd	r26, Y+35	; 0x23
    1e18:	bc a1       	ldd	r27, Y+36	; 0x24
    1e1a:	28 17       	cp	r18, r24
    1e1c:	39 07       	cpc	r19, r25
    1e1e:	4a 07       	cpc	r20, r26
    1e20:	5b 07       	cpc	r21, r27
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <SevSeg_voidDoubleRangeCounter+0x258>
    1e24:	2b c1       	rjmp	.+598    	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    1e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e2a:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e2c:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	a1 1d       	adc	r26, r1
    1e32:	b1 1d       	adc	r27, r1
    1e34:	8d 8f       	std	Y+29, r24	; 0x1d
    1e36:	9e 8f       	std	Y+30, r25	; 0x1e
    1e38:	af 8f       	std	Y+31, r26	; 0x1f
    1e3a:	b8 a3       	std	Y+32, r27	; 0x20
    1e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e40:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e42:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e44:	8a 30       	cpi	r24, 0x0A	; 10
    1e46:	91 05       	cpc	r25, r1
    1e48:	a1 05       	cpc	r26, r1
    1e4a:	b1 05       	cpc	r27, r1
    1e4c:	0c f4       	brge	.+2      	; 0x1e50 <SevSeg_voidDoubleRangeCounter+0x282>
    1e4e:	48 cf       	rjmp	.-368    	; 0x1ce0 <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    1e50:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    1e52:	89 a1       	ldd	r24, Y+33	; 0x21
    1e54:	9a a1       	ldd	r25, Y+34	; 0x22
    1e56:	ab a1       	ldd	r26, Y+35	; 0x23
    1e58:	bc a1       	ldd	r27, Y+36	; 0x24
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	a1 1d       	adc	r26, r1
    1e5e:	b1 1d       	adc	r27, r1
    1e60:	89 a3       	std	Y+33, r24	; 0x21
    1e62:	9a a3       	std	Y+34, r25	; 0x22
    1e64:	ab a3       	std	Y+35, r26	; 0x23
    1e66:	bc a3       	std	Y+36, r27	; 0x24
    1e68:	8e a1       	ldd	r24, Y+38	; 0x26
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	33 27       	eor	r19, r19
    1e6e:	27 fd       	sbrc	r18, 7
    1e70:	30 95       	com	r19
    1e72:	43 2f       	mov	r20, r19
    1e74:	53 2f       	mov	r21, r19
    1e76:	89 a1       	ldd	r24, Y+33	; 0x21
    1e78:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7a:	ab a1       	ldd	r26, Y+35	; 0x23
    1e7c:	bc a1       	ldd	r27, Y+36	; 0x24
    1e7e:	28 17       	cp	r18, r24
    1e80:	39 07       	cpc	r19, r25
    1e82:	4a 07       	cpc	r20, r26
    1e84:	5b 07       	cpc	r21, r27
    1e86:	0c f0       	brlt	.+2      	; 0x1e8a <SevSeg_voidDoubleRangeCounter+0x2bc>
    1e88:	10 cf       	rjmp	.-480    	; 0x1caa <SevSeg_voidDoubleRangeCounter+0xdc>
    1e8a:	f8 c0       	rjmp	.+496    	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    1e8c:	88 a5       	ldd	r24, Y+40	; 0x28
    1e8e:	99 27       	eor	r25, r25
    1e90:	87 fd       	sbrc	r24, 7
    1e92:	90 95       	com	r25
    1e94:	a9 2f       	mov	r26, r25
    1e96:	b9 2f       	mov	r27, r25
    1e98:	89 a3       	std	Y+33, r24	; 0x21
    1e9a:	9a a3       	std	Y+34, r25	; 0x22
    1e9c:	ab a3       	std	Y+35, r26	; 0x23
    1e9e:	bc a3       	std	Y+36, r27	; 0x24
    1ea0:	dc c0       	rjmp	.+440    	; 0x205a <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	ab a1       	ldd	r26, Y+35	; 0x23
    1ea8:	bc a1       	ldd	r27, Y+36	; 0x24
    1eaa:	9e 01       	movw	r18, r28
    1eac:	27 5d       	subi	r18, 0xD7	; 215
    1eae:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb0:	f9 01       	movw	r30, r18
    1eb2:	e8 0f       	add	r30, r24
    1eb4:	f9 1f       	adc	r31, r25
    1eb6:	80 81       	ld	r24, Z
    1eb8:	98 2f       	mov	r25, r24
    1eba:	84 e0       	ldi	r24, 0x04	; 4
    1ebc:	69 2f       	mov	r22, r25
    1ebe:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    1ec2:	8f a1       	ldd	r24, Y+39	; 0x27
    1ec4:	99 27       	eor	r25, r25
    1ec6:	87 fd       	sbrc	r24, 7
    1ec8:	90 95       	com	r25
    1eca:	a9 2f       	mov	r26, r25
    1ecc:	b9 2f       	mov	r27, r25
    1ece:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed2:	af 8f       	std	Y+31, r26	; 0x1f
    1ed4:	b8 a3       	std	Y+32, r27	; 0x20
    1ed6:	ad c0       	rjmp	.+346    	; 0x2032 <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1ed8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1edc:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ede:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	27 5d       	subi	r18, 0xD7	; 215
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	e8 0f       	add	r30, r24
    1eea:	f9 1f       	adc	r31, r25
    1eec:	80 81       	ld	r24, Z
    1eee:	98 2f       	mov	r25, r24
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	69 2f       	mov	r22, r25
    1ef4:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e2       	ldi	r26, 0x20	; 32
    1efe:	b1 e4       	ldi	r27, 0x41	; 65
    1f00:	8b 87       	std	Y+11, r24	; 0x0b
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	ad 87       	std	Y+13, r26	; 0x0d
    1f06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	55 e4       	ldi	r21, 0x45	; 69
    1f18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8f 83       	std	Y+7, r24	; 0x07
    1f22:	98 87       	std	Y+8, r25	; 0x08
    1f24:	a9 87       	std	Y+9, r26	; 0x09
    1f26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f28:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2a:	78 85       	ldd	r23, Y+8	; 0x08
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <SevSeg_voidDoubleRangeCounter+0x3dc>
    1f8c:	80 e9       	ldi	r24, 0x90	; 144
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <SevSeg_voidDoubleRangeCounter+0x3ca>
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <SevSeg_voidDoubleRangeCounter+0x3be>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <SevSeg_voidDoubleRangeCounter+0x406>
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    1fdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fde:	28 2f       	mov	r18, r24
    1fe0:	33 27       	eor	r19, r19
    1fe2:	27 fd       	sbrc	r18, 7
    1fe4:	30 95       	com	r19
    1fe6:	43 2f       	mov	r20, r19
    1fe8:	53 2f       	mov	r21, r19
    1fea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fee:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ff0:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ff2:	28 17       	cp	r18, r24
    1ff4:	39 07       	cpc	r19, r25
    1ff6:	4a 07       	cpc	r20, r26
    1ff8:	5b 07       	cpc	r21, r27
    1ffa:	81 f4       	brne	.+32     	; 0x201c <SevSeg_voidDoubleRangeCounter+0x44e>
    1ffc:	8e a1       	ldd	r24, Y+38	; 0x26
    1ffe:	28 2f       	mov	r18, r24
    2000:	33 27       	eor	r19, r19
    2002:	27 fd       	sbrc	r18, 7
    2004:	30 95       	com	r19
    2006:	43 2f       	mov	r20, r19
    2008:	53 2f       	mov	r21, r19
    200a:	89 a1       	ldd	r24, Y+33	; 0x21
    200c:	9a a1       	ldd	r25, Y+34	; 0x22
    200e:	ab a1       	ldd	r26, Y+35	; 0x23
    2010:	bc a1       	ldd	r27, Y+36	; 0x24
    2012:	28 17       	cp	r18, r24
    2014:	39 07       	cpc	r19, r25
    2016:	4a 07       	cpc	r20, r26
    2018:	5b 07       	cpc	r21, r27
    201a:	81 f1       	breq	.+96     	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    201c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2020:	af 8d       	ldd	r26, Y+31	; 0x1f
    2022:	b8 a1       	ldd	r27, Y+32	; 0x20
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	a1 09       	sbc	r26, r1
    2028:	b1 09       	sbc	r27, r1
    202a:	8d 8f       	std	Y+29, r24	; 0x1d
    202c:	9e 8f       	std	Y+30, r25	; 0x1e
    202e:	af 8f       	std	Y+31, r26	; 0x1f
    2030:	b8 a3       	std	Y+32, r27	; 0x20
    2032:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2034:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2036:	af 8d       	ldd	r26, Y+31	; 0x1f
    2038:	b8 a1       	ldd	r27, Y+32	; 0x20
    203a:	bb 23       	and	r27, r27
    203c:	0c f0       	brlt	.+2      	; 0x2040 <SevSeg_voidDoubleRangeCounter+0x472>
    203e:	4c cf       	rjmp	.-360    	; 0x1ed8 <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    2040:	89 e0       	ldi	r24, 0x09	; 9
    2042:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2044:	89 a1       	ldd	r24, Y+33	; 0x21
    2046:	9a a1       	ldd	r25, Y+34	; 0x22
    2048:	ab a1       	ldd	r26, Y+35	; 0x23
    204a:	bc a1       	ldd	r27, Y+36	; 0x24
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	a1 09       	sbc	r26, r1
    2050:	b1 09       	sbc	r27, r1
    2052:	89 a3       	std	Y+33, r24	; 0x21
    2054:	9a a3       	std	Y+34, r25	; 0x22
    2056:	ab a3       	std	Y+35, r26	; 0x23
    2058:	bc a3       	std	Y+36, r27	; 0x24
    205a:	8e a1       	ldd	r24, Y+38	; 0x26
    205c:	28 2f       	mov	r18, r24
    205e:	33 27       	eor	r19, r19
    2060:	27 fd       	sbrc	r18, 7
    2062:	30 95       	com	r19
    2064:	43 2f       	mov	r20, r19
    2066:	53 2f       	mov	r21, r19
    2068:	89 a1       	ldd	r24, Y+33	; 0x21
    206a:	9a a1       	ldd	r25, Y+34	; 0x22
    206c:	ab a1       	ldd	r26, Y+35	; 0x23
    206e:	bc a1       	ldd	r27, Y+36	; 0x24
    2070:	82 17       	cp	r24, r18
    2072:	93 07       	cpc	r25, r19
    2074:	a4 07       	cpc	r26, r20
    2076:	b5 07       	cpc	r27, r21
    2078:	0c f0       	brlt	.+2      	; 0x207c <SevSeg_voidDoubleRangeCounter+0x4ae>
    207a:	13 cf       	rjmp	.-474    	; 0x1ea2 <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    207c:	e9 96       	adiw	r28, 0x39	; 57
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <SevSeg_voidBCDDisplay+0x6>
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	6a 81       	ldd	r22, Y+2	; 0x02
    20a0:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	ab 97       	sbiw	r28, 0x2b	; 43
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	8a a7       	std	Y+42, r24	; 0x2a
    20c4:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    20c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    20c8:	9a e0       	ldi	r25, 0x0A	; 10
    20ca:	69 2f       	mov	r22, r25
    20cc:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    20d0:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    20d2:	8a a5       	ldd	r24, Y+42	; 0x2a
    20d4:	9a e0       	ldi	r25, 0x0A	; 10
    20d6:	69 2f       	mov	r22, r25
    20d8:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    20dc:	89 2f       	mov	r24, r25
    20de:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    20e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e2:	9a e0       	ldi	r25, 0x0A	; 10
    20e4:	69 2f       	mov	r22, r25
    20e6:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    20ea:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    20ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ee:	9a e0       	ldi	r25, 0x0A	; 10
    20f0:	69 2f       	mov	r22, r25
    20f2:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    20f6:	89 2f       	mov	r24, r25
    20f8:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    20fa:	1a a2       	std	Y+34, r1	; 0x22
    20fc:	1b a2       	std	Y+35, r1	; 0x23
    20fe:	1c a2       	std	Y+36, r1	; 0x24
    2100:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    2102:	1e 8e       	std	Y+30, r1	; 0x1e
    2104:	1f 8e       	std	Y+31, r1	; 0x1f
    2106:	18 a2       	std	Y+32, r1	; 0x20
    2108:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    210a:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    210c:	89 a5       	ldd	r24, Y+41	; 0x29
    210e:	88 23       	and	r24, r24
    2110:	0c f4       	brge	.+2      	; 0x2114 <SevSeg_voidBCDDoubleDisplay+0x66>
    2112:	11 c2       	rjmp	.+1058   	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>
    2114:	89 a5       	ldd	r24, Y+41	; 0x29
    2116:	8a 30       	cpi	r24, 0x0A	; 10
    2118:	0c f0       	brlt	.+2      	; 0x211c <SevSeg_voidBCDDoubleDisplay+0x6e>
    211a:	0d c2       	rjmp	.+1050   	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>
    211c:	8f a1       	ldd	r24, Y+39	; 0x27
    211e:	8a 30       	cpi	r24, 0x0A	; 10
    2120:	0c f0       	brlt	.+2      	; 0x2124 <SevSeg_voidBCDDoubleDisplay+0x76>
    2122:	09 c2       	rjmp	.+1042   	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>
    2124:	8f a1       	ldd	r24, Y+39	; 0x27
    2126:	88 23       	and	r24, r24
    2128:	0c f4       	brge	.+2      	; 0x212c <SevSeg_voidBCDDoubleDisplay+0x7e>
    212a:	05 c2       	rjmp	.+1034   	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    212c:	9a a5       	ldd	r25, Y+42	; 0x2a
    212e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2130:	98 17       	cp	r25, r24
    2132:	0c f0       	brlt	.+2      	; 0x2136 <SevSeg_voidBCDDoubleDisplay+0x88>
    2134:	02 c1       	rjmp	.+516    	; 0x233a <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2136:	89 a5       	ldd	r24, Y+41	; 0x29
    2138:	99 27       	eor	r25, r25
    213a:	87 fd       	sbrc	r24, 7
    213c:	90 95       	com	r25
    213e:	a9 2f       	mov	r26, r25
    2140:	b9 2f       	mov	r27, r25
    2142:	8a a3       	std	Y+34, r24	; 0x22
    2144:	9b a3       	std	Y+35, r25	; 0x23
    2146:	ac a3       	std	Y+36, r26	; 0x24
    2148:	bd a3       	std	Y+37, r27	; 0x25
    214a:	e5 c0       	rjmp	.+458    	; 0x2316 <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    214c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    214e:	8f 70       	andi	r24, 0x0F	; 15
    2150:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2152:	8a a1       	ldd	r24, Y+34	; 0x22
    2154:	9b a1       	ldd	r25, Y+35	; 0x23
    2156:	ac a1       	ldd	r26, Y+36	; 0x24
    2158:	bd a1       	ldd	r27, Y+37	; 0x25
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	aa 1f       	adc	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	aa 1f       	adc	r26, r26
    2168:	bb 1f       	adc	r27, r27
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	aa 1f       	adc	r26, r26
    2170:	bb 1f       	adc	r27, r27
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	aa 1f       	adc	r26, r26
    2178:	bb 1f       	adc	r27, r27
    217a:	98 2f       	mov	r25, r24
    217c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217e:	89 2b       	or	r24, r25
    2180:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2182:	88 a5       	ldd	r24, Y+40	; 0x28
    2184:	99 27       	eor	r25, r25
    2186:	87 fd       	sbrc	r24, 7
    2188:	90 95       	com	r25
    218a:	a9 2f       	mov	r26, r25
    218c:	b9 2f       	mov	r27, r25
    218e:	8e 8f       	std	Y+30, r24	; 0x1e
    2190:	9f 8f       	std	Y+31, r25	; 0x1f
    2192:	a8 a3       	std	Y+32, r26	; 0x20
    2194:	b9 a3       	std	Y+33, r27	; 0x21
    2196:	a9 c0       	rjmp	.+338    	; 0x22ea <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    2198:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219a:	80 7f       	andi	r24, 0xF0	; 240
    219c:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    219e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a2:	89 2b       	or	r24, r25
    21a4:	8d 8f       	std	Y+29, r24	; 0x1d
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e2       	ldi	r26, 0x20	; 32
    21ac:	b1 e4       	ldi	r27, 0x41	; 65
    21ae:	89 8f       	std	Y+25, r24	; 0x19
    21b0:	9a 8f       	std	Y+26, r25	; 0x1a
    21b2:	ab 8f       	std	Y+27, r26	; 0x1b
    21b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	69 8d       	ldd	r22, Y+25	; 0x19
    21b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4a e7       	ldi	r20, 0x7A	; 122
    21c4:	55 e4       	ldi	r21, 0x45	; 69
    21c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8d 8b       	std	Y+21, r24	; 0x15
    21d0:	9e 8b       	std	Y+22, r25	; 0x16
    21d2:	af 8b       	std	Y+23, r26	; 0x17
    21d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    21f8:	6d 89       	ldd	r22, Y+21	; 0x15
    21fa:	7e 89       	ldd	r23, Y+22	; 0x16
    21fc:	8f 89       	ldd	r24, Y+23	; 0x17
    21fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	4c f5       	brge	.+82     	; 0x2262 <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2210:	69 8d       	ldd	r22, Y+25	; 0x19
    2212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	51 e4       	ldi	r21, 0x41	; 65
    2220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <SevSeg_voidBCDDoubleDisplay+0x1aa>
    223a:	80 e9       	ldi	r24, 0x90	; 144
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	9a 8b       	std	Y+18, r25	; 0x12
    2240:	89 8b       	std	Y+17, r24	; 0x11
    2242:	89 89       	ldd	r24, Y+17	; 0x11
    2244:	9a 89       	ldd	r25, Y+18	; 0x12
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <SevSeg_voidBCDDoubleDisplay+0x198>
    224a:	9a 8b       	std	Y+18, r25	; 0x12
    224c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	69 f7       	brne	.-38     	; 0x223a <SevSeg_voidBCDDoubleDisplay+0x18c>
    2260:	14 c0       	rjmp	.+40     	; 0x228a <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2262:	6d 89       	ldd	r22, Y+21	; 0x15
    2264:	7e 89       	ldd	r23, Y+22	; 0x16
    2266:	8f 89       	ldd	r24, Y+23	; 0x17
    2268:	98 8d       	ldd	r25, Y+24	; 0x18
    226a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9c 8b       	std	Y+20, r25	; 0x14
    2274:	8b 8b       	std	Y+19, r24	; 0x13
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	98 8b       	std	Y+16, r25	; 0x10
    227c:	8f 87       	std	Y+15, r24	; 0x0f
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2280:	98 89       	ldd	r25, Y+16	; 0x10
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <SevSeg_voidBCDDoubleDisplay+0x1d4>
    2286:	98 8b       	std	Y+16, r25	; 0x10
    2288:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    228e:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2292:	8e a1       	ldd	r24, Y+38	; 0x26
    2294:	28 2f       	mov	r18, r24
    2296:	33 27       	eor	r19, r19
    2298:	27 fd       	sbrc	r18, 7
    229a:	30 95       	com	r19
    229c:	43 2f       	mov	r20, r19
    229e:	53 2f       	mov	r21, r19
    22a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22a4:	a8 a1       	ldd	r26, Y+32	; 0x20
    22a6:	b9 a1       	ldd	r27, Y+33	; 0x21
    22a8:	28 17       	cp	r18, r24
    22aa:	39 07       	cpc	r19, r25
    22ac:	4a 07       	cpc	r20, r26
    22ae:	5b 07       	cpc	r21, r27
    22b0:	89 f4       	brne	.+34     	; 0x22d4 <SevSeg_voidBCDDoubleDisplay+0x226>
    22b2:	8f a1       	ldd	r24, Y+39	; 0x27
    22b4:	28 2f       	mov	r18, r24
    22b6:	33 27       	eor	r19, r19
    22b8:	27 fd       	sbrc	r18, 7
    22ba:	30 95       	com	r19
    22bc:	43 2f       	mov	r20, r19
    22be:	53 2f       	mov	r21, r19
    22c0:	8a a1       	ldd	r24, Y+34	; 0x22
    22c2:	9b a1       	ldd	r25, Y+35	; 0x23
    22c4:	ac a1       	ldd	r26, Y+36	; 0x24
    22c6:	bd a1       	ldd	r27, Y+37	; 0x25
    22c8:	28 17       	cp	r18, r24
    22ca:	39 07       	cpc	r19, r25
    22cc:	4a 07       	cpc	r20, r26
    22ce:	5b 07       	cpc	r21, r27
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <SevSeg_voidBCDDoubleDisplay+0x226>
    22d2:	31 c1       	rjmp	.+610    	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    22d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22d8:	a8 a1       	ldd	r26, Y+32	; 0x20
    22da:	b9 a1       	ldd	r27, Y+33	; 0x21
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	a1 1d       	adc	r26, r1
    22e0:	b1 1d       	adc	r27, r1
    22e2:	8e 8f       	std	Y+30, r24	; 0x1e
    22e4:	9f 8f       	std	Y+31, r25	; 0x1f
    22e6:	a8 a3       	std	Y+32, r26	; 0x20
    22e8:	b9 a3       	std	Y+33, r27	; 0x21
    22ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ee:	a8 a1       	ldd	r26, Y+32	; 0x20
    22f0:	b9 a1       	ldd	r27, Y+33	; 0x21
    22f2:	8a 30       	cpi	r24, 0x0A	; 10
    22f4:	91 05       	cpc	r25, r1
    22f6:	a1 05       	cpc	r26, r1
    22f8:	b1 05       	cpc	r27, r1
    22fa:	0c f4       	brge	.+2      	; 0x22fe <SevSeg_voidBCDDoubleDisplay+0x250>
    22fc:	4d cf       	rjmp	.-358    	; 0x2198 <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    22fe:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2300:	8a a1       	ldd	r24, Y+34	; 0x22
    2302:	9b a1       	ldd	r25, Y+35	; 0x23
    2304:	ac a1       	ldd	r26, Y+36	; 0x24
    2306:	bd a1       	ldd	r27, Y+37	; 0x25
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	a1 1d       	adc	r26, r1
    230c:	b1 1d       	adc	r27, r1
    230e:	8a a3       	std	Y+34, r24	; 0x22
    2310:	9b a3       	std	Y+35, r25	; 0x23
    2312:	ac a3       	std	Y+36, r26	; 0x24
    2314:	bd a3       	std	Y+37, r27	; 0x25
    2316:	8f a1       	ldd	r24, Y+39	; 0x27
    2318:	28 2f       	mov	r18, r24
    231a:	33 27       	eor	r19, r19
    231c:	27 fd       	sbrc	r18, 7
    231e:	30 95       	com	r19
    2320:	43 2f       	mov	r20, r19
    2322:	53 2f       	mov	r21, r19
    2324:	8a a1       	ldd	r24, Y+34	; 0x22
    2326:	9b a1       	ldd	r25, Y+35	; 0x23
    2328:	ac a1       	ldd	r26, Y+36	; 0x24
    232a:	bd a1       	ldd	r27, Y+37	; 0x25
    232c:	28 17       	cp	r18, r24
    232e:	39 07       	cpc	r19, r25
    2330:	4a 07       	cpc	r20, r26
    2332:	5b 07       	cpc	r21, r27
    2334:	0c f0       	brlt	.+2      	; 0x2338 <SevSeg_voidBCDDoubleDisplay+0x28a>
    2336:	0a cf       	rjmp	.-492    	; 0x214c <SevSeg_voidBCDDoubleDisplay+0x9e>
    2338:	fe c0       	rjmp	.+508    	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    233a:	89 a5       	ldd	r24, Y+41	; 0x29
    233c:	99 27       	eor	r25, r25
    233e:	87 fd       	sbrc	r24, 7
    2340:	90 95       	com	r25
    2342:	a9 2f       	mov	r26, r25
    2344:	b9 2f       	mov	r27, r25
    2346:	8a a3       	std	Y+34, r24	; 0x22
    2348:	9b a3       	std	Y+35, r25	; 0x23
    234a:	ac a3       	std	Y+36, r26	; 0x24
    234c:	bd a3       	std	Y+37, r27	; 0x25
    234e:	e2 c0       	rjmp	.+452    	; 0x2514 <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    2350:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2352:	8f 70       	andi	r24, 0x0F	; 15
    2354:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2356:	8a a1       	ldd	r24, Y+34	; 0x22
    2358:	9b a1       	ldd	r25, Y+35	; 0x23
    235a:	ac a1       	ldd	r26, Y+36	; 0x24
    235c:	bd a1       	ldd	r27, Y+37	; 0x25
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	aa 1f       	adc	r26, r26
    2364:	bb 1f       	adc	r27, r27
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	aa 1f       	adc	r26, r26
    236c:	bb 1f       	adc	r27, r27
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	aa 1f       	adc	r26, r26
    2374:	bb 1f       	adc	r27, r27
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	aa 1f       	adc	r26, r26
    237c:	bb 1f       	adc	r27, r27
    237e:	98 2f       	mov	r25, r24
    2380:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2382:	89 2b       	or	r24, r25
    2384:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2386:	88 a5       	ldd	r24, Y+40	; 0x28
    2388:	99 27       	eor	r25, r25
    238a:	87 fd       	sbrc	r24, 7
    238c:	90 95       	com	r25
    238e:	a9 2f       	mov	r26, r25
    2390:	b9 2f       	mov	r27, r25
    2392:	8e 8f       	std	Y+30, r24	; 0x1e
    2394:	9f 8f       	std	Y+31, r25	; 0x1f
    2396:	a8 a3       	std	Y+32, r26	; 0x20
    2398:	b9 a3       	std	Y+33, r27	; 0x21
    239a:	a8 c0       	rjmp	.+336    	; 0x24ec <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    239c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239e:	80 7f       	andi	r24, 0xF0	; 240
    23a0:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    23a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a6:	89 2b       	or	r24, r25
    23a8:	8d 8f       	std	Y+29, r24	; 0x1d
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e2       	ldi	r26, 0x20	; 32
    23b0:	b1 e4       	ldi	r27, 0x41	; 65
    23b2:	8b 87       	std	Y+11, r24	; 0x0b
    23b4:	9c 87       	std	Y+12, r25	; 0x0c
    23b6:	ad 87       	std	Y+13, r26	; 0x0d
    23b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    23bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23be:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a e7       	ldi	r20, 0x7A	; 122
    23c8:	55 e4       	ldi	r21, 0x45	; 69
    23ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8f 83       	std	Y+7, r24	; 0x07
    23d4:	98 87       	std	Y+8, r25	; 0x08
    23d6:	a9 87       	std	Y+9, r26	; 0x09
    23d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	6b 85       	ldd	r22, Y+11	; 0x0b
    2416:	7c 85       	ldd	r23, Y+12	; 0x0c
    2418:	8d 85       	ldd	r24, Y+13	; 0x0d
    241a:	9e 85       	ldd	r25, Y+14	; 0x0e
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	0f c0       	rjmp	.+30     	; 0x245c <SevSeg_voidBCDDoubleDisplay+0x3ae>
    243e:	80 e9       	ldi	r24, 0x90	; 144
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <SevSeg_voidBCDDoubleDisplay+0x39c>
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <SevSeg_voidBCDDoubleDisplay+0x390>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <SevSeg_voidBCDDoubleDisplay+0x3d8>
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2492:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2496:	8e a1       	ldd	r24, Y+38	; 0x26
    2498:	28 2f       	mov	r18, r24
    249a:	33 27       	eor	r19, r19
    249c:	27 fd       	sbrc	r18, 7
    249e:	30 95       	com	r19
    24a0:	43 2f       	mov	r20, r19
    24a2:	53 2f       	mov	r21, r19
    24a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24a8:	a8 a1       	ldd	r26, Y+32	; 0x20
    24aa:	b9 a1       	ldd	r27, Y+33	; 0x21
    24ac:	28 17       	cp	r18, r24
    24ae:	39 07       	cpc	r19, r25
    24b0:	4a 07       	cpc	r20, r26
    24b2:	5b 07       	cpc	r21, r27
    24b4:	81 f4       	brne	.+32     	; 0x24d6 <SevSeg_voidBCDDoubleDisplay+0x428>
    24b6:	8f a1       	ldd	r24, Y+39	; 0x27
    24b8:	28 2f       	mov	r18, r24
    24ba:	33 27       	eor	r19, r19
    24bc:	27 fd       	sbrc	r18, 7
    24be:	30 95       	com	r19
    24c0:	43 2f       	mov	r20, r19
    24c2:	53 2f       	mov	r21, r19
    24c4:	8a a1       	ldd	r24, Y+34	; 0x22
    24c6:	9b a1       	ldd	r25, Y+35	; 0x23
    24c8:	ac a1       	ldd	r26, Y+36	; 0x24
    24ca:	bd a1       	ldd	r27, Y+37	; 0x25
    24cc:	28 17       	cp	r18, r24
    24ce:	39 07       	cpc	r19, r25
    24d0:	4a 07       	cpc	r20, r26
    24d2:	5b 07       	cpc	r21, r27
    24d4:	81 f1       	breq	.+96     	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    24d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24da:	a8 a1       	ldd	r26, Y+32	; 0x20
    24dc:	b9 a1       	ldd	r27, Y+33	; 0x21
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	a1 09       	sbc	r26, r1
    24e2:	b1 09       	sbc	r27, r1
    24e4:	8e 8f       	std	Y+30, r24	; 0x1e
    24e6:	9f 8f       	std	Y+31, r25	; 0x1f
    24e8:	a8 a3       	std	Y+32, r26	; 0x20
    24ea:	b9 a3       	std	Y+33, r27	; 0x21
    24ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24f0:	a8 a1       	ldd	r26, Y+32	; 0x20
    24f2:	b9 a1       	ldd	r27, Y+33	; 0x21
    24f4:	bb 23       	and	r27, r27
    24f6:	0c f0       	brlt	.+2      	; 0x24fa <SevSeg_voidBCDDoubleDisplay+0x44c>
    24f8:	51 cf       	rjmp	.-350    	; 0x239c <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    24fa:	89 e0       	ldi	r24, 0x09	; 9
    24fc:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    24fe:	8a a1       	ldd	r24, Y+34	; 0x22
    2500:	9b a1       	ldd	r25, Y+35	; 0x23
    2502:	ac a1       	ldd	r26, Y+36	; 0x24
    2504:	bd a1       	ldd	r27, Y+37	; 0x25
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	a1 09       	sbc	r26, r1
    250a:	b1 09       	sbc	r27, r1
    250c:	8a a3       	std	Y+34, r24	; 0x22
    250e:	9b a3       	std	Y+35, r25	; 0x23
    2510:	ac a3       	std	Y+36, r26	; 0x24
    2512:	bd a3       	std	Y+37, r27	; 0x25
    2514:	8f a1       	ldd	r24, Y+39	; 0x27
    2516:	28 2f       	mov	r18, r24
    2518:	33 27       	eor	r19, r19
    251a:	27 fd       	sbrc	r18, 7
    251c:	30 95       	com	r19
    251e:	43 2f       	mov	r20, r19
    2520:	53 2f       	mov	r21, r19
    2522:	8a a1       	ldd	r24, Y+34	; 0x22
    2524:	9b a1       	ldd	r25, Y+35	; 0x23
    2526:	ac a1       	ldd	r26, Y+36	; 0x24
    2528:	bd a1       	ldd	r27, Y+37	; 0x25
    252a:	82 17       	cp	r24, r18
    252c:	93 07       	cpc	r25, r19
    252e:	a4 07       	cpc	r26, r20
    2530:	b5 07       	cpc	r27, r21
    2532:	0c f0       	brlt	.+2      	; 0x2536 <SevSeg_voidBCDDoubleDisplay+0x488>
    2534:	0d cf       	rjmp	.-486    	; 0x2350 <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2536:	ab 96       	adiw	r28, 0x2b	; 43
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	c1 54       	subi	r28, 0x41	; 65
    2552:	d0 40       	sbci	r29, 0x00	; 0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	fe 01       	movw	r30, r28
    2560:	e0 5c       	subi	r30, 0xC0	; 192
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 83       	st	Z, r24
    2566:	fe 01       	movw	r30, r28
    2568:	ef 5b       	subi	r30, 0xBF	; 191
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    256e:	fe 01       	movw	r30, r28
    2570:	e0 5c       	subi	r30, 0xC0	; 192
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	9a e0       	ldi	r25, 0x0A	; 10
    2578:	69 2f       	mov	r22, r25
    257a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    257e:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    2580:	fe 01       	movw	r30, r28
    2582:	e0 5c       	subi	r30, 0xC0	; 192
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	9a e0       	ldi	r25, 0x0A	; 10
    258a:	69 2f       	mov	r22, r25
    258c:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    2590:	89 2f       	mov	r24, r25
    2592:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    2594:	fe 01       	movw	r30, r28
    2596:	ef 5b       	subi	r30, 0xBF	; 191
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	9a e0       	ldi	r25, 0x0A	; 10
    259e:	69 2f       	mov	r22, r25
    25a0:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    25a4:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    25a6:	fe 01       	movw	r30, r28
    25a8:	ef 5b       	subi	r30, 0xBF	; 191
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	9a e0       	ldi	r25, 0x0A	; 10
    25b0:	69 2f       	mov	r22, r25
    25b2:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <__divmodqi4>
    25b6:	89 2f       	mov	r24, r25
    25b8:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    25ba:	18 ae       	std	Y+56, r1	; 0x38
    25bc:	19 ae       	std	Y+57, r1	; 0x39
    25be:	1a ae       	std	Y+58, r1	; 0x3a
    25c0:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    25c2:	1c aa       	std	Y+52, r1	; 0x34
    25c4:	1d aa       	std	Y+53, r1	; 0x35
    25c6:	1e aa       	std	Y+54, r1	; 0x36
    25c8:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    25ca:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    25cc:	1f a6       	std	Y+47, r1	; 0x2f
    25ce:	18 aa       	std	Y+48, r1	; 0x30
    25d0:	19 aa       	std	Y+49, r1	; 0x31
    25d2:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    25d4:	82 e3       	ldi	r24, 0x32	; 50
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	8b a7       	std	Y+43, r24	; 0x2b
    25de:	9c a7       	std	Y+44, r25	; 0x2c
    25e0:	ad a7       	std	Y+45, r26	; 0x2d
    25e2:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    25e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    25e6:	88 23       	and	r24, r24
    25e8:	0c f4       	brge	.+2      	; 0x25ec <SevSeg_voidMulBCD+0xa4>
    25ea:	ad c2       	rjmp	.+1370   	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>
    25ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    25ee:	8a 30       	cpi	r24, 0x0A	; 10
    25f0:	0c f0       	brlt	.+2      	; 0x25f4 <SevSeg_voidMulBCD+0xac>
    25f2:	a9 c2       	rjmp	.+1362   	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>
    25f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f6:	8a 30       	cpi	r24, 0x0A	; 10
    25f8:	0c f0       	brlt	.+2      	; 0x25fc <SevSeg_voidMulBCD+0xb4>
    25fa:	a5 c2       	rjmp	.+1354   	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>
    25fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    25fe:	88 23       	and	r24, r24
    2600:	0c f4       	brge	.+2      	; 0x2604 <SevSeg_voidMulBCD+0xbc>
    2602:	a1 c2       	rjmp	.+1346   	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    2604:	de 01       	movw	r26, r28
    2606:	af 5b       	subi	r26, 0xBF	; 191
    2608:	bf 4f       	sbci	r27, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	e0 5c       	subi	r30, 0xC0	; 192
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	90 81       	ld	r25, Z
    2612:	8c 91       	ld	r24, X
    2614:	98 17       	cp	r25, r24
    2616:	0c f0       	brlt	.+2      	; 0x261a <SevSeg_voidMulBCD+0xd2>
    2618:	98 c1       	rjmp	.+816    	; 0x294a <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    261a:	8f ad       	ldd	r24, Y+63	; 0x3f
    261c:	99 27       	eor	r25, r25
    261e:	87 fd       	sbrc	r24, 7
    2620:	90 95       	com	r25
    2622:	a9 2f       	mov	r26, r25
    2624:	b9 2f       	mov	r27, r25
    2626:	88 af       	std	Y+56, r24	; 0x38
    2628:	99 af       	std	Y+57, r25	; 0x39
    262a:	aa af       	std	Y+58, r26	; 0x3a
    262c:	bb af       	std	Y+59, r27	; 0x3b
    262e:	7b c1       	rjmp	.+758    	; 0x2926 <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2630:	8e ad       	ldd	r24, Y+62	; 0x3e
    2632:	99 27       	eor	r25, r25
    2634:	87 fd       	sbrc	r24, 7
    2636:	90 95       	com	r25
    2638:	a9 2f       	mov	r26, r25
    263a:	b9 2f       	mov	r27, r25
    263c:	8c ab       	std	Y+52, r24	; 0x34
    263e:	9d ab       	std	Y+53, r25	; 0x35
    2640:	ae ab       	std	Y+54, r26	; 0x36
    2642:	bf ab       	std	Y+55, r27	; 0x37
    2644:	5a c1       	rjmp	.+692    	; 0x28fa <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    2646:	1f a6       	std	Y+47, r1	; 0x2f
    2648:	18 aa       	std	Y+48, r1	; 0x30
    264a:	19 aa       	std	Y+49, r1	; 0x31
    264c:	1a aa       	std	Y+50, r1	; 0x32
    264e:	1b c1       	rjmp	.+566    	; 0x2886 <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    2650:	88 ad       	ldd	r24, Y+56	; 0x38
    2652:	99 ad       	ldd	r25, Y+57	; 0x39
    2654:	aa ad       	ldd	r26, Y+58	; 0x3a
    2656:	bb ad       	ldd	r27, Y+59	; 0x3b
    2658:	fc 01       	movw	r30, r24
    265a:	ec 57       	subi	r30, 0x7C	; 124
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	90 81       	ld	r25, Z
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	69 2f       	mov	r22, r25
    2664:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	66 e0       	ldi	r22, 0x06	; 6
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	65 e0       	ldi	r22, 0x05	; 5
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a0 e2       	ldi	r26, 0x20	; 32
    2682:	b1 e4       	ldi	r27, 0x41	; 65
    2684:	8f a3       	std	Y+39, r24	; 0x27
    2686:	98 a7       	std	Y+40, r25	; 0x28
    2688:	a9 a7       	std	Y+41, r26	; 0x29
    268a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268c:	6f a1       	ldd	r22, Y+39	; 0x27
    268e:	78 a5       	ldd	r23, Y+40	; 0x28
    2690:	89 a5       	ldd	r24, Y+41	; 0x29
    2692:	9a a5       	ldd	r25, Y+42	; 0x2a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	4a e7       	ldi	r20, 0x7A	; 122
    269a:	55 e4       	ldi	r21, 0x45	; 69
    269c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	8b a3       	std	Y+35, r24	; 0x23
    26a6:	9c a3       	std	Y+36, r25	; 0x24
    26a8:	ad a3       	std	Y+37, r26	; 0x25
    26aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26ac:	6b a1       	ldd	r22, Y+35	; 0x23
    26ae:	7c a1       	ldd	r23, Y+36	; 0x24
    26b0:	8d a1       	ldd	r24, Y+37	; 0x25
    26b2:	9e a1       	ldd	r25, Y+38	; 0x26
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	2c f4       	brge	.+10     	; 0x26ce <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9a a3       	std	Y+34, r25	; 0x22
    26ca:	89 a3       	std	Y+33, r24	; 0x21
    26cc:	3f c0       	rjmp	.+126    	; 0x274c <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    26ce:	6b a1       	ldd	r22, Y+35	; 0x23
    26d0:	7c a1       	ldd	r23, Y+36	; 0x24
    26d2:	8d a1       	ldd	r24, Y+37	; 0x25
    26d4:	9e a1       	ldd	r25, Y+38	; 0x26
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	4c f5       	brge	.+82     	; 0x2738 <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e6:	6f a1       	ldd	r22, Y+39	; 0x27
    26e8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ea:	89 a5       	ldd	r24, Y+41	; 0x29
    26ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e2       	ldi	r20, 0x20	; 32
    26f4:	51 e4       	ldi	r21, 0x41	; 65
    26f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9a a3       	std	Y+34, r25	; 0x22
    270c:	89 a3       	std	Y+33, r24	; 0x21
    270e:	0f c0       	rjmp	.+30     	; 0x272e <SevSeg_voidMulBCD+0x1e6>
    2710:	80 e9       	ldi	r24, 0x90	; 144
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	98 a3       	std	Y+32, r25	; 0x20
    2716:	8f 8f       	std	Y+31, r24	; 0x1f
    2718:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271a:	98 a1       	ldd	r25, Y+32	; 0x20
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <SevSeg_voidMulBCD+0x1d4>
    2720:	98 a3       	std	Y+32, r25	; 0x20
    2722:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2724:	89 a1       	ldd	r24, Y+33	; 0x21
    2726:	9a a1       	ldd	r25, Y+34	; 0x22
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	9a a3       	std	Y+34, r25	; 0x22
    272c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272e:	89 a1       	ldd	r24, Y+33	; 0x21
    2730:	9a a1       	ldd	r25, Y+34	; 0x22
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	69 f7       	brne	.-38     	; 0x2710 <SevSeg_voidMulBCD+0x1c8>
    2736:	14 c0       	rjmp	.+40     	; 0x2760 <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2738:	6b a1       	ldd	r22, Y+35	; 0x23
    273a:	7c a1       	ldd	r23, Y+36	; 0x24
    273c:	8d a1       	ldd	r24, Y+37	; 0x25
    273e:	9e a1       	ldd	r25, Y+38	; 0x26
    2740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9a a3       	std	Y+34, r25	; 0x22
    274a:	89 a3       	std	Y+33, r24	; 0x21
    274c:	89 a1       	ldd	r24, Y+33	; 0x21
    274e:	9a a1       	ldd	r25, Y+34	; 0x22
    2750:	9e 8f       	std	Y+30, r25	; 0x1e
    2752:	8d 8f       	std	Y+29, r24	; 0x1d
    2754:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2756:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <SevSeg_voidMulBCD+0x210>
    275c:	9e 8f       	std	Y+30, r25	; 0x1e
    275e:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    2760:	8c a9       	ldd	r24, Y+52	; 0x34
    2762:	9d a9       	ldd	r25, Y+53	; 0x35
    2764:	ae a9       	ldd	r26, Y+54	; 0x36
    2766:	bf a9       	ldd	r27, Y+55	; 0x37
    2768:	fc 01       	movw	r30, r24
    276a:	ec 57       	subi	r30, 0x7C	; 124
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	90 81       	ld	r25, Z
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	69 2f       	mov	r22, r25
    2774:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	66 e0       	ldi	r22, 0x06	; 6
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	65 e0       	ldi	r22, 0x05	; 5
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e2       	ldi	r26, 0x20	; 32
    2792:	b1 e4       	ldi	r27, 0x41	; 65
    2794:	89 8f       	std	Y+25, r24	; 0x19
    2796:	9a 8f       	std	Y+26, r25	; 0x1a
    2798:	ab 8f       	std	Y+27, r26	; 0x1b
    279a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279c:	69 8d       	ldd	r22, Y+25	; 0x19
    279e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4a e7       	ldi	r20, 0x7A	; 122
    27aa:	55 e4       	ldi	r21, 0x45	; 69
    27ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8d 8b       	std	Y+21, r24	; 0x15
    27b6:	9e 8b       	std	Y+22, r25	; 0x16
    27b8:	af 8b       	std	Y+23, r26	; 0x17
    27ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27bc:	6d 89       	ldd	r22, Y+21	; 0x15
    27be:	7e 89       	ldd	r23, Y+22	; 0x16
    27c0:	8f 89       	ldd	r24, Y+23	; 0x17
    27c2:	98 8d       	ldd	r25, Y+24	; 0x18
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e8       	ldi	r20, 0x80	; 128
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	2c f4       	brge	.+10     	; 0x27de <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9c 8b       	std	Y+20, r25	; 0x14
    27da:	8b 8b       	std	Y+19, r24	; 0x13
    27dc:	3f c0       	rjmp	.+126    	; 0x285c <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    27de:	6d 89       	ldd	r22, Y+21	; 0x15
    27e0:	7e 89       	ldd	r23, Y+22	; 0x16
    27e2:	8f 89       	ldd	r24, Y+23	; 0x17
    27e4:	98 8d       	ldd	r25, Y+24	; 0x18
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	3f ef       	ldi	r19, 0xFF	; 255
    27ea:	4f e7       	ldi	r20, 0x7F	; 127
    27ec:	57 e4       	ldi	r21, 0x47	; 71
    27ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27f2:	18 16       	cp	r1, r24
    27f4:	4c f5       	brge	.+82     	; 0x2848 <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f6:	69 8d       	ldd	r22, Y+25	; 0x19
    27f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e2       	ldi	r20, 0x20	; 32
    2804:	51 e4       	ldi	r21, 0x41	; 65
    2806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9c 8b       	std	Y+20, r25	; 0x14
    281c:	8b 8b       	std	Y+19, r24	; 0x13
    281e:	0f c0       	rjmp	.+30     	; 0x283e <SevSeg_voidMulBCD+0x2f6>
    2820:	80 e9       	ldi	r24, 0x90	; 144
    2822:	91 e0       	ldi	r25, 0x01	; 1
    2824:	9a 8b       	std	Y+18, r25	; 0x12
    2826:	89 8b       	std	Y+17, r24	; 0x11
    2828:	89 89       	ldd	r24, Y+17	; 0x11
    282a:	9a 89       	ldd	r25, Y+18	; 0x12
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <SevSeg_voidMulBCD+0x2e4>
    2830:	9a 8b       	std	Y+18, r25	; 0x12
    2832:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	8b 89       	ldd	r24, Y+19	; 0x13
    2836:	9c 89       	ldd	r25, Y+20	; 0x14
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9c 8b       	std	Y+20, r25	; 0x14
    283c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283e:	8b 89       	ldd	r24, Y+19	; 0x13
    2840:	9c 89       	ldd	r25, Y+20	; 0x14
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	69 f7       	brne	.-38     	; 0x2820 <SevSeg_voidMulBCD+0x2d8>
    2846:	14 c0       	rjmp	.+40     	; 0x2870 <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2848:	6d 89       	ldd	r22, Y+21	; 0x15
    284a:	7e 89       	ldd	r23, Y+22	; 0x16
    284c:	8f 89       	ldd	r24, Y+23	; 0x17
    284e:	98 8d       	ldd	r25, Y+24	; 0x18
    2850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9c 8b       	std	Y+20, r25	; 0x14
    285a:	8b 8b       	std	Y+19, r24	; 0x13
    285c:	8b 89       	ldd	r24, Y+19	; 0x13
    285e:	9c 89       	ldd	r25, Y+20	; 0x14
    2860:	98 8b       	std	Y+16, r25	; 0x10
    2862:	8f 87       	std	Y+15, r24	; 0x0f
    2864:	8f 85       	ldd	r24, Y+15	; 0x0f
    2866:	98 89       	ldd	r25, Y+16	; 0x10
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <SevSeg_voidMulBCD+0x320>
    286c:	98 8b       	std	Y+16, r25	; 0x10
    286e:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    2870:	8f a5       	ldd	r24, Y+47	; 0x2f
    2872:	98 a9       	ldd	r25, Y+48	; 0x30
    2874:	a9 a9       	ldd	r26, Y+49	; 0x31
    2876:	ba a9       	ldd	r27, Y+50	; 0x32
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	a1 1d       	adc	r26, r1
    287c:	b1 1d       	adc	r27, r1
    287e:	8f a7       	std	Y+47, r24	; 0x2f
    2880:	98 ab       	std	Y+48, r25	; 0x30
    2882:	a9 ab       	std	Y+49, r26	; 0x31
    2884:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    2886:	2f a5       	ldd	r18, Y+47	; 0x2f
    2888:	38 a9       	ldd	r19, Y+48	; 0x30
    288a:	49 a9       	ldd	r20, Y+49	; 0x31
    288c:	5a a9       	ldd	r21, Y+50	; 0x32
    288e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2890:	9c a5       	ldd	r25, Y+44	; 0x2c
    2892:	ad a5       	ldd	r26, Y+45	; 0x2d
    2894:	be a5       	ldd	r27, Y+46	; 0x2e
    2896:	28 17       	cp	r18, r24
    2898:	39 07       	cpc	r19, r25
    289a:	4a 07       	cpc	r20, r26
    289c:	5b 07       	cpc	r21, r27
    289e:	08 f4       	brcc	.+2      	; 0x28a2 <SevSeg_voidMulBCD+0x35a>
    28a0:	d7 ce       	rjmp	.-594    	; 0x2650 <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    28a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    28a4:	28 2f       	mov	r18, r24
    28a6:	33 27       	eor	r19, r19
    28a8:	27 fd       	sbrc	r18, 7
    28aa:	30 95       	com	r19
    28ac:	43 2f       	mov	r20, r19
    28ae:	53 2f       	mov	r21, r19
    28b0:	8c a9       	ldd	r24, Y+52	; 0x34
    28b2:	9d a9       	ldd	r25, Y+53	; 0x35
    28b4:	ae a9       	ldd	r26, Y+54	; 0x36
    28b6:	bf a9       	ldd	r27, Y+55	; 0x37
    28b8:	28 17       	cp	r18, r24
    28ba:	39 07       	cpc	r19, r25
    28bc:	4a 07       	cpc	r20, r26
    28be:	5b 07       	cpc	r21, r27
    28c0:	89 f4       	brne	.+34     	; 0x28e4 <SevSeg_voidMulBCD+0x39c>
    28c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c4:	28 2f       	mov	r18, r24
    28c6:	33 27       	eor	r19, r19
    28c8:	27 fd       	sbrc	r18, 7
    28ca:	30 95       	com	r19
    28cc:	43 2f       	mov	r20, r19
    28ce:	53 2f       	mov	r21, r19
    28d0:	88 ad       	ldd	r24, Y+56	; 0x38
    28d2:	99 ad       	ldd	r25, Y+57	; 0x39
    28d4:	aa ad       	ldd	r26, Y+58	; 0x3a
    28d6:	bb ad       	ldd	r27, Y+59	; 0x3b
    28d8:	28 17       	cp	r18, r24
    28da:	39 07       	cpc	r19, r25
    28dc:	4a 07       	cpc	r20, r26
    28de:	5b 07       	cpc	r21, r27
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <SevSeg_voidMulBCD+0x39c>
    28e2:	31 c1       	rjmp	.+610    	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    28e4:	8c a9       	ldd	r24, Y+52	; 0x34
    28e6:	9d a9       	ldd	r25, Y+53	; 0x35
    28e8:	ae a9       	ldd	r26, Y+54	; 0x36
    28ea:	bf a9       	ldd	r27, Y+55	; 0x37
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	a1 1d       	adc	r26, r1
    28f0:	b1 1d       	adc	r27, r1
    28f2:	8c ab       	std	Y+52, r24	; 0x34
    28f4:	9d ab       	std	Y+53, r25	; 0x35
    28f6:	ae ab       	std	Y+54, r26	; 0x36
    28f8:	bf ab       	std	Y+55, r27	; 0x37
    28fa:	8c a9       	ldd	r24, Y+52	; 0x34
    28fc:	9d a9       	ldd	r25, Y+53	; 0x35
    28fe:	ae a9       	ldd	r26, Y+54	; 0x36
    2900:	bf a9       	ldd	r27, Y+55	; 0x37
    2902:	8a 30       	cpi	r24, 0x0A	; 10
    2904:	91 05       	cpc	r25, r1
    2906:	a1 05       	cpc	r26, r1
    2908:	b1 05       	cpc	r27, r1
    290a:	0c f4       	brge	.+2      	; 0x290e <SevSeg_voidMulBCD+0x3c6>
    290c:	9c ce       	rjmp	.-712    	; 0x2646 <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    290e:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2910:	88 ad       	ldd	r24, Y+56	; 0x38
    2912:	99 ad       	ldd	r25, Y+57	; 0x39
    2914:	aa ad       	ldd	r26, Y+58	; 0x3a
    2916:	bb ad       	ldd	r27, Y+59	; 0x3b
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	a1 1d       	adc	r26, r1
    291c:	b1 1d       	adc	r27, r1
    291e:	88 af       	std	Y+56, r24	; 0x38
    2920:	99 af       	std	Y+57, r25	; 0x39
    2922:	aa af       	std	Y+58, r26	; 0x3a
    2924:	bb af       	std	Y+59, r27	; 0x3b
    2926:	8d ad       	ldd	r24, Y+61	; 0x3d
    2928:	28 2f       	mov	r18, r24
    292a:	33 27       	eor	r19, r19
    292c:	27 fd       	sbrc	r18, 7
    292e:	30 95       	com	r19
    2930:	43 2f       	mov	r20, r19
    2932:	53 2f       	mov	r21, r19
    2934:	88 ad       	ldd	r24, Y+56	; 0x38
    2936:	99 ad       	ldd	r25, Y+57	; 0x39
    2938:	aa ad       	ldd	r26, Y+58	; 0x3a
    293a:	bb ad       	ldd	r27, Y+59	; 0x3b
    293c:	28 17       	cp	r18, r24
    293e:	39 07       	cpc	r19, r25
    2940:	4a 07       	cpc	r20, r26
    2942:	5b 07       	cpc	r21, r27
    2944:	0c f0       	brlt	.+2      	; 0x2948 <SevSeg_voidMulBCD+0x400>
    2946:	74 ce       	rjmp	.-792    	; 0x2630 <SevSeg_voidMulBCD+0xe8>
    2948:	fe c0       	rjmp	.+508    	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    294a:	8f ad       	ldd	r24, Y+63	; 0x3f
    294c:	99 27       	eor	r25, r25
    294e:	87 fd       	sbrc	r24, 7
    2950:	90 95       	com	r25
    2952:	a9 2f       	mov	r26, r25
    2954:	b9 2f       	mov	r27, r25
    2956:	88 af       	std	Y+56, r24	; 0x38
    2958:	99 af       	std	Y+57, r25	; 0x39
    295a:	aa af       	std	Y+58, r26	; 0x3a
    295c:	bb af       	std	Y+59, r27	; 0x3b
    295e:	e2 c0       	rjmp	.+452    	; 0x2b24 <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    2960:	8b a9       	ldd	r24, Y+51	; 0x33
    2962:	8f 70       	andi	r24, 0x0F	; 15
    2964:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    2966:	88 ad       	ldd	r24, Y+56	; 0x38
    2968:	99 ad       	ldd	r25, Y+57	; 0x39
    296a:	aa ad       	ldd	r26, Y+58	; 0x3a
    296c:	bb ad       	ldd	r27, Y+59	; 0x3b
    296e:	88 0f       	add	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	aa 1f       	adc	r26, r26
    2974:	bb 1f       	adc	r27, r27
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	aa 1f       	adc	r26, r26
    297c:	bb 1f       	adc	r27, r27
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	aa 1f       	adc	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	aa 1f       	adc	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	98 2f       	mov	r25, r24
    2990:	8b a9       	ldd	r24, Y+51	; 0x33
    2992:	89 2b       	or	r24, r25
    2994:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2996:	8e ad       	ldd	r24, Y+62	; 0x3e
    2998:	99 27       	eor	r25, r25
    299a:	87 fd       	sbrc	r24, 7
    299c:	90 95       	com	r25
    299e:	a9 2f       	mov	r26, r25
    29a0:	b9 2f       	mov	r27, r25
    29a2:	8c ab       	std	Y+52, r24	; 0x34
    29a4:	9d ab       	std	Y+53, r25	; 0x35
    29a6:	ae ab       	std	Y+54, r26	; 0x36
    29a8:	bf ab       	std	Y+55, r27	; 0x37
    29aa:	a8 c0       	rjmp	.+336    	; 0x2afc <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    29ac:	8b a9       	ldd	r24, Y+51	; 0x33
    29ae:	80 7f       	andi	r24, 0xF0	; 240
    29b0:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    29b2:	9c a9       	ldd	r25, Y+52	; 0x34
    29b4:	8b a9       	ldd	r24, Y+51	; 0x33
    29b6:	89 2b       	or	r24, r25
    29b8:	8b ab       	std	Y+51, r24	; 0x33
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	a0 e2       	ldi	r26, 0x20	; 32
    29c0:	b1 e4       	ldi	r27, 0x41	; 65
    29c2:	8b 87       	std	Y+11, r24	; 0x0b
    29c4:	9c 87       	std	Y+12, r25	; 0x0c
    29c6:	ad 87       	std	Y+13, r26	; 0x0d
    29c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    29cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a e7       	ldi	r20, 0x7A	; 122
    29d8:	55 e4       	ldi	r21, 0x45	; 69
    29da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	8f 83       	std	Y+7, r24	; 0x07
    29e4:	98 87       	std	Y+8, r25	; 0x08
    29e6:	a9 87       	std	Y+9, r26	; 0x09
    29e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e8       	ldi	r20, 0x80	; 128
    29f8:	5f e3       	ldi	r21, 0x3F	; 63
    29fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29fe:	88 23       	and	r24, r24
    2a00:	2c f4       	brge	.+10     	; 0x2a0c <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	3f c0       	rjmp	.+126    	; 0x2a8a <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	3f ef       	ldi	r19, 0xFF	; 255
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	57 e4       	ldi	r21, 0x47	; 71
    2a1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	4c f5       	brge	.+82     	; 0x2a76 <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 e2       	ldi	r20, 0x20	; 32
    2a32:	51 e4       	ldi	r21, 0x41	; 65
    2a34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	0f c0       	rjmp	.+30     	; 0x2a6c <SevSeg_voidMulBCD+0x524>
    2a4e:	80 e9       	ldi	r24, 0x90	; 144
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	8b 83       	std	Y+3, r24	; 0x03
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <SevSeg_voidMulBCD+0x512>
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	69 f7       	brne	.-38     	; 0x2a4e <SevSeg_voidMulBCD+0x506>
    2a74:	14 c0       	rjmp	.+40     	; 0x2a9e <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a76:	6f 81       	ldd	r22, Y+7	; 0x07
    2a78:	78 85       	ldd	r23, Y+8	; 0x08
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <SevSeg_voidMulBCD+0x54e>
    2a9a:	9a 83       	std	Y+2, r25	; 0x02
    2a9c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	6b a9       	ldd	r22, Y+51	; 0x33
    2aa2:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2aa6:	8c ad       	ldd	r24, Y+60	; 0x3c
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	33 27       	eor	r19, r19
    2aac:	27 fd       	sbrc	r18, 7
    2aae:	30 95       	com	r19
    2ab0:	43 2f       	mov	r20, r19
    2ab2:	53 2f       	mov	r21, r19
    2ab4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ab6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ab8:	ae a9       	ldd	r26, Y+54	; 0x36
    2aba:	bf a9       	ldd	r27, Y+55	; 0x37
    2abc:	28 17       	cp	r18, r24
    2abe:	39 07       	cpc	r19, r25
    2ac0:	4a 07       	cpc	r20, r26
    2ac2:	5b 07       	cpc	r21, r27
    2ac4:	81 f4       	brne	.+32     	; 0x2ae6 <SevSeg_voidMulBCD+0x59e>
    2ac6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac8:	28 2f       	mov	r18, r24
    2aca:	33 27       	eor	r19, r19
    2acc:	27 fd       	sbrc	r18, 7
    2ace:	30 95       	com	r19
    2ad0:	43 2f       	mov	r20, r19
    2ad2:	53 2f       	mov	r21, r19
    2ad4:	88 ad       	ldd	r24, Y+56	; 0x38
    2ad6:	99 ad       	ldd	r25, Y+57	; 0x39
    2ad8:	aa ad       	ldd	r26, Y+58	; 0x3a
    2ada:	bb ad       	ldd	r27, Y+59	; 0x3b
    2adc:	28 17       	cp	r18, r24
    2ade:	39 07       	cpc	r19, r25
    2ae0:	4a 07       	cpc	r20, r26
    2ae2:	5b 07       	cpc	r21, r27
    2ae4:	81 f1       	breq	.+96     	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2ae6:	8c a9       	ldd	r24, Y+52	; 0x34
    2ae8:	9d a9       	ldd	r25, Y+53	; 0x35
    2aea:	ae a9       	ldd	r26, Y+54	; 0x36
    2aec:	bf a9       	ldd	r27, Y+55	; 0x37
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	a1 09       	sbc	r26, r1
    2af2:	b1 09       	sbc	r27, r1
    2af4:	8c ab       	std	Y+52, r24	; 0x34
    2af6:	9d ab       	std	Y+53, r25	; 0x35
    2af8:	ae ab       	std	Y+54, r26	; 0x36
    2afa:	bf ab       	std	Y+55, r27	; 0x37
    2afc:	8c a9       	ldd	r24, Y+52	; 0x34
    2afe:	9d a9       	ldd	r25, Y+53	; 0x35
    2b00:	ae a9       	ldd	r26, Y+54	; 0x36
    2b02:	bf a9       	ldd	r27, Y+55	; 0x37
    2b04:	bb 23       	and	r27, r27
    2b06:	0c f0       	brlt	.+2      	; 0x2b0a <SevSeg_voidMulBCD+0x5c2>
    2b08:	51 cf       	rjmp	.-350    	; 0x29ac <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    2b0a:	89 e0       	ldi	r24, 0x09	; 9
    2b0c:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2b0e:	88 ad       	ldd	r24, Y+56	; 0x38
    2b10:	99 ad       	ldd	r25, Y+57	; 0x39
    2b12:	aa ad       	ldd	r26, Y+58	; 0x3a
    2b14:	bb ad       	ldd	r27, Y+59	; 0x3b
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	a1 09       	sbc	r26, r1
    2b1a:	b1 09       	sbc	r27, r1
    2b1c:	88 af       	std	Y+56, r24	; 0x38
    2b1e:	99 af       	std	Y+57, r25	; 0x39
    2b20:	aa af       	std	Y+58, r26	; 0x3a
    2b22:	bb af       	std	Y+59, r27	; 0x3b
    2b24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b26:	28 2f       	mov	r18, r24
    2b28:	33 27       	eor	r19, r19
    2b2a:	27 fd       	sbrc	r18, 7
    2b2c:	30 95       	com	r19
    2b2e:	43 2f       	mov	r20, r19
    2b30:	53 2f       	mov	r21, r19
    2b32:	88 ad       	ldd	r24, Y+56	; 0x38
    2b34:	99 ad       	ldd	r25, Y+57	; 0x39
    2b36:	aa ad       	ldd	r26, Y+58	; 0x3a
    2b38:	bb ad       	ldd	r27, Y+59	; 0x3b
    2b3a:	82 17       	cp	r24, r18
    2b3c:	93 07       	cpc	r25, r19
    2b3e:	a4 07       	cpc	r26, r20
    2b40:	b5 07       	cpc	r27, r21
    2b42:	0c f0       	brlt	.+2      	; 0x2b46 <SevSeg_voidMulBCD+0x5fe>
    2b44:	0d cf       	rjmp	.-486    	; 0x2960 <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2b46:	cf 5b       	subi	r28, 0xBF	; 191
    2b48:	df 4f       	sbci	r29, 0xFF	; 255
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	cc 58       	subi	r28, 0x8C	; 140
    2b68:	d0 40       	sbci	r29, 0x00	; 0
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	fe 01       	movw	r30, r28
    2b76:	e7 57       	subi	r30, 0x77	; 119
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	ac e0       	ldi	r26, 0x0C	; 12
    2b80:	b2 e4       	ldi	r27, 0x42	; 66
    2b82:	80 83       	st	Z, r24
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	a2 83       	std	Z+2, r26	; 0x02
    2b88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	8e 01       	movw	r16, r28
    2b8c:	0b 57       	subi	r16, 0x7B	; 123
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	fe 01       	movw	r30, r28
    2b92:	e7 57       	subi	r30, 0x77	; 119
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	4a e7       	ldi	r20, 0x7A	; 122
    2ba4:	55 e4       	ldi	r21, 0x45	; 69
    2ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	f8 01       	movw	r30, r16
    2bb0:	80 83       	st	Z, r24
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	a2 83       	std	Z+2, r26	; 0x02
    2bb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bb8:	fe 01       	movw	r30, r28
    2bba:	eb 57       	subi	r30, 0x7B	; 123
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	44 f4       	brge	.+16     	; 0x2be6 <LCD_voidInit+0x8c>
		__ticks = 1;
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ed 57       	subi	r30, 0x7D	; 125
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
    2be4:	64 c0       	rjmp	.+200    	; 0x2cae <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2be6:	fe 01       	movw	r30, r28
    2be8:	eb 57       	subi	r30, 0x7B	; 123
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	3f ef       	ldi	r19, 0xFF	; 255
    2bf8:	4f e7       	ldi	r20, 0x7F	; 127
    2bfa:	57 e4       	ldi	r21, 0x47	; 71
    2bfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c00:	18 16       	cp	r1, r24
    2c02:	0c f0       	brlt	.+2      	; 0x2c06 <LCD_voidInit+0xac>
    2c04:	43 c0       	rjmp	.+134    	; 0x2c8c <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c06:	fe 01       	movw	r30, r28
    2c08:	e7 57       	subi	r30, 0x77	; 119
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	60 81       	ld	r22, Z
    2c0e:	71 81       	ldd	r23, Z+1	; 0x01
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e2       	ldi	r20, 0x20	; 32
    2c1a:	51 e4       	ldi	r21, 0x41	; 65
    2c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8e 01       	movw	r16, r28
    2c26:	0d 57       	subi	r16, 0x7D	; 125
    2c28:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	f8 01       	movw	r30, r16
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	80 83       	st	Z, r24
    2c3c:	1f c0       	rjmp	.+62     	; 0x2c7c <LCD_voidInit+0x122>
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ef 57       	subi	r30, 0x7F	; 127
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 e9       	ldi	r24, 0x90	; 144
    2c46:	91 e0       	ldi	r25, 0x01	; 1
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	80 83       	st	Z, r24
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ef 57       	subi	r30, 0x7F	; 127
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	91 81       	ldd	r25, Z+1	; 0x01
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_voidInit+0xfc>
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ef 57       	subi	r30, 0x7F	; 127
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c64:	de 01       	movw	r26, r28
    2c66:	ad 57       	subi	r26, 0x7D	; 125
    2c68:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	ed 57       	subi	r30, 0x7D	; 125
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	91 81       	ldd	r25, Z+1	; 0x01
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	11 96       	adiw	r26, 0x01	; 1
    2c78:	9c 93       	st	X, r25
    2c7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ed 57       	subi	r30, 0x7D	; 125
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	91 81       	ldd	r25, Z+1	; 0x01
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	d1 f6       	brne	.-76     	; 0x2c3e <LCD_voidInit+0xe4>
    2c8a:	27 c0       	rjmp	.+78     	; 0x2cda <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8c:	8e 01       	movw	r16, r28
    2c8e:	0d 57       	subi	r16, 0x7D	; 125
    2c90:	1f 4f       	sbci	r17, 0xFF	; 255
    2c92:	fe 01       	movw	r30, r28
    2c94:	eb 57       	subi	r30, 0x7B	; 123
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	f8 01       	movw	r30, r16
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24
    2cae:	de 01       	movw	r26, r28
    2cb0:	a1 58       	subi	r26, 0x81	; 129
    2cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ed 57       	subi	r30, 0x7D	; 125
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	91 81       	ldd	r25, Z+1	; 0x01
    2cbe:	8d 93       	st	X+, r24
    2cc0:	9c 93       	st	X, r25
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e1 58       	subi	r30, 0x81	; 129
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_voidInit+0x172>
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e1 58       	subi	r30, 0x81	; 129
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2cda:	80 e3       	ldi	r24, 0x30	; 48
    2cdc:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_voidSendInitCommand>
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e5 58       	subi	r30, 0x85	; 133
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	a0 ea       	ldi	r26, 0xA0	; 160
    2cec:	b0 e4       	ldi	r27, 0x40	; 64
    2cee:	80 83       	st	Z, r24
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	a2 83       	std	Z+2, r26	; 0x02
    2cf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf6:	8e 01       	movw	r16, r28
    2cf8:	09 58       	subi	r16, 0x89	; 137
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e5 58       	subi	r30, 0x85	; 133
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	60 81       	ld	r22, Z
    2d04:	71 81       	ldd	r23, Z+1	; 0x01
    2d06:	82 81       	ldd	r24, Z+2	; 0x02
    2d08:	93 81       	ldd	r25, Z+3	; 0x03
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	4a e7       	ldi	r20, 0x7A	; 122
    2d10:	55 e4       	ldi	r21, 0x45	; 69
    2d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	80 83       	st	Z, r24
    2d1e:	91 83       	std	Z+1, r25	; 0x01
    2d20:	a2 83       	std	Z+2, r26	; 0x02
    2d22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d24:	fe 01       	movw	r30, r28
    2d26:	e9 58       	subi	r30, 0x89	; 137
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e8       	ldi	r20, 0x80	; 128
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	44 f4       	brge	.+16     	; 0x2d52 <LCD_voidInit+0x1f8>
		__ticks = 1;
    2d42:	fe 01       	movw	r30, r28
    2d44:	eb 58       	subi	r30, 0x8B	; 139
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
    2d50:	64 c0       	rjmp	.+200    	; 0x2e1a <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    2d52:	fe 01       	movw	r30, r28
    2d54:	e9 58       	subi	r30, 0x89	; 137
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	3f ef       	ldi	r19, 0xFF	; 255
    2d64:	4f e7       	ldi	r20, 0x7F	; 127
    2d66:	57 e4       	ldi	r21, 0x47	; 71
    2d68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d6c:	18 16       	cp	r1, r24
    2d6e:	0c f0       	brlt	.+2      	; 0x2d72 <LCD_voidInit+0x218>
    2d70:	43 c0       	rjmp	.+134    	; 0x2df8 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	fe 01       	movw	r30, r28
    2d74:	e5 58       	subi	r30, 0x85	; 133
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e2       	ldi	r20, 0x20	; 32
    2d86:	51 e4       	ldi	r21, 0x41	; 65
    2d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8e 01       	movw	r16, r28
    2d92:	0b 58       	subi	r16, 0x8B	; 139
    2d94:	1f 4f       	sbci	r17, 0xFF	; 255
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	f8 01       	movw	r30, r16
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
    2da8:	1f c0       	rjmp	.+62     	; 0x2de8 <LCD_voidInit+0x28e>
    2daa:	fe 01       	movw	r30, r28
    2dac:	ed 58       	subi	r30, 0x8D	; 141
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	80 e9       	ldi	r24, 0x90	; 144
    2db2:	91 e0       	ldi	r25, 0x01	; 1
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	fe 01       	movw	r30, r28
    2dba:	ed 58       	subi	r30, 0x8D	; 141
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	f1 f7       	brne	.-4      	; 0x2dc2 <LCD_voidInit+0x268>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	ed 58       	subi	r30, 0x8D	; 141
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	de 01       	movw	r26, r28
    2dd2:	ab 58       	subi	r26, 0x8B	; 139
    2dd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	eb 58       	subi	r30, 0x8B	; 139
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	11 96       	adiw	r26, 0x01	; 1
    2de4:	9c 93       	st	X, r25
    2de6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	fe 01       	movw	r30, r28
    2dea:	eb 58       	subi	r30, 0x8B	; 139
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	91 81       	ldd	r25, Z+1	; 0x01
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	d1 f6       	brne	.-76     	; 0x2daa <LCD_voidInit+0x250>
    2df6:	27 c0       	rjmp	.+78     	; 0x2e46 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df8:	8e 01       	movw	r16, r28
    2dfa:	0b 58       	subi	r16, 0x8B	; 139
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e9 58       	subi	r30, 0x89	; 137
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	f8 01       	movw	r30, r16
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	80 83       	st	Z, r24
    2e1a:	de 01       	movw	r26, r28
    2e1c:	af 58       	subi	r26, 0x8F	; 143
    2e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e20:	fe 01       	movw	r30, r28
    2e22:	eb 58       	subi	r30, 0x8B	; 139
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	8d 93       	st	X+, r24
    2e2c:	9c 93       	st	X, r25
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ef 58       	subi	r30, 0x8F	; 143
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <LCD_voidInit+0x2de>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ef 58       	subi	r30, 0x8F	; 143
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2e46:	80 e3       	ldi	r24, 0x30	; 48
    2e48:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_voidSendInitCommand>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e3 59       	subi	r30, 0x93	; 147
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a0 e8       	ldi	r26, 0x80	; 128
    2e58:	bf e3       	ldi	r27, 0x3F	; 63
    2e5a:	80 83       	st	Z, r24
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	a2 83       	std	Z+2, r26	; 0x02
    2e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e62:	8e 01       	movw	r16, r28
    2e64:	07 59       	subi	r16, 0x97	; 151
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e3 59       	subi	r30, 0x93	; 147
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	4a e7       	ldi	r20, 0x7A	; 122
    2e7c:	55 e4       	ldi	r21, 0x45	; 69
    2e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	f8 01       	movw	r30, r16
    2e88:	80 83       	st	Z, r24
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	a2 83       	std	Z+2, r26	; 0x02
    2e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e90:	fe 01       	movw	r30, r28
    2e92:	e7 59       	subi	r30, 0x97	; 151
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 81       	ld	r22, Z
    2e98:	71 81       	ldd	r23, Z+1	; 0x01
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	93 81       	ldd	r25, Z+3	; 0x03
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	44 f4       	brge	.+16     	; 0x2ebe <LCD_voidInit+0x364>
		__ticks = 1;
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e9 59       	subi	r30, 0x99	; 153
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	80 83       	st	Z, r24
    2ebc:	64 c0       	rjmp	.+200    	; 0x2f86 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e7 59       	subi	r30, 0x97	; 151
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	0c f0       	brlt	.+2      	; 0x2ede <LCD_voidInit+0x384>
    2edc:	43 c0       	rjmp	.+134    	; 0x2f64 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e3 59       	subi	r30, 0x93	; 147
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8e 01       	movw	r16, r28
    2efe:	09 59       	subi	r16, 0x99	; 153
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	f8 01       	movw	r30, r16
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
    2f14:	1f c0       	rjmp	.+62     	; 0x2f54 <LCD_voidInit+0x3fa>
    2f16:	fe 01       	movw	r30, r28
    2f18:	eb 59       	subi	r30, 0x9B	; 155
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 e9       	ldi	r24, 0x90	; 144
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	fe 01       	movw	r30, r28
    2f26:	eb 59       	subi	r30, 0x9B	; 155
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 81       	ld	r24, Z
    2f2c:	91 81       	ldd	r25, Z+1	; 0x01
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <LCD_voidInit+0x3d4>
    2f32:	fe 01       	movw	r30, r28
    2f34:	eb 59       	subi	r30, 0x9B	; 155
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	de 01       	movw	r26, r28
    2f3e:	a9 59       	subi	r26, 0x99	; 153
    2f40:	bf 4f       	sbci	r27, 0xFF	; 255
    2f42:	fe 01       	movw	r30, r28
    2f44:	e9 59       	subi	r30, 0x99	; 153
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	11 96       	adiw	r26, 0x01	; 1
    2f50:	9c 93       	st	X, r25
    2f52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e9 59       	subi	r30, 0x99	; 153
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 81       	ld	r24, Z
    2f5c:	91 81       	ldd	r25, Z+1	; 0x01
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	d1 f6       	brne	.-76     	; 0x2f16 <LCD_voidInit+0x3bc>
    2f62:	27 c0       	rjmp	.+78     	; 0x2fb2 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f64:	8e 01       	movw	r16, r28
    2f66:	09 59       	subi	r16, 0x99	; 153
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e7 59       	subi	r30, 0x97	; 151
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	f8 01       	movw	r30, r16
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	de 01       	movw	r26, r28
    2f88:	ad 59       	subi	r26, 0x9D	; 157
    2f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e9 59       	subi	r30, 0x99	; 153
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	80 81       	ld	r24, Z
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	8d 93       	st	X+, r24
    2f98:	9c 93       	st	X, r25
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ed 59       	subi	r30, 0x9D	; 157
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <LCD_voidInit+0x44a>
    2fa8:	fe 01       	movw	r30, r28
    2faa:	ed 59       	subi	r30, 0x9D	; 157
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2fb2:	80 e3       	ldi	r24, 0x30	; 48
    2fb4:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_voidSendInitCommand>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e1 5a       	subi	r30, 0xA1	; 161
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a0 e8       	ldi	r26, 0x80	; 128
    2fc4:	bf e3       	ldi	r27, 0x3F	; 63
    2fc6:	80 83       	st	Z, r24
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	a2 83       	std	Z+2, r26	; 0x02
    2fcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	8e 01       	movw	r16, r28
    2fd0:	05 5a       	subi	r16, 0xA5	; 165
    2fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e1 5a       	subi	r30, 0xA1	; 161
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	4a e7       	ldi	r20, 0x7A	; 122
    2fe8:	55 e4       	ldi	r21, 0x45	; 69
    2fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	80 83       	st	Z, r24
    2ff6:	91 83       	std	Z+1, r25	; 0x01
    2ff8:	a2 83       	std	Z+2, r26	; 0x02
    2ffa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 5a       	subi	r30, 0xA5	; 165
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e8       	ldi	r20, 0x80	; 128
    3010:	5f e3       	ldi	r21, 0x3F	; 63
    3012:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3016:	88 23       	and	r24, r24
    3018:	44 f4       	brge	.+16     	; 0x302a <LCD_voidInit+0x4d0>
		__ticks = 1;
    301a:	fe 01       	movw	r30, r28
    301c:	e7 5a       	subi	r30, 0xA7	; 167
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	64 c0       	rjmp	.+200    	; 0x30f2 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    302a:	fe 01       	movw	r30, r28
    302c:	e5 5a       	subi	r30, 0xA5	; 165
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	3f ef       	ldi	r19, 0xFF	; 255
    303c:	4f e7       	ldi	r20, 0x7F	; 127
    303e:	57 e4       	ldi	r21, 0x47	; 71
    3040:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3044:	18 16       	cp	r1, r24
    3046:	0c f0       	brlt	.+2      	; 0x304a <LCD_voidInit+0x4f0>
    3048:	43 c0       	rjmp	.+134    	; 0x30d0 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304a:	fe 01       	movw	r30, r28
    304c:	e1 5a       	subi	r30, 0xA1	; 161
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8e 01       	movw	r16, r28
    306a:	07 5a       	subi	r16, 0xA7	; 167
    306c:	1f 4f       	sbci	r17, 0xFF	; 255
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	f8 01       	movw	r30, r16
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
    3080:	1f c0       	rjmp	.+62     	; 0x30c0 <LCD_voidInit+0x566>
    3082:	fe 01       	movw	r30, r28
    3084:	e9 5a       	subi	r30, 0xA9	; 169
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 e9       	ldi	r24, 0x90	; 144
    308a:	91 e0       	ldi	r25, 0x01	; 1
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
    3090:	fe 01       	movw	r30, r28
    3092:	e9 5a       	subi	r30, 0xA9	; 169
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <LCD_voidInit+0x540>
    309e:	fe 01       	movw	r30, r28
    30a0:	e9 5a       	subi	r30, 0xA9	; 169
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a8:	de 01       	movw	r26, r28
    30aa:	a7 5a       	subi	r26, 0xA7	; 167
    30ac:	bf 4f       	sbci	r27, 0xFF	; 255
    30ae:	fe 01       	movw	r30, r28
    30b0:	e7 5a       	subi	r30, 0xA7	; 167
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	11 96       	adiw	r26, 0x01	; 1
    30bc:	9c 93       	st	X, r25
    30be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	fe 01       	movw	r30, r28
    30c2:	e7 5a       	subi	r30, 0xA7	; 167
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	d1 f6       	brne	.-76     	; 0x3082 <LCD_voidInit+0x528>
    30ce:	27 c0       	rjmp	.+78     	; 0x311e <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d0:	8e 01       	movw	r16, r28
    30d2:	07 5a       	subi	r16, 0xA7	; 167
    30d4:	1f 4f       	sbci	r17, 0xFF	; 255
    30d6:	fe 01       	movw	r30, r28
    30d8:	e5 5a       	subi	r30, 0xA5	; 165
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	f8 01       	movw	r30, r16
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	80 83       	st	Z, r24
    30f2:	de 01       	movw	r26, r28
    30f4:	ab 5a       	subi	r26, 0xAB	; 171
    30f6:	bf 4f       	sbci	r27, 0xFF	; 255
    30f8:	fe 01       	movw	r30, r28
    30fa:	e7 5a       	subi	r30, 0xA7	; 167
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	8d 93       	st	X+, r24
    3104:	9c 93       	st	X, r25
    3106:	fe 01       	movw	r30, r28
    3108:	eb 5a       	subi	r30, 0xAB	; 171
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_voidInit+0x5b6>
    3114:	fe 01       	movw	r30, r28
    3116:	eb 5a       	subi	r30, 0xAB	; 171
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    311e:	80 e2       	ldi	r24, 0x20	; 32
    3120:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_voidSendInitCommand>
    3124:	fe 01       	movw	r30, r28
    3126:	ef 5a       	subi	r30, 0xAF	; 175
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	a0 e8       	ldi	r26, 0x80	; 128
    3130:	bf e3       	ldi	r27, 0x3F	; 63
    3132:	80 83       	st	Z, r24
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	a2 83       	std	Z+2, r26	; 0x02
    3138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	8e 01       	movw	r16, r28
    313c:	03 5b       	subi	r16, 0xB3	; 179
    313e:	1f 4f       	sbci	r17, 0xFF	; 255
    3140:	fe 01       	movw	r30, r28
    3142:	ef 5a       	subi	r30, 0xAF	; 175
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a e7       	ldi	r20, 0x7A	; 122
    3154:	55 e4       	ldi	r21, 0x45	; 69
    3156:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	80 83       	st	Z, r24
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	a2 83       	std	Z+2, r26	; 0x02
    3166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3168:	fe 01       	movw	r30, r28
    316a:	e3 5b       	subi	r30, 0xB3	; 179
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3182:	88 23       	and	r24, r24
    3184:	44 f4       	brge	.+16     	; 0x3196 <LCD_voidInit+0x63c>
		__ticks = 1;
    3186:	fe 01       	movw	r30, r28
    3188:	e5 5b       	subi	r30, 0xB5	; 181
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	64 c0       	rjmp	.+200    	; 0x325e <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    3196:	fe 01       	movw	r30, r28
    3198:	e3 5b       	subi	r30, 0xB3	; 179
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	3f ef       	ldi	r19, 0xFF	; 255
    31a8:	4f e7       	ldi	r20, 0x7F	; 127
    31aa:	57 e4       	ldi	r21, 0x47	; 71
    31ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31b0:	18 16       	cp	r1, r24
    31b2:	0c f0       	brlt	.+2      	; 0x31b6 <LCD_voidInit+0x65c>
    31b4:	43 c0       	rjmp	.+134    	; 0x323c <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	fe 01       	movw	r30, r28
    31b8:	ef 5a       	subi	r30, 0xAF	; 175
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e2       	ldi	r20, 0x20	; 32
    31ca:	51 e4       	ldi	r21, 0x41	; 65
    31cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8e 01       	movw	r16, r28
    31d6:	05 5b       	subi	r16, 0xB5	; 181
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	f8 01       	movw	r30, r16
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	80 83       	st	Z, r24
    31ec:	1f c0       	rjmp	.+62     	; 0x322c <LCD_voidInit+0x6d2>
    31ee:	fe 01       	movw	r30, r28
    31f0:	e7 5b       	subi	r30, 0xB7	; 183
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 e9       	ldi	r24, 0x90	; 144
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	fe 01       	movw	r30, r28
    31fe:	e7 5b       	subi	r30, 0xB7	; 183
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <LCD_voidInit+0x6ac>
    320a:	fe 01       	movw	r30, r28
    320c:	e7 5b       	subi	r30, 0xB7	; 183
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	de 01       	movw	r26, r28
    3216:	a5 5b       	subi	r26, 0xB5	; 181
    3218:	bf 4f       	sbci	r27, 0xFF	; 255
    321a:	fe 01       	movw	r30, r28
    321c:	e5 5b       	subi	r30, 0xB5	; 181
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	9c 93       	st	X, r25
    322a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322c:	fe 01       	movw	r30, r28
    322e:	e5 5b       	subi	r30, 0xB5	; 181
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	d1 f6       	brne	.-76     	; 0x31ee <LCD_voidInit+0x694>
    323a:	27 c0       	rjmp	.+78     	; 0x328a <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323c:	8e 01       	movw	r16, r28
    323e:	05 5b       	subi	r16, 0xB5	; 181
    3240:	1f 4f       	sbci	r17, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	e3 5b       	subi	r30, 0xB3	; 179
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
    325e:	de 01       	movw	r26, r28
    3260:	a9 5b       	subi	r26, 0xB9	; 185
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	fe 01       	movw	r30, r28
    3266:	e5 5b       	subi	r30, 0xB5	; 181
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	8d 93       	st	X+, r24
    3270:	9c 93       	st	X, r25
    3272:	fe 01       	movw	r30, r28
    3274:	e9 5b       	subi	r30, 0xB9	; 185
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <LCD_voidInit+0x722>
    3280:	fe 01       	movw	r30, r28
    3282:	e9 5b       	subi	r30, 0xB9	; 185
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	91 83       	std	Z+1, r25	; 0x01
    3288:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    328a:	88 e2       	ldi	r24, 0x28	; 40
    328c:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
    3290:	fe 01       	movw	r30, r28
    3292:	ed 5b       	subi	r30, 0xBD	; 189
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	a0 e8       	ldi	r26, 0x80	; 128
    329c:	bf e3       	ldi	r27, 0x3F	; 63
    329e:	80 83       	st	Z, r24
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	a2 83       	std	Z+2, r26	; 0x02
    32a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a6:	8e 01       	movw	r16, r28
    32a8:	01 5c       	subi	r16, 0xC1	; 193
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	ed 5b       	subi	r30, 0xBD	; 189
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	4a e7       	ldi	r20, 0x7A	; 122
    32c0:	55 e4       	ldi	r21, 0x45	; 69
    32c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	f8 01       	movw	r30, r16
    32cc:	80 83       	st	Z, r24
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	a2 83       	std	Z+2, r26	; 0x02
    32d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32d4:	fe 01       	movw	r30, r28
    32d6:	ff 96       	adiw	r30, 0x3f	; 63
    32d8:	60 81       	ld	r22, Z
    32da:	71 81       	ldd	r23, Z+1	; 0x01
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	93 81       	ldd	r25, Z+3	; 0x03
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	5f e3       	ldi	r21, 0x3F	; 63
    32e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	2c f4       	brge	.+10     	; 0x32fa <LCD_voidInit+0x7a0>
		__ticks = 1;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	9e af       	std	Y+62, r25	; 0x3e
    32f6:	8d af       	std	Y+61, r24	; 0x3d
    32f8:	46 c0       	rjmp	.+140    	; 0x3386 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    32fa:	fe 01       	movw	r30, r28
    32fc:	ff 96       	adiw	r30, 0x3f	; 63
    32fe:	60 81       	ld	r22, Z
    3300:	71 81       	ldd	r23, Z+1	; 0x01
    3302:	82 81       	ldd	r24, Z+2	; 0x02
    3304:	93 81       	ldd	r25, Z+3	; 0x03
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	3f ef       	ldi	r19, 0xFF	; 255
    330a:	4f e7       	ldi	r20, 0x7F	; 127
    330c:	57 e4       	ldi	r21, 0x47	; 71
    330e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3312:	18 16       	cp	r1, r24
    3314:	64 f5       	brge	.+88     	; 0x336e <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3316:	fe 01       	movw	r30, r28
    3318:	ed 5b       	subi	r30, 0xBD	; 189
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	60 81       	ld	r22, Z
    331e:	71 81       	ldd	r23, Z+1	; 0x01
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e2       	ldi	r20, 0x20	; 32
    332a:	51 e4       	ldi	r21, 0x41	; 65
    332c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9e af       	std	Y+62, r25	; 0x3e
    3342:	8d af       	std	Y+61, r24	; 0x3d
    3344:	0f c0       	rjmp	.+30     	; 0x3364 <LCD_voidInit+0x80a>
    3346:	80 e9       	ldi	r24, 0x90	; 144
    3348:	91 e0       	ldi	r25, 0x01	; 1
    334a:	9c af       	std	Y+60, r25	; 0x3c
    334c:	8b af       	std	Y+59, r24	; 0x3b
    334e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3350:	9c ad       	ldd	r25, Y+60	; 0x3c
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <LCD_voidInit+0x7f8>
    3356:	9c af       	std	Y+60, r25	; 0x3c
    3358:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335a:	8d ad       	ldd	r24, Y+61	; 0x3d
    335c:	9e ad       	ldd	r25, Y+62	; 0x3e
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	9e af       	std	Y+62, r25	; 0x3e
    3362:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3364:	8d ad       	ldd	r24, Y+61	; 0x3d
    3366:	9e ad       	ldd	r25, Y+62	; 0x3e
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	69 f7       	brne	.-38     	; 0x3346 <LCD_voidInit+0x7ec>
    336c:	16 c0       	rjmp	.+44     	; 0x339a <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336e:	fe 01       	movw	r30, r28
    3370:	ff 96       	adiw	r30, 0x3f	; 63
    3372:	60 81       	ld	r22, Z
    3374:	71 81       	ldd	r23, Z+1	; 0x01
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	93 81       	ldd	r25, Z+3	; 0x03
    337a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9e af       	std	Y+62, r25	; 0x3e
    3384:	8d af       	std	Y+61, r24	; 0x3d
    3386:	8d ad       	ldd	r24, Y+61	; 0x3d
    3388:	9e ad       	ldd	r25, Y+62	; 0x3e
    338a:	9a af       	std	Y+58, r25	; 0x3a
    338c:	89 af       	std	Y+57, r24	; 0x39
    338e:	89 ad       	ldd	r24, Y+57	; 0x39
    3390:	9a ad       	ldd	r25, Y+58	; 0x3a
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <LCD_voidInit+0x838>
    3396:	9a af       	std	Y+58, r25	; 0x3a
    3398:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    339a:	88 e0       	ldi	r24, 0x08	; 8
    339c:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	a0 e8       	ldi	r26, 0x80	; 128
    33a6:	bf e3       	ldi	r27, 0x3F	; 63
    33a8:	8d ab       	std	Y+53, r24	; 0x35
    33aa:	9e ab       	std	Y+54, r25	; 0x36
    33ac:	af ab       	std	Y+55, r26	; 0x37
    33ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b0:	6d a9       	ldd	r22, Y+53	; 0x35
    33b2:	7e a9       	ldd	r23, Y+54	; 0x36
    33b4:	8f a9       	ldd	r24, Y+55	; 0x37
    33b6:	98 ad       	ldd	r25, Y+56	; 0x38
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	4a e7       	ldi	r20, 0x7A	; 122
    33be:	55 e4       	ldi	r21, 0x45	; 69
    33c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	89 ab       	std	Y+49, r24	; 0x31
    33ca:	9a ab       	std	Y+50, r25	; 0x32
    33cc:	ab ab       	std	Y+51, r26	; 0x33
    33ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33d0:	69 a9       	ldd	r22, Y+49	; 0x31
    33d2:	7a a9       	ldd	r23, Y+50	; 0x32
    33d4:	8b a9       	ldd	r24, Y+51	; 0x33
    33d6:	9c a9       	ldd	r25, Y+52	; 0x34
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e8       	ldi	r20, 0x80	; 128
    33de:	5f e3       	ldi	r21, 0x3F	; 63
    33e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33e4:	88 23       	and	r24, r24
    33e6:	2c f4       	brge	.+10     	; 0x33f2 <LCD_voidInit+0x898>
		__ticks = 1;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	98 ab       	std	Y+48, r25	; 0x30
    33ee:	8f a7       	std	Y+47, r24	; 0x2f
    33f0:	3f c0       	rjmp	.+126    	; 0x3470 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    33f2:	69 a9       	ldd	r22, Y+49	; 0x31
    33f4:	7a a9       	ldd	r23, Y+50	; 0x32
    33f6:	8b a9       	ldd	r24, Y+51	; 0x33
    33f8:	9c a9       	ldd	r25, Y+52	; 0x34
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	3f ef       	ldi	r19, 0xFF	; 255
    33fe:	4f e7       	ldi	r20, 0x7F	; 127
    3400:	57 e4       	ldi	r21, 0x47	; 71
    3402:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3406:	18 16       	cp	r1, r24
    3408:	4c f5       	brge	.+82     	; 0x345c <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340a:	6d a9       	ldd	r22, Y+53	; 0x35
    340c:	7e a9       	ldd	r23, Y+54	; 0x36
    340e:	8f a9       	ldd	r24, Y+55	; 0x37
    3410:	98 ad       	ldd	r25, Y+56	; 0x38
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e2       	ldi	r20, 0x20	; 32
    3418:	51 e4       	ldi	r21, 0x41	; 65
    341a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	bc 01       	movw	r22, r24
    3424:	cd 01       	movw	r24, r26
    3426:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	98 ab       	std	Y+48, r25	; 0x30
    3430:	8f a7       	std	Y+47, r24	; 0x2f
    3432:	0f c0       	rjmp	.+30     	; 0x3452 <LCD_voidInit+0x8f8>
    3434:	80 e9       	ldi	r24, 0x90	; 144
    3436:	91 e0       	ldi	r25, 0x01	; 1
    3438:	9e a7       	std	Y+46, r25	; 0x2e
    343a:	8d a7       	std	Y+45, r24	; 0x2d
    343c:	8d a5       	ldd	r24, Y+45	; 0x2d
    343e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <LCD_voidInit+0x8e6>
    3444:	9e a7       	std	Y+46, r25	; 0x2e
    3446:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3448:	8f a5       	ldd	r24, Y+47	; 0x2f
    344a:	98 a9       	ldd	r25, Y+48	; 0x30
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	98 ab       	std	Y+48, r25	; 0x30
    3450:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3452:	8f a5       	ldd	r24, Y+47	; 0x2f
    3454:	98 a9       	ldd	r25, Y+48	; 0x30
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	69 f7       	brne	.-38     	; 0x3434 <LCD_voidInit+0x8da>
    345a:	14 c0       	rjmp	.+40     	; 0x3484 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	69 a9       	ldd	r22, Y+49	; 0x31
    345e:	7a a9       	ldd	r23, Y+50	; 0x32
    3460:	8b a9       	ldd	r24, Y+51	; 0x33
    3462:	9c a9       	ldd	r25, Y+52	; 0x34
    3464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	98 ab       	std	Y+48, r25	; 0x30
    346e:	8f a7       	std	Y+47, r24	; 0x2f
    3470:	8f a5       	ldd	r24, Y+47	; 0x2f
    3472:	98 a9       	ldd	r25, Y+48	; 0x30
    3474:	9c a7       	std	Y+44, r25	; 0x2c
    3476:	8b a7       	std	Y+43, r24	; 0x2b
    3478:	8b a5       	ldd	r24, Y+43	; 0x2b
    347a:	9c a5       	ldd	r25, Y+44	; 0x2c
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <LCD_voidInit+0x922>
    3480:	9c a7       	std	Y+44, r25	; 0x2c
    3482:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	a0 ea       	ldi	r26, 0xA0	; 160
    3490:	b0 e4       	ldi	r27, 0x40	; 64
    3492:	8f a3       	std	Y+39, r24	; 0x27
    3494:	98 a7       	std	Y+40, r25	; 0x28
    3496:	a9 a7       	std	Y+41, r26	; 0x29
    3498:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349a:	6f a1       	ldd	r22, Y+39	; 0x27
    349c:	78 a5       	ldd	r23, Y+40	; 0x28
    349e:	89 a5       	ldd	r24, Y+41	; 0x29
    34a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	4a e7       	ldi	r20, 0x7A	; 122
    34a8:	55 e4       	ldi	r21, 0x45	; 69
    34aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	8b a3       	std	Y+35, r24	; 0x23
    34b4:	9c a3       	std	Y+36, r25	; 0x24
    34b6:	ad a3       	std	Y+37, r26	; 0x25
    34b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34ba:	6b a1       	ldd	r22, Y+35	; 0x23
    34bc:	7c a1       	ldd	r23, Y+36	; 0x24
    34be:	8d a1       	ldd	r24, Y+37	; 0x25
    34c0:	9e a1       	ldd	r25, Y+38	; 0x26
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e8       	ldi	r20, 0x80	; 128
    34c8:	5f e3       	ldi	r21, 0x3F	; 63
    34ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34ce:	88 23       	and	r24, r24
    34d0:	2c f4       	brge	.+10     	; 0x34dc <LCD_voidInit+0x982>
		__ticks = 1;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	9a a3       	std	Y+34, r25	; 0x22
    34d8:	89 a3       	std	Y+33, r24	; 0x21
    34da:	3f c0       	rjmp	.+126    	; 0x355a <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    34dc:	6b a1       	ldd	r22, Y+35	; 0x23
    34de:	7c a1       	ldd	r23, Y+36	; 0x24
    34e0:	8d a1       	ldd	r24, Y+37	; 0x25
    34e2:	9e a1       	ldd	r25, Y+38	; 0x26
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	3f ef       	ldi	r19, 0xFF	; 255
    34e8:	4f e7       	ldi	r20, 0x7F	; 127
    34ea:	57 e4       	ldi	r21, 0x47	; 71
    34ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34f0:	18 16       	cp	r1, r24
    34f2:	4c f5       	brge	.+82     	; 0x3546 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f4:	6f a1       	ldd	r22, Y+39	; 0x27
    34f6:	78 a5       	ldd	r23, Y+40	; 0x28
    34f8:	89 a5       	ldd	r24, Y+41	; 0x29
    34fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e2       	ldi	r20, 0x20	; 32
    3502:	51 e4       	ldi	r21, 0x41	; 65
    3504:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	bc 01       	movw	r22, r24
    350e:	cd 01       	movw	r24, r26
    3510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9a a3       	std	Y+34, r25	; 0x22
    351a:	89 a3       	std	Y+33, r24	; 0x21
    351c:	0f c0       	rjmp	.+30     	; 0x353c <LCD_voidInit+0x9e2>
    351e:	80 e9       	ldi	r24, 0x90	; 144
    3520:	91 e0       	ldi	r25, 0x01	; 1
    3522:	98 a3       	std	Y+32, r25	; 0x20
    3524:	8f 8f       	std	Y+31, r24	; 0x1f
    3526:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3528:	98 a1       	ldd	r25, Y+32	; 0x20
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <LCD_voidInit+0x9d0>
    352e:	98 a3       	std	Y+32, r25	; 0x20
    3530:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3532:	89 a1       	ldd	r24, Y+33	; 0x21
    3534:	9a a1       	ldd	r25, Y+34	; 0x22
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	9a a3       	std	Y+34, r25	; 0x22
    353a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353c:	89 a1       	ldd	r24, Y+33	; 0x21
    353e:	9a a1       	ldd	r25, Y+34	; 0x22
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	69 f7       	brne	.-38     	; 0x351e <LCD_voidInit+0x9c4>
    3544:	14 c0       	rjmp	.+40     	; 0x356e <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3546:	6b a1       	ldd	r22, Y+35	; 0x23
    3548:	7c a1       	ldd	r23, Y+36	; 0x24
    354a:	8d a1       	ldd	r24, Y+37	; 0x25
    354c:	9e a1       	ldd	r25, Y+38	; 0x26
    354e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9a a3       	std	Y+34, r25	; 0x22
    3558:	89 a3       	std	Y+33, r24	; 0x21
    355a:	89 a1       	ldd	r24, Y+33	; 0x21
    355c:	9a a1       	ldd	r25, Y+34	; 0x22
    355e:	9e 8f       	std	Y+30, r25	; 0x1e
    3560:	8d 8f       	std	Y+29, r24	; 0x1d
    3562:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3564:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	f1 f7       	brne	.-4      	; 0x3566 <LCD_voidInit+0xa0c>
    356a:	9e 8f       	std	Y+30, r25	; 0x1e
    356c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    356e:	8c e0       	ldi	r24, 0x0C	; 12
    3570:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	a0 e8       	ldi	r26, 0x80	; 128
    357a:	bf e3       	ldi	r27, 0x3F	; 63
    357c:	89 8f       	std	Y+25, r24	; 0x19
    357e:	9a 8f       	std	Y+26, r25	; 0x1a
    3580:	ab 8f       	std	Y+27, r26	; 0x1b
    3582:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3584:	69 8d       	ldd	r22, Y+25	; 0x19
    3586:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	4a e7       	ldi	r20, 0x7A	; 122
    3592:	55 e4       	ldi	r21, 0x45	; 69
    3594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	8d 8b       	std	Y+21, r24	; 0x15
    359e:	9e 8b       	std	Y+22, r25	; 0x16
    35a0:	af 8b       	std	Y+23, r26	; 0x17
    35a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35a4:	6d 89       	ldd	r22, Y+21	; 0x15
    35a6:	7e 89       	ldd	r23, Y+22	; 0x16
    35a8:	8f 89       	ldd	r24, Y+23	; 0x17
    35aa:	98 8d       	ldd	r25, Y+24	; 0x18
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e8       	ldi	r20, 0x80	; 128
    35b2:	5f e3       	ldi	r21, 0x3F	; 63
    35b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35b8:	88 23       	and	r24, r24
    35ba:	2c f4       	brge	.+10     	; 0x35c6 <LCD_voidInit+0xa6c>
		__ticks = 1;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	9c 8b       	std	Y+20, r25	; 0x14
    35c2:	8b 8b       	std	Y+19, r24	; 0x13
    35c4:	3f c0       	rjmp	.+126    	; 0x3644 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    35c6:	6d 89       	ldd	r22, Y+21	; 0x15
    35c8:	7e 89       	ldd	r23, Y+22	; 0x16
    35ca:	8f 89       	ldd	r24, Y+23	; 0x17
    35cc:	98 8d       	ldd	r25, Y+24	; 0x18
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	3f ef       	ldi	r19, 0xFF	; 255
    35d2:	4f e7       	ldi	r20, 0x7F	; 127
    35d4:	57 e4       	ldi	r21, 0x47	; 71
    35d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35da:	18 16       	cp	r1, r24
    35dc:	4c f5       	brge	.+82     	; 0x3630 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35de:	69 8d       	ldd	r22, Y+25	; 0x19
    35e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9c 8b       	std	Y+20, r25	; 0x14
    3604:	8b 8b       	std	Y+19, r24	; 0x13
    3606:	0f c0       	rjmp	.+30     	; 0x3626 <LCD_voidInit+0xacc>
    3608:	80 e9       	ldi	r24, 0x90	; 144
    360a:	91 e0       	ldi	r25, 0x01	; 1
    360c:	9a 8b       	std	Y+18, r25	; 0x12
    360e:	89 8b       	std	Y+17, r24	; 0x11
    3610:	89 89       	ldd	r24, Y+17	; 0x11
    3612:	9a 89       	ldd	r25, Y+18	; 0x12
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <LCD_voidInit+0xaba>
    3618:	9a 8b       	std	Y+18, r25	; 0x12
    361a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361c:	8b 89       	ldd	r24, Y+19	; 0x13
    361e:	9c 89       	ldd	r25, Y+20	; 0x14
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	9c 8b       	std	Y+20, r25	; 0x14
    3624:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3626:	8b 89       	ldd	r24, Y+19	; 0x13
    3628:	9c 89       	ldd	r25, Y+20	; 0x14
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	69 f7       	brne	.-38     	; 0x3608 <LCD_voidInit+0xaae>
    362e:	14 c0       	rjmp	.+40     	; 0x3658 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3630:	6d 89       	ldd	r22, Y+21	; 0x15
    3632:	7e 89       	ldd	r23, Y+22	; 0x16
    3634:	8f 89       	ldd	r24, Y+23	; 0x17
    3636:	98 8d       	ldd	r25, Y+24	; 0x18
    3638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9c 8b       	std	Y+20, r25	; 0x14
    3642:	8b 8b       	std	Y+19, r24	; 0x13
    3644:	8b 89       	ldd	r24, Y+19	; 0x13
    3646:	9c 89       	ldd	r25, Y+20	; 0x14
    3648:	98 8b       	std	Y+16, r25	; 0x10
    364a:	8f 87       	std	Y+15, r24	; 0x0f
    364c:	8f 85       	ldd	r24, Y+15	; 0x0f
    364e:	98 89       	ldd	r25, Y+16	; 0x10
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	f1 f7       	brne	.-4      	; 0x3650 <LCD_voidInit+0xaf6>
    3654:	98 8b       	std	Y+16, r25	; 0x10
    3656:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    3658:	86 e0       	ldi	r24, 0x06	; 6
    365a:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	a0 e8       	ldi	r26, 0x80	; 128
    3664:	bf e3       	ldi	r27, 0x3F	; 63
    3666:	8b 87       	std	Y+11, r24	; 0x0b
    3668:	9c 87       	std	Y+12, r25	; 0x0c
    366a:	ad 87       	std	Y+13, r26	; 0x0d
    366c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3670:	7c 85       	ldd	r23, Y+12	; 0x0c
    3672:	8d 85       	ldd	r24, Y+13	; 0x0d
    3674:	9e 85       	ldd	r25, Y+14	; 0x0e
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	4a e7       	ldi	r20, 0x7A	; 122
    367c:	55 e4       	ldi	r21, 0x45	; 69
    367e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	8f 83       	std	Y+7, r24	; 0x07
    3688:	98 87       	std	Y+8, r25	; 0x08
    368a:	a9 87       	std	Y+9, r26	; 0x09
    368c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    368e:	6f 81       	ldd	r22, Y+7	; 0x07
    3690:	78 85       	ldd	r23, Y+8	; 0x08
    3692:	89 85       	ldd	r24, Y+9	; 0x09
    3694:	9a 85       	ldd	r25, Y+10	; 0x0a
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	5f e3       	ldi	r21, 0x3F	; 63
    369e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36a2:	88 23       	and	r24, r24
    36a4:	2c f4       	brge	.+10     	; 0x36b0 <LCD_voidInit+0xb56>
		__ticks = 1;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	9e 83       	std	Y+6, r25	; 0x06
    36ac:	8d 83       	std	Y+5, r24	; 0x05
    36ae:	3f c0       	rjmp	.+126    	; 0x372e <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    36b0:	6f 81       	ldd	r22, Y+7	; 0x07
    36b2:	78 85       	ldd	r23, Y+8	; 0x08
    36b4:	89 85       	ldd	r24, Y+9	; 0x09
    36b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	3f ef       	ldi	r19, 0xFF	; 255
    36bc:	4f e7       	ldi	r20, 0x7F	; 127
    36be:	57 e4       	ldi	r21, 0x47	; 71
    36c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    36c4:	18 16       	cp	r1, r24
    36c6:	4c f5       	brge	.+82     	; 0x371a <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    36cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	40 e2       	ldi	r20, 0x20	; 32
    36d6:	51 e4       	ldi	r21, 0x41	; 65
    36d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	bc 01       	movw	r22, r24
    36e2:	cd 01       	movw	r24, r26
    36e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	9e 83       	std	Y+6, r25	; 0x06
    36ee:	8d 83       	std	Y+5, r24	; 0x05
    36f0:	0f c0       	rjmp	.+30     	; 0x3710 <LCD_voidInit+0xbb6>
    36f2:	80 e9       	ldi	r24, 0x90	; 144
    36f4:	91 e0       	ldi	r25, 0x01	; 1
    36f6:	9c 83       	std	Y+4, r25	; 0x04
    36f8:	8b 83       	std	Y+3, r24	; 0x03
    36fa:	8b 81       	ldd	r24, Y+3	; 0x03
    36fc:	9c 81       	ldd	r25, Y+4	; 0x04
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	f1 f7       	brne	.-4      	; 0x36fe <LCD_voidInit+0xba4>
    3702:	9c 83       	std	Y+4, r25	; 0x04
    3704:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3706:	8d 81       	ldd	r24, Y+5	; 0x05
    3708:	9e 81       	ldd	r25, Y+6	; 0x06
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	9e 83       	std	Y+6, r25	; 0x06
    370e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3710:	8d 81       	ldd	r24, Y+5	; 0x05
    3712:	9e 81       	ldd	r25, Y+6	; 0x06
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	69 f7       	brne	.-38     	; 0x36f2 <LCD_voidInit+0xb98>
    3718:	14 c0       	rjmp	.+40     	; 0x3742 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	9e 83       	std	Y+6, r25	; 0x06
    372c:	8d 83       	std	Y+5, r24	; 0x05
    372e:	8d 81       	ldd	r24, Y+5	; 0x05
    3730:	9e 81       	ldd	r25, Y+6	; 0x06
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <LCD_voidInit+0xbe0>
    373e:	9a 83       	std	Y+2, r25	; 0x02
    3740:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3742:	c4 57       	subi	r28, 0x74	; 116
    3744:	df 4f       	sbci	r29, 0xFF	; 255
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	08 95       	ret

0000375a <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	2f 97       	sbiw	r28, 0x0f	; 15
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	63 e0       	ldi	r22, 0x03	; 3
    3774:	40 e0       	ldi	r20, 0x00	; 0
    3776:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	62 e0       	ldi	r22, 0x02	; 2
    377e:	41 e0       	ldi	r20, 0x01	; 1
    3780:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3784:	8f 85       	ldd	r24, Y+15	; 0x0f
    3786:	82 95       	swap	r24
    3788:	8f 70       	andi	r24, 0x0F	; 15
    378a:	98 2f       	mov	r25, r24
    378c:	91 70       	andi	r25, 0x01	; 1
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	49 2f       	mov	r20, r25
    3794:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    3798:	8f 85       	ldd	r24, Y+15	; 0x0f
    379a:	82 95       	swap	r24
    379c:	86 95       	lsr	r24
    379e:	87 70       	andi	r24, 0x07	; 7
    37a0:	98 2f       	mov	r25, r24
    37a2:	91 70       	andi	r25, 0x01	; 1
    37a4:	82 e0       	ldi	r24, 0x02	; 2
    37a6:	61 e0       	ldi	r22, 0x01	; 1
    37a8:	49 2f       	mov	r20, r25
    37aa:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    37ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    37b0:	82 95       	swap	r24
    37b2:	86 95       	lsr	r24
    37b4:	86 95       	lsr	r24
    37b6:	83 70       	andi	r24, 0x03	; 3
    37b8:	98 2f       	mov	r25, r24
    37ba:	91 70       	andi	r25, 0x01	; 1
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	62 e0       	ldi	r22, 0x02	; 2
    37c0:	49 2f       	mov	r20, r25
    37c2:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    37c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c8:	98 2f       	mov	r25, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	99 27       	eor	r25, r25
    37ce:	99 1f       	adc	r25, r25
    37d0:	82 e0       	ldi	r24, 0x02	; 2
    37d2:	64 e0       	ldi	r22, 0x04	; 4
    37d4:	49 2f       	mov	r20, r25
    37d6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	62 e0       	ldi	r22, 0x02	; 2
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	62 e0       	ldi	r22, 0x02	; 2
    37e8:	41 e0       	ldi	r20, 0x01	; 1
    37ea:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    37ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f0:	98 2f       	mov	r25, r24
    37f2:	91 70       	andi	r25, 0x01	; 1
    37f4:	82 e0       	ldi	r24, 0x02	; 2
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	49 2f       	mov	r20, r25
    37fa:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    37fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3800:	86 95       	lsr	r24
    3802:	98 2f       	mov	r25, r24
    3804:	91 70       	andi	r25, 0x01	; 1
    3806:	82 e0       	ldi	r24, 0x02	; 2
    3808:	61 e0       	ldi	r22, 0x01	; 1
    380a:	49 2f       	mov	r20, r25
    380c:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    3810:	8f 85       	ldd	r24, Y+15	; 0x0f
    3812:	86 95       	lsr	r24
    3814:	86 95       	lsr	r24
    3816:	98 2f       	mov	r25, r24
    3818:	91 70       	andi	r25, 0x01	; 1
    381a:	82 e0       	ldi	r24, 0x02	; 2
    381c:	62 e0       	ldi	r22, 0x02	; 2
    381e:	49 2f       	mov	r20, r25
    3820:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    3824:	8f 85       	ldd	r24, Y+15	; 0x0f
    3826:	86 95       	lsr	r24
    3828:	86 95       	lsr	r24
    382a:	86 95       	lsr	r24
    382c:	98 2f       	mov	r25, r24
    382e:	91 70       	andi	r25, 0x01	; 1
    3830:	82 e0       	ldi	r24, 0x02	; 2
    3832:	64 e0       	ldi	r22, 0x04	; 4
    3834:	49 2f       	mov	r20, r25
    3836:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	62 e0       	ldi	r22, 0x02	; 2
    383e:	40 e0       	ldi	r20, 0x00	; 0
    3840:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 ea       	ldi	r26, 0xA0	; 160
    384a:	b0 e4       	ldi	r27, 0x40	; 64
    384c:	8b 87       	std	Y+11, r24	; 0x0b
    384e:	9c 87       	std	Y+12, r25	; 0x0c
    3850:	ad 87       	std	Y+13, r26	; 0x0d
    3852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	6b 85       	ldd	r22, Y+11	; 0x0b
    3856:	7c 85       	ldd	r23, Y+12	; 0x0c
    3858:	8d 85       	ldd	r24, Y+13	; 0x0d
    385a:	9e 85       	ldd	r25, Y+14	; 0x0e
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a e7       	ldi	r20, 0x7A	; 122
    3862:	55 e4       	ldi	r21, 0x45	; 69
    3864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8f 83       	std	Y+7, r24	; 0x07
    386e:	98 87       	std	Y+8, r25	; 0x08
    3870:	a9 87       	std	Y+9, r26	; 0x09
    3872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3874:	6f 81       	ldd	r22, Y+7	; 0x07
    3876:	78 85       	ldd	r23, Y+8	; 0x08
    3878:	89 85       	ldd	r24, Y+9	; 0x09
    387a:	9a 85       	ldd	r25, Y+10	; 0x0a
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9e 83       	std	Y+6, r25	; 0x06
    3892:	8d 83       	std	Y+5, r24	; 0x05
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9e 83       	std	Y+6, r25	; 0x06
    38d4:	8d 83       	std	Y+5, r24	; 0x05
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <LCD_voidSendCommand+0x19c>
    38d8:	80 e9       	ldi	r24, 0x90	; 144
    38da:	91 e0       	ldi	r25, 0x01	; 1
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
    38e0:	8b 81       	ldd	r24, Y+3	; 0x03
    38e2:	9c 81       	ldd	r25, Y+4	; 0x04
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <LCD_voidSendCommand+0x18a>
    38e8:	9c 83       	std	Y+4, r25	; 0x04
    38ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	9e 81       	ldd	r25, Y+6	; 0x06
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	9e 81       	ldd	r25, Y+6	; 0x06
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <LCD_voidSendCommand+0x17e>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9e 83       	std	Y+6, r25	; 0x06
    3912:	8d 83       	std	Y+5, r24	; 0x05
    3914:	8d 81       	ldd	r24, Y+5	; 0x05
    3916:	9e 81       	ldd	r25, Y+6	; 0x06
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <LCD_voidSendCommand+0x1c6>
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3928:	2f 96       	adiw	r28, 0x0f	; 15
    392a:	0f b6       	in	r0, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	08 95       	ret

0000393a <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	2f 97       	sbiw	r28, 0x0f	; 15
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	63 e0       	ldi	r22, 0x03	; 3
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	62 e0       	ldi	r22, 0x02	; 2
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3964:	8f 85       	ldd	r24, Y+15	; 0x0f
    3966:	82 95       	swap	r24
    3968:	8f 70       	andi	r24, 0x0F	; 15
    396a:	98 2f       	mov	r25, r24
    396c:	91 70       	andi	r25, 0x01	; 1
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	60 e0       	ldi	r22, 0x00	; 0
    3972:	49 2f       	mov	r20, r25
    3974:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    3978:	8f 85       	ldd	r24, Y+15	; 0x0f
    397a:	82 95       	swap	r24
    397c:	86 95       	lsr	r24
    397e:	87 70       	andi	r24, 0x07	; 7
    3980:	98 2f       	mov	r25, r24
    3982:	91 70       	andi	r25, 0x01	; 1
    3984:	82 e0       	ldi	r24, 0x02	; 2
    3986:	61 e0       	ldi	r22, 0x01	; 1
    3988:	49 2f       	mov	r20, r25
    398a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    398e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3990:	82 95       	swap	r24
    3992:	86 95       	lsr	r24
    3994:	86 95       	lsr	r24
    3996:	83 70       	andi	r24, 0x03	; 3
    3998:	98 2f       	mov	r25, r24
    399a:	91 70       	andi	r25, 0x01	; 1
    399c:	82 e0       	ldi	r24, 0x02	; 2
    399e:	62 e0       	ldi	r22, 0x02	; 2
    39a0:	49 2f       	mov	r20, r25
    39a2:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    39a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a8:	98 2f       	mov	r25, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	99 27       	eor	r25, r25
    39ae:	99 1f       	adc	r25, r25
    39b0:	82 e0       	ldi	r24, 0x02	; 2
    39b2:	64 e0       	ldi	r22, 0x04	; 4
    39b4:	49 2f       	mov	r20, r25
    39b6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	62 e0       	ldi	r22, 0x02	; 2
    39be:	40 e0       	ldi	r20, 0x00	; 0
    39c0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a0 ea       	ldi	r26, 0xA0	; 160
    39ca:	b0 e4       	ldi	r27, 0x40	; 64
    39cc:	8b 87       	std	Y+11, r24	; 0x0b
    39ce:	9c 87       	std	Y+12, r25	; 0x0c
    39d0:	ad 87       	std	Y+13, r26	; 0x0d
    39d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39da:	9e 85       	ldd	r25, Y+14	; 0x0e
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a e7       	ldi	r20, 0x7A	; 122
    39e2:	55 e4       	ldi	r21, 0x45	; 69
    39e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	8f 83       	std	Y+7, r24	; 0x07
    39ee:	98 87       	std	Y+8, r25	; 0x08
    39f0:	a9 87       	std	Y+9, r26	; 0x09
    39f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	3f c0       	rjmp	.+126    	; 0x3a94 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    3a16:	6f 81       	ldd	r22, Y+7	; 0x07
    3a18:	78 85       	ldd	r23, Y+8	; 0x08
    3a1a:	89 85       	ldd	r24, Y+9	; 0x09
    3a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	3f ef       	ldi	r19, 0xFF	; 255
    3a22:	4f e7       	ldi	r20, 0x7F	; 127
    3a24:	57 e4       	ldi	r21, 0x47	; 71
    3a26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a2a:	18 16       	cp	r1, r24
    3a2c:	4c f5       	brge	.+82     	; 0x3a80 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9e 83       	std	Y+6, r25	; 0x06
    3a54:	8d 83       	std	Y+5, r24	; 0x05
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <LCD_voidSendInitCommand+0x13c>
    3a58:	80 e9       	ldi	r24, 0x90	; 144
    3a5a:	91 e0       	ldi	r25, 0x01	; 1
    3a5c:	9c 83       	std	Y+4, r25	; 0x04
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <LCD_voidSendInitCommand+0x12a>
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <LCD_voidSendInitCommand+0x11e>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	6f 81       	ldd	r22, Y+7	; 0x07
    3a82:	78 85       	ldd	r23, Y+8	; 0x08
    3a84:	89 85       	ldd	r24, Y+9	; 0x09
    3a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	8d 83       	std	Y+5, r24	; 0x05
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	9a 83       	std	Y+2, r25	; 0x02
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <LCD_voidSendInitCommand+0x166>
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    3aa8:	2f 96       	adiw	r28, 0x0f	; 15
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61
    3ab4:	cf 91       	pop	r28
    3ab6:	df 91       	pop	r29
    3ab8:	08 95       	ret

00003aba <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	2f 97       	sbiw	r28, 0x0f	; 15
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	de bf       	out	0x3e, r29	; 62
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 0
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	63 e0       	ldi	r22, 0x03	; 3
    3ad4:	41 e0       	ldi	r20, 0x01	; 1
    3ad6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	62 e0       	ldi	r22, 0x02	; 2
    3ade:	41 e0       	ldi	r20, 0x01	; 1
    3ae0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    3ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae6:	82 95       	swap	r24
    3ae8:	8f 70       	andi	r24, 0x0F	; 15
    3aea:	98 2f       	mov	r25, r24
    3aec:	91 70       	andi	r25, 0x01	; 1
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	49 2f       	mov	r20, r25
    3af4:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    3af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3afa:	82 95       	swap	r24
    3afc:	86 95       	lsr	r24
    3afe:	87 70       	andi	r24, 0x07	; 7
    3b00:	98 2f       	mov	r25, r24
    3b02:	91 70       	andi	r25, 0x01	; 1
    3b04:	82 e0       	ldi	r24, 0x02	; 2
    3b06:	61 e0       	ldi	r22, 0x01	; 1
    3b08:	49 2f       	mov	r20, r25
    3b0a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    3b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b10:	82 95       	swap	r24
    3b12:	86 95       	lsr	r24
    3b14:	86 95       	lsr	r24
    3b16:	83 70       	andi	r24, 0x03	; 3
    3b18:	98 2f       	mov	r25, r24
    3b1a:	91 70       	andi	r25, 0x01	; 1
    3b1c:	82 e0       	ldi	r24, 0x02	; 2
    3b1e:	62 e0       	ldi	r22, 0x02	; 2
    3b20:	49 2f       	mov	r20, r25
    3b22:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    3b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b28:	98 2f       	mov	r25, r24
    3b2a:	99 1f       	adc	r25, r25
    3b2c:	99 27       	eor	r25, r25
    3b2e:	99 1f       	adc	r25, r25
    3b30:	82 e0       	ldi	r24, 0x02	; 2
    3b32:	64 e0       	ldi	r22, 0x04	; 4
    3b34:	49 2f       	mov	r20, r25
    3b36:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	62 e0       	ldi	r22, 0x02	; 2
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	62 e0       	ldi	r22, 0x02	; 2
    3b48:	41 e0       	ldi	r20, 0x01	; 1
    3b4a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    3b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b50:	98 2f       	mov	r25, r24
    3b52:	91 70       	andi	r25, 0x01	; 1
    3b54:	82 e0       	ldi	r24, 0x02	; 2
    3b56:	60 e0       	ldi	r22, 0x00	; 0
    3b58:	49 2f       	mov	r20, r25
    3b5a:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    3b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b60:	86 95       	lsr	r24
    3b62:	98 2f       	mov	r25, r24
    3b64:	91 70       	andi	r25, 0x01	; 1
    3b66:	82 e0       	ldi	r24, 0x02	; 2
    3b68:	61 e0       	ldi	r22, 0x01	; 1
    3b6a:	49 2f       	mov	r20, r25
    3b6c:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    3b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b72:	86 95       	lsr	r24
    3b74:	86 95       	lsr	r24
    3b76:	98 2f       	mov	r25, r24
    3b78:	91 70       	andi	r25, 0x01	; 1
    3b7a:	82 e0       	ldi	r24, 0x02	; 2
    3b7c:	62 e0       	ldi	r22, 0x02	; 2
    3b7e:	49 2f       	mov	r20, r25
    3b80:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    3b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b86:	86 95       	lsr	r24
    3b88:	86 95       	lsr	r24
    3b8a:	86 95       	lsr	r24
    3b8c:	98 2f       	mov	r25, r24
    3b8e:	91 70       	andi	r25, 0x01	; 1
    3b90:	82 e0       	ldi	r24, 0x02	; 2
    3b92:	64 e0       	ldi	r22, 0x04	; 4
    3b94:	49 2f       	mov	r20, r25
    3b96:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	62 e0       	ldi	r22, 0x02	; 2
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	a0 ea       	ldi	r26, 0xA0	; 160
    3baa:	b0 e4       	ldi	r27, 0x40	; 64
    3bac:	8b 87       	std	Y+11, r24	; 0x0b
    3bae:	9c 87       	std	Y+12, r25	; 0x0c
    3bb0:	ad 87       	std	Y+13, r26	; 0x0d
    3bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	4a e7       	ldi	r20, 0x7A	; 122
    3bc2:	55 e4       	ldi	r21, 0x45	; 69
    3bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	8f 83       	std	Y+7, r24	; 0x07
    3bce:	98 87       	std	Y+8, r25	; 0x08
    3bd0:	a9 87       	std	Y+9, r26	; 0x09
    3bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd6:	78 85       	ldd	r23, Y+8	; 0x08
    3bd8:	89 85       	ldd	r24, Y+9	; 0x09
    3bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e8       	ldi	r20, 0x80	; 128
    3be2:	5f e3       	ldi	r21, 0x3F	; 63
    3be4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3be8:	88 23       	and	r24, r24
    3bea:	2c f4       	brge	.+10     	; 0x3bf6 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9e 83       	std	Y+6, r25	; 0x06
    3bf2:	8d 83       	std	Y+5, r24	; 0x05
    3bf4:	3f c0       	rjmp	.+126    	; 0x3c74 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    3bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf8:	78 85       	ldd	r23, Y+8	; 0x08
    3bfa:	89 85       	ldd	r24, Y+9	; 0x09
    3bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	3f ef       	ldi	r19, 0xFF	; 255
    3c02:	4f e7       	ldi	r20, 0x7F	; 127
    3c04:	57 e4       	ldi	r21, 0x47	; 71
    3c06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c0a:	18 16       	cp	r1, r24
    3c0c:	4c f5       	brge	.+82     	; 0x3c60 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e2       	ldi	r20, 0x20	; 32
    3c1c:	51 e4       	ldi	r21, 0x41	; 65
    3c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	bc 01       	movw	r22, r24
    3c28:	cd 01       	movw	r24, r26
    3c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	0f c0       	rjmp	.+30     	; 0x3c56 <LCD_voidWriteChar+0x19c>
    3c38:	80 e9       	ldi	r24, 0x90	; 144
    3c3a:	91 e0       	ldi	r25, 0x01	; 1
    3c3c:	9c 83       	std	Y+4, r25	; 0x04
    3c3e:	8b 83       	std	Y+3, r24	; 0x03
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	9c 81       	ldd	r25, Y+4	; 0x04
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <LCD_voidWriteChar+0x18a>
    3c48:	9c 83       	std	Y+4, r25	; 0x04
    3c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	9e 83       	std	Y+6, r25	; 0x06
    3c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
    3c58:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	69 f7       	brne	.-38     	; 0x3c38 <LCD_voidWriteChar+0x17e>
    3c5e:	14 c0       	rjmp	.+40     	; 0x3c88 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c60:	6f 81       	ldd	r22, Y+7	; 0x07
    3c62:	78 85       	ldd	r23, Y+8	; 0x08
    3c64:	89 85       	ldd	r24, Y+9	; 0x09
    3c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	9e 83       	std	Y+6, r25	; 0x06
    3c72:	8d 83       	std	Y+5, r24	; 0x05
    3c74:	8d 81       	ldd	r24, Y+5	; 0x05
    3c76:	9e 81       	ldd	r25, Y+6	; 0x06
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	f1 f7       	brne	.-4      	; 0x3c80 <LCD_voidWriteChar+0x1c6>
    3c84:	9a 83       	std	Y+2, r25	; 0x02
    3c86:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3c88:	2f 96       	adiw	r28, 0x0f	; 15
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	f8 94       	cli
    3c8e:	de bf       	out	0x3e, r29	; 62
    3c90:	0f be       	out	0x3f, r0	; 63
    3c92:	cd bf       	out	0x3d, r28	; 61
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <LCD_voidWriteString+0x6>
    3ca0:	0f 92       	push	r0
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	9b 83       	std	Y+3, r25	; 0x03
    3ca8:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    3caa:	19 82       	std	Y+1, r1	; 0x01
    3cac:	0e c0       	rjmp	.+28     	; 0x3cca <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	28 2f       	mov	r18, r24
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb8:	fc 01       	movw	r30, r24
    3cba:	e2 0f       	add	r30, r18
    3cbc:	f3 1f       	adc	r31, r19
    3cbe:	80 81       	ld	r24, Z
    3cc0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
		index++;
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	8f 5f       	subi	r24, 0xFF	; 255
    3cc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	28 2f       	mov	r18, r24
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	e2 0f       	add	r30, r18
    3cd8:	f3 1f       	adc	r31, r19
    3cda:	80 81       	ld	r24, Z
    3cdc:	88 23       	and	r24, r24
    3cde:	39 f7       	brne	.-50     	; 0x3cae <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	cf 91       	pop	r28
    3ce8:	df 91       	pop	r29
    3cea:	08 95       	ret

00003cec <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	2e 97       	sbiw	r28, 0x0e	; 14
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	f8 94       	cli
    3cfe:	de bf       	out	0x3e, r29	; 62
    3d00:	0f be       	out	0x3f, r0	; 63
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	69 87       	std	Y+9, r22	; 0x09
    3d06:	7a 87       	std	Y+10, r23	; 0x0a
    3d08:	8b 87       	std	Y+11, r24	; 0x0b
    3d0a:	9c 87       	std	Y+12, r25	; 0x0c
    3d0c:	5e 87       	std	Y+14, r21	; 0x0e
    3d0e:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    3d10:	1d 82       	std	Y+5, r1	; 0x05
    3d12:	1e 82       	std	Y+6, r1	; 0x06
    3d14:	1f 82       	std	Y+7, r1	; 0x07
    3d16:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    3d18:	83 e1       	ldi	r24, 0x13	; 19
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	a0 e0       	ldi	r26, 0x00	; 0
    3d1e:	b0 e0       	ldi	r27, 0x00	; 0
    3d20:	89 83       	std	Y+1, r24	; 0x01
    3d22:	9a 83       	std	Y+2, r25	; 0x02
    3d24:	ab 83       	std	Y+3, r26	; 0x03
    3d26:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    3d28:	29 81       	ldd	r18, Y+1	; 0x01
    3d2a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d30:	fc 01       	movw	r30, r24
    3d32:	e2 0f       	add	r30, r18
    3d34:	f3 1f       	adc	r31, r19
    3d36:	10 82       	st	Z, r1
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	a1 09       	sbc	r26, r1
    3d44:	b1 09       	sbc	r27, r1
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	9a 83       	std	Y+2, r25	; 0x02
    3d4a:	ab 83       	std	Y+3, r26	; 0x03
    3d4c:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    3d4e:	89 85       	ldd	r24, Y+9	; 0x09
    3d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d52:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d54:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d56:	bb 23       	and	r27, r27
    3d58:	0c f0       	brlt	.+2      	; 0x3d5c <IntToString+0x70>
    3d5a:	4d c0       	rjmp	.+154    	; 0x3df6 <IntToString+0x10a>
		flag = 1;
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	a0 e0       	ldi	r26, 0x00	; 0
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	8d 83       	std	Y+5, r24	; 0x05
    3d66:	9e 83       	std	Y+6, r25	; 0x06
    3d68:	af 83       	std	Y+7, r26	; 0x07
    3d6a:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    3d6c:	89 85       	ldd	r24, Y+9	; 0x09
    3d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d70:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d72:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d74:	b0 95       	com	r27
    3d76:	a0 95       	com	r26
    3d78:	90 95       	com	r25
    3d7a:	81 95       	neg	r24
    3d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7e:	af 4f       	sbci	r26, 0xFF	; 255
    3d80:	bf 4f       	sbci	r27, 0xFF	; 255
    3d82:	89 87       	std	Y+9, r24	; 0x09
    3d84:	9a 87       	std	Y+10, r25	; 0x0a
    3d86:	ab 87       	std	Y+11, r26	; 0x0b
    3d88:	bc 87       	std	Y+12, r27	; 0x0c
    3d8a:	35 c0       	rjmp	.+106    	; 0x3df6 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    3d8c:	29 81       	ldd	r18, Y+1	; 0x01
    3d8e:	3a 81       	ldd	r19, Y+2	; 0x02
    3d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d94:	8c 01       	movw	r16, r24
    3d96:	02 0f       	add	r16, r18
    3d98:	13 1f       	adc	r17, r19
    3d9a:	89 85       	ldd	r24, Y+9	; 0x09
    3d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3da0:	bc 85       	ldd	r27, Y+12	; 0x0c
    3da2:	2a e0       	ldi	r18, 0x0A	; 10
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	50 e0       	ldi	r21, 0x00	; 0
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	0e 94 77 28 	call	0x50ee	; 0x50ee <__divmodsi4>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	80 5d       	subi	r24, 0xD0	; 208
    3db8:	f8 01       	movw	r30, r16
    3dba:	80 83       	st	Z, r24
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc0:	ab 81       	ldd	r26, Y+3	; 0x03
    3dc2:	bc 81       	ldd	r27, Y+4	; 0x04
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	a1 09       	sbc	r26, r1
    3dc8:	b1 09       	sbc	r27, r1
    3dca:	89 83       	std	Y+1, r24	; 0x01
    3dcc:	9a 83       	std	Y+2, r25	; 0x02
    3dce:	ab 83       	std	Y+3, r26	; 0x03
    3dd0:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    3dd2:	89 85       	ldd	r24, Y+9	; 0x09
    3dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd6:	ab 85       	ldd	r26, Y+11	; 0x0b
    3dd8:	bc 85       	ldd	r27, Y+12	; 0x0c
    3dda:	2a e0       	ldi	r18, 0x0A	; 10
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e0       	ldi	r20, 0x00	; 0
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	bc 01       	movw	r22, r24
    3de4:	cd 01       	movw	r24, r26
    3de6:	0e 94 77 28 	call	0x50ee	; 0x50ee <__divmodsi4>
    3dea:	da 01       	movw	r26, r20
    3dec:	c9 01       	movw	r24, r18
    3dee:	89 87       	std	Y+9, r24	; 0x09
    3df0:	9a 87       	std	Y+10, r25	; 0x0a
    3df2:	ab 87       	std	Y+11, r26	; 0x0b
    3df4:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	ab 85       	ldd	r26, Y+11	; 0x0b
    3dfc:	bc 85       	ldd	r27, Y+12	; 0x0c
    3dfe:	00 97       	sbiw	r24, 0x00	; 0
    3e00:	a1 05       	cpc	r26, r1
    3e02:	b1 05       	cpc	r27, r1
    3e04:	19 f6       	brne	.-122    	; 0x3d8c <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    3e06:	8d 81       	ldd	r24, Y+5	; 0x05
    3e08:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0a:	af 81       	ldd	r26, Y+7	; 0x07
    3e0c:	b8 85       	ldd	r27, Y+8	; 0x08
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	a1 05       	cpc	r26, r1
    3e12:	b1 05       	cpc	r27, r1
    3e14:	a1 f0       	breq	.+40     	; 0x3e3e <IntToString+0x152>
		str[i--] = '-';
    3e16:	29 81       	ldd	r18, Y+1	; 0x01
    3e18:	3a 81       	ldd	r19, Y+2	; 0x02
    3e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1e:	fc 01       	movw	r30, r24
    3e20:	e2 0f       	add	r30, r18
    3e22:	f3 1f       	adc	r31, r19
    3e24:	8d e2       	ldi	r24, 0x2D	; 45
    3e26:	80 83       	st	Z, r24
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2c:	ab 81       	ldd	r26, Y+3	; 0x03
    3e2e:	bc 81       	ldd	r27, Y+4	; 0x04
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	a1 09       	sbc	r26, r1
    3e34:	b1 09       	sbc	r27, r1
    3e36:	89 83       	std	Y+1, r24	; 0x01
    3e38:	9a 83       	std	Y+2, r25	; 0x02
    3e3a:	ab 83       	std	Y+3, r26	; 0x03
    3e3c:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	9a 81       	ldd	r25, Y+2	; 0x02
    3e42:	ab 81       	ldd	r26, Y+3	; 0x03
    3e44:	bc 81       	ldd	r27, Y+4	; 0x04
    3e46:	01 96       	adiw	r24, 0x01	; 1
    3e48:	a1 1d       	adc	r26, r1
    3e4a:	b1 1d       	adc	r27, r1
    3e4c:	89 83       	std	Y+1, r24	; 0x01
    3e4e:	9a 83       	std	Y+2, r25	; 0x02
    3e50:	ab 83       	std	Y+3, r26	; 0x03
    3e52:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    3e54:	29 81       	ldd	r18, Y+1	; 0x01
    3e56:	3a 81       	ldd	r19, Y+2	; 0x02
    3e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5c:	82 0f       	add	r24, r18
    3e5e:	93 1f       	adc	r25, r19

}
    3e60:	2e 96       	adiw	r28, 0x0e	; 14
    3e62:	0f b6       	in	r0, 0x3f	; 63
    3e64:	f8 94       	cli
    3e66:	de bf       	out	0x3e, r29	; 62
    3e68:	0f be       	out	0x3f, r0	; 63
    3e6a:	cd bf       	out	0x3d, r28	; 61
    3e6c:	cf 91       	pop	r28
    3e6e:	df 91       	pop	r29
    3e70:	1f 91       	pop	r17
    3e72:	0f 91       	pop	r16
    3e74:	08 95       	ret

00003e76 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
    3e7e:	6a 97       	sbiw	r28, 0x1a	; 26
    3e80:	0f b6       	in	r0, 0x3f	; 63
    3e82:	f8 94       	cli
    3e84:	de bf       	out	0x3e, r29	; 62
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	cd bf       	out	0x3d, r28	; 61
    3e8a:	6f 8b       	std	Y+23, r22	; 0x17
    3e8c:	78 8f       	std	Y+24, r23	; 0x18
    3e8e:	89 8f       	std	Y+25, r24	; 0x19
    3e90:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    3e92:	8f 89       	ldd	r24, Y+23	; 0x17
    3e94:	98 8d       	ldd	r25, Y+24	; 0x18
    3e96:	a9 8d       	ldd	r26, Y+25	; 0x19
    3e98:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	a1 05       	cpc	r26, r1
    3e9e:	b1 05       	cpc	r27, r1
    3ea0:	99 f0       	breq	.+38     	; 0x3ec8 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    3ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ea6:	a9 8d       	ldd	r26, Y+25	; 0x19
    3ea8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3eaa:	9e 01       	movw	r18, r28
    3eac:	2d 5f       	subi	r18, 0xFD	; 253
    3eae:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb0:	bc 01       	movw	r22, r24
    3eb2:	cd 01       	movw	r24, r26
    3eb4:	a9 01       	movw	r20, r18
    3eb6:	0e 94 76 1e 	call	0x3cec	; 0x3cec <IntToString>
    3eba:	9a 83       	std	Y+2, r25	; 0x02
    3ebc:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec2:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
    3ec6:	03 c0       	rjmp	.+6      	; 0x3ece <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    3ec8:	80 e3       	ldi	r24, 0x30	; 48
    3eca:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
	}
}
    3ece:	6a 96       	adiw	r28, 0x1a	; 26
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	f8 94       	cli
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	0f be       	out	0x3f, r0	; 63
    3ed8:	cd bf       	out	0x3d, r28	; 61
    3eda:	cf 91       	pop	r28
    3edc:	df 91       	pop	r29
    3ede:	08 95       	ret

00003ee0 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	a6 97       	sbiw	r28, 0x26	; 38
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	6b a3       	std	Y+35, r22	; 0x23
    3ef6:	7c a3       	std	Y+36, r23	; 0x24
    3ef8:	8d a3       	std	Y+37, r24	; 0x25
    3efa:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    3efc:	6b a1       	ldd	r22, Y+35	; 0x23
    3efe:	7c a1       	ldd	r23, Y+36	; 0x24
    3f00:	8d a1       	ldd	r24, Y+37	; 0x25
    3f02:	9e a1       	ldd	r25, Y+38	; 0x26
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	48 ec       	ldi	r20, 0xC8	; 200
    3f0a:	52 e4       	ldi	r21, 0x42	; 66
    3f0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	bc 01       	movw	r22, r24
    3f16:	cd 01       	movw	r24, r26
    3f18:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	8b 87       	std	Y+11, r24	; 0x0b
    3f22:	9c 87       	std	Y+12, r25	; 0x0c
    3f24:	ad 87       	std	Y+13, r26	; 0x0d
    3f26:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    3f28:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f2c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3f2e:	be 85       	ldd	r27, Y+14	; 0x0e
    3f30:	9e 01       	movw	r18, r28
    3f32:	21 5f       	subi	r18, 0xF1	; 241
    3f34:	3f 4f       	sbci	r19, 0xFF	; 255
    3f36:	bc 01       	movw	r22, r24
    3f38:	cd 01       	movw	r24, r26
    3f3a:	a9 01       	movw	r20, r18
    3f3c:	0e 94 76 1e 	call	0x3cec	; 0x3cec <IntToString>
    3f40:	9a 87       	std	Y+10, r25	; 0x0a
    3f42:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    3f44:	1d 82       	std	Y+5, r1	; 0x05
    3f46:	1e 82       	std	Y+6, r1	; 0x06
    3f48:	1f 82       	std	Y+7, r1	; 0x07
    3f4a:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    3f4c:	19 82       	std	Y+1, r1	; 0x01
    3f4e:	1a 82       	std	Y+2, r1	; 0x02
    3f50:	1b 82       	std	Y+3, r1	; 0x03
    3f52:	1c 82       	std	Y+4, r1	; 0x04
    3f54:	0b c0       	rjmp	.+22     	; 0x3f6c <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	af 81       	ldd	r26, Y+7	; 0x07
    3f5c:	b8 85       	ldd	r27, Y+8	; 0x08
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	a1 1d       	adc	r26, r1
    3f62:	b1 1d       	adc	r27, r1
    3f64:	8d 83       	std	Y+5, r24	; 0x05
    3f66:	9e 83       	std	Y+6, r25	; 0x06
    3f68:	af 83       	std	Y+7, r26	; 0x07
    3f6a:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    3f6c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f6e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f70:	89 85       	ldd	r24, Y+9	; 0x09
    3f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f74:	fc 01       	movw	r30, r24
    3f76:	e2 0f       	add	r30, r18
    3f78:	f3 1f       	adc	r31, r19
    3f7a:	80 81       	ld	r24, Z
    3f7c:	88 23       	and	r24, r24
    3f7e:	59 f7       	brne	.-42     	; 0x3f56 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    3f80:	8d 81       	ldd	r24, Y+5	; 0x05
    3f82:	9e 81       	ldd	r25, Y+6	; 0x06
    3f84:	af 81       	ldd	r26, Y+7	; 0x07
    3f86:	b8 85       	ldd	r27, Y+8	; 0x08
    3f88:	02 97       	sbiw	r24, 0x02	; 2
    3f8a:	a1 09       	sbc	r26, r1
    3f8c:	b1 09       	sbc	r27, r1
    3f8e:	8d 83       	std	Y+5, r24	; 0x05
    3f90:	9e 83       	std	Y+6, r25	; 0x06
    3f92:	af 83       	std	Y+7, r26	; 0x07
    3f94:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    3f96:	8d 81       	ldd	r24, Y+5	; 0x05
    3f98:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9a:	af 81       	ldd	r26, Y+7	; 0x07
    3f9c:	b8 85       	ldd	r27, Y+8	; 0x08
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	a1 05       	cpc	r26, r1
    3fa2:	b1 05       	cpc	r27, r1
    3fa4:	49 f5       	brne	.+82     	; 0x3ff8 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    3fa6:	80 e3       	ldi	r24, 0x30	; 48
    3fa8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
    3fac:	25 c0       	rjmp	.+74     	; 0x3ff8 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    3fae:	29 81       	ldd	r18, Y+1	; 0x01
    3fb0:	3a 81       	ldd	r19, Y+2	; 0x02
    3fb2:	4b 81       	ldd	r20, Y+3	; 0x03
    3fb4:	5c 81       	ldd	r21, Y+4	; 0x04
    3fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fba:	af 81       	ldd	r26, Y+7	; 0x07
    3fbc:	b8 85       	ldd	r27, Y+8	; 0x08
    3fbe:	28 17       	cp	r18, r24
    3fc0:	39 07       	cpc	r19, r25
    3fc2:	4a 07       	cpc	r20, r26
    3fc4:	5b 07       	cpc	r21, r27
    3fc6:	19 f4       	brne	.+6      	; 0x3fce <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    3fc8:	8e e2       	ldi	r24, 0x2E	; 46
    3fca:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    3fce:	29 81       	ldd	r18, Y+1	; 0x01
    3fd0:	3a 81       	ldd	r19, Y+2	; 0x02
    3fd2:	89 85       	ldd	r24, Y+9	; 0x09
    3fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	e2 0f       	add	r30, r18
    3fda:	f3 1f       	adc	r31, r19
    3fdc:	80 81       	ld	r24, Z
    3fde:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
		counter2++;
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe6:	ab 81       	ldd	r26, Y+3	; 0x03
    3fe8:	bc 81       	ldd	r27, Y+4	; 0x04
    3fea:	01 96       	adiw	r24, 0x01	; 1
    3fec:	a1 1d       	adc	r26, r1
    3fee:	b1 1d       	adc	r27, r1
    3ff0:	89 83       	std	Y+1, r24	; 0x01
    3ff2:	9a 83       	std	Y+2, r25	; 0x02
    3ff4:	ab 83       	std	Y+3, r26	; 0x03
    3ff6:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    3ff8:	29 81       	ldd	r18, Y+1	; 0x01
    3ffa:	3a 81       	ldd	r19, Y+2	; 0x02
    3ffc:	89 85       	ldd	r24, Y+9	; 0x09
    3ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4000:	fc 01       	movw	r30, r24
    4002:	e2 0f       	add	r30, r18
    4004:	f3 1f       	adc	r31, r19
    4006:	80 81       	ld	r24, Z
    4008:	88 23       	and	r24, r24
    400a:	89 f6       	brne	.-94     	; 0x3fae <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    400c:	a6 96       	adiw	r28, 0x26	; 38
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	08 95       	ret

0000401e <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	00 d0       	rcall	.+0      	; 0x4024 <LCD_voidGoToPosition+0x6>
    4024:	0f 92       	push	r0
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	8a 83       	std	Y+2, r24	; 0x02
    402c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    402e:	80 e8       	ldi	r24, 0x80	; 128
    4030:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	88 23       	and	r24, r24
    4036:	21 f4       	brne	.+8      	; 0x4040 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    4038:	8b 81       	ldd	r24, Y+3	; 0x03
    403a:	80 58       	subi	r24, 0x80	; 128
    403c:	89 83       	std	Y+1, r24	; 0x01
    403e:	14 c0       	rjmp	.+40     	; 0x4068 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    4040:	8a 81       	ldd	r24, Y+2	; 0x02
    4042:	81 30       	cpi	r24, 0x01	; 1
    4044:	21 f4       	brne	.+8      	; 0x404e <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    4046:	8b 81       	ldd	r24, Y+3	; 0x03
    4048:	80 54       	subi	r24, 0x40	; 64
    404a:	89 83       	std	Y+1, r24	; 0x01
    404c:	0d c0       	rjmp	.+26     	; 0x4068 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    404e:	8a 81       	ldd	r24, Y+2	; 0x02
    4050:	82 30       	cpi	r24, 0x02	; 2
    4052:	21 f4       	brne	.+8      	; 0x405c <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    4054:	8b 81       	ldd	r24, Y+3	; 0x03
    4056:	8c 56       	subi	r24, 0x6C	; 108
    4058:	89 83       	std	Y+1, r24	; 0x01
    405a:	06 c0       	rjmp	.+12     	; 0x4068 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	83 30       	cpi	r24, 0x03	; 3
    4060:	19 f4       	brne	.+6      	; 0x4068 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    4062:	8b 81       	ldd	r24, Y+3	; 0x03
    4064:	8c 52       	subi	r24, 0x2C	; 44
    4066:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	80 68       	ori	r24, 0x80	; 128
    406c:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
}
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    4080:	df 93       	push	r29
    4082:	cf 93       	push	r28
    4084:	cd b7       	in	r28, 0x3d	; 61
    4086:	de b7       	in	r29, 0x3e	; 62
    4088:	27 97       	sbiw	r28, 0x07	; 7
    408a:	0f b6       	in	r0, 0x3f	; 63
    408c:	f8 94       	cli
    408e:	de bf       	out	0x3e, r29	; 62
    4090:	0f be       	out	0x3f, r0	; 63
    4092:	cd bf       	out	0x3d, r28	; 61
    4094:	9c 83       	std	Y+4, r25	; 0x04
    4096:	8b 83       	std	Y+3, r24	; 0x03
    4098:	6d 83       	std	Y+5, r22	; 0x05
    409a:	4e 83       	std	Y+6, r20	; 0x06
    409c:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    409e:	8e 81       	ldd	r24, Y+6	; 0x06
    40a0:	6f 81       	ldd	r22, Y+7	; 0x07
    40a2:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    40a6:	8d 81       	ldd	r24, Y+5	; 0x05
    40a8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
	u8 address = 0;
    40ac:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    40ae:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    40b0:	8d 81       	ldd	r24, Y+5	; 0x05
    40b2:	88 30       	cpi	r24, 0x08	; 8
    40b4:	30 f5       	brcc	.+76     	; 0x4102 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    40b6:	8d 81       	ldd	r24, Y+5	; 0x05
    40b8:	88 2f       	mov	r24, r24
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	88 0f       	add	r24, r24
    40be:	99 1f       	adc	r25, r25
    40c0:	88 0f       	add	r24, r24
    40c2:	99 1f       	adc	r25, r25
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    40ca:	8a 81       	ldd	r24, Y+2	; 0x02
    40cc:	80 64       	ori	r24, 0x40	; 64
    40ce:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	8f 77       	andi	r24, 0x7F	; 127
    40d4:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    40d6:	8a 81       	ldd	r24, Y+2	; 0x02
    40d8:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    40dc:	19 82       	std	Y+1, r1	; 0x01
    40de:	0e c0       	rjmp	.+28     	; 0x40fc <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    40e0:	89 81       	ldd	r24, Y+1	; 0x01
    40e2:	28 2f       	mov	r18, r24
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ea:	fc 01       	movw	r30, r24
    40ec:	e2 0f       	add	r30, r18
    40ee:	f3 1f       	adc	r31, r19
    40f0:	80 81       	ld	r24, Z
    40f2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	8f 5f       	subi	r24, 0xFF	; 255
    40fa:	89 83       	std	Y+1, r24	; 0x01
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	88 30       	cpi	r24, 0x08	; 8
    4100:	78 f3       	brcs	.-34     	; 0x40e0 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    4102:	82 e0       	ldi	r24, 0x02	; 2
    4104:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
}
    4108:	27 96       	adiw	r28, 0x07	; 7
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	f8 94       	cli
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	cd bf       	out	0x3d, r28	; 61
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	08 95       	ret

0000411a <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	a1 97       	sbiw	r28, 0x21	; 33
    4124:	0f b6       	in	r0, 0x3f	; 63
    4126:	f8 94       	cli
    4128:	de bf       	out	0x3e, r29	; 62
    412a:	0f be       	out	0x3f, r0	; 63
    412c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    412e:	8f ef       	ldi	r24, 0xFF	; 255
    4130:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    4132:	ce 01       	movw	r24, r28
    4134:	04 96       	adiw	r24, 0x04	; 4
    4136:	9e 8f       	std	Y+30, r25	; 0x1e
    4138:	8d 8f       	std	Y+29, r24	; 0x1d
    413a:	e5 ec       	ldi	r30, 0xC5	; 197
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	f8 a3       	std	Y+32, r31	; 0x20
    4140:	ef 8f       	std	Y+31, r30	; 0x1f
    4142:	f0 e1       	ldi	r31, 0x10	; 16
    4144:	f9 a3       	std	Y+33, r31	; 0x21
    4146:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4148:	f8 a1       	ldd	r31, Y+32	; 0x20
    414a:	00 80       	ld	r0, Z
    414c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    414e:	98 a1       	ldd	r25, Y+32	; 0x20
    4150:	01 96       	adiw	r24, 0x01	; 1
    4152:	98 a3       	std	Y+32, r25	; 0x20
    4154:	8f 8f       	std	Y+31, r24	; 0x1f
    4156:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4158:	fe 8d       	ldd	r31, Y+30	; 0x1e
    415a:	00 82       	st	Z, r0
    415c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    415e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4160:	01 96       	adiw	r24, 0x01	; 1
    4162:	9e 8f       	std	Y+30, r25	; 0x1e
    4164:	8d 8f       	std	Y+29, r24	; 0x1d
    4166:	99 a1       	ldd	r25, Y+33	; 0x21
    4168:	91 50       	subi	r25, 0x01	; 1
    416a:	99 a3       	std	Y+33, r25	; 0x21
    416c:	e9 a1       	ldd	r30, Y+33	; 0x21
    416e:	ee 23       	and	r30, r30
    4170:	51 f7       	brne	.-44     	; 0x4146 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    4172:	87 e0       	ldi	r24, 0x07	; 7
    4174:	8c 8b       	std	Y+20, r24	; 0x14
    4176:	86 e0       	ldi	r24, 0x06	; 6
    4178:	8d 8b       	std	Y+21, r24	; 0x15
    417a:	85 e0       	ldi	r24, 0x05	; 5
    417c:	8e 8b       	std	Y+22, r24	; 0x16
    417e:	83 e0       	ldi	r24, 0x03	; 3
    4180:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    4182:	85 e0       	ldi	r24, 0x05	; 5
    4184:	88 8f       	std	Y+24, r24	; 0x18
    4186:	84 e0       	ldi	r24, 0x04	; 4
    4188:	89 8f       	std	Y+25, r24	; 0x19
    418a:	83 e0       	ldi	r24, 0x03	; 3
    418c:	8a 8f       	std	Y+26, r24	; 0x1a
    418e:	82 e0       	ldi	r24, 0x02	; 2
    4190:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4192:	1a 82       	std	Y+2, r1	; 0x02
    4194:	6b c0       	rjmp	.+214    	; 0x426c <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    4196:	8a 81       	ldd	r24, Y+2	; 0x02
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	ce 01       	movw	r24, r28
    419e:	44 96       	adiw	r24, 0x14	; 20
    41a0:	fc 01       	movw	r30, r24
    41a2:	e2 0f       	add	r30, r18
    41a4:	f3 1f       	adc	r31, r19
    41a6:	90 81       	ld	r25, Z
    41a8:	84 e0       	ldi	r24, 0x04	; 4
    41aa:	69 2f       	mov	r22, r25
    41ac:	40 e0       	ldi	r20, 0x00	; 0
    41ae:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    41b2:	19 82       	std	Y+1, r1	; 0x01
    41b4:	46 c0       	rjmp	.+140    	; 0x4242 <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	28 2f       	mov	r18, r24
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	ce 01       	movw	r24, r28
    41be:	48 96       	adiw	r24, 0x18	; 24
    41c0:	fc 01       	movw	r30, r24
    41c2:	e2 0f       	add	r30, r18
    41c4:	f3 1f       	adc	r31, r19
    41c6:	90 81       	ld	r25, Z
    41c8:	83 e0       	ldi	r24, 0x03	; 3
    41ca:	69 2f       	mov	r22, r25
    41cc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_u8GetPinValue>
    41d0:	88 23       	and	r24, r24
    41d2:	a1 f5       	brne	.+104    	; 0x423c <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	28 2f       	mov	r18, r24
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	8a 81       	ldd	r24, Y+2	; 0x02
    41dc:	48 2f       	mov	r20, r24
    41de:	50 e0       	ldi	r21, 0x00	; 0
    41e0:	22 0f       	add	r18, r18
    41e2:	33 1f       	adc	r19, r19
    41e4:	22 0f       	add	r18, r18
    41e6:	33 1f       	adc	r19, r19
    41e8:	ce 01       	movw	r24, r28
    41ea:	01 96       	adiw	r24, 0x01	; 1
    41ec:	82 0f       	add	r24, r18
    41ee:	93 1f       	adc	r25, r19
    41f0:	84 0f       	add	r24, r20
    41f2:	95 1f       	adc	r25, r21
    41f4:	fc 01       	movw	r30, r24
    41f6:	33 96       	adiw	r30, 0x03	; 3
    41f8:	80 81       	ld	r24, Z
    41fa:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	28 2f       	mov	r18, r24
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	ce 01       	movw	r24, r28
    4204:	48 96       	adiw	r24, 0x18	; 24
    4206:	fc 01       	movw	r30, r24
    4208:	e2 0f       	add	r30, r18
    420a:	f3 1f       	adc	r31, r19
    420c:	90 81       	ld	r25, Z
    420e:	83 e0       	ldi	r24, 0x03	; 3
    4210:	69 2f       	mov	r22, r25
    4212:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_u8GetPinValue>
    4216:	88 23       	and	r24, r24
    4218:	89 f3       	breq	.-30     	; 0x41fc <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    421a:	8a 81       	ldd	r24, Y+2	; 0x02
    421c:	28 2f       	mov	r18, r24
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	ce 01       	movw	r24, r28
    4222:	44 96       	adiw	r24, 0x14	; 20
    4224:	fc 01       	movw	r30, r24
    4226:	e2 0f       	add	r30, r18
    4228:	f3 1f       	adc	r31, r19
    422a:	90 81       	ld	r25, Z
    422c:	84 e0       	ldi	r24, 0x04	; 4
    422e:	69 2f       	mov	r22, r25
    4230:	41 e0       	ldi	r20, 0x01	; 1
    4232:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    4236:	fb 81       	ldd	r31, Y+3	; 0x03
    4238:	fc 8f       	std	Y+28, r31	; 0x1c
    423a:	1e c0       	rjmp	.+60     	; 0x4278 <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	8f 5f       	subi	r24, 0xFF	; 255
    4240:	89 83       	std	Y+1, r24	; 0x01
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	84 30       	cpi	r24, 0x04	; 4
    4246:	08 f4       	brcc	.+2      	; 0x424a <KPD_u8GetPressedKey+0x130>
    4248:	b6 cf       	rjmp	.-148    	; 0x41b6 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    424a:	8a 81       	ldd	r24, Y+2	; 0x02
    424c:	28 2f       	mov	r18, r24
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	ce 01       	movw	r24, r28
    4252:	44 96       	adiw	r24, 0x14	; 20
    4254:	fc 01       	movw	r30, r24
    4256:	e2 0f       	add	r30, r18
    4258:	f3 1f       	adc	r31, r19
    425a:	90 81       	ld	r25, Z
    425c:	84 e0       	ldi	r24, 0x04	; 4
    425e:	69 2f       	mov	r22, r25
    4260:	41 e0       	ldi	r20, 0x01	; 1
    4262:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4266:	8a 81       	ldd	r24, Y+2	; 0x02
    4268:	8f 5f       	subi	r24, 0xFF	; 255
    426a:	8a 83       	std	Y+2, r24	; 0x02
    426c:	8a 81       	ldd	r24, Y+2	; 0x02
    426e:	84 30       	cpi	r24, 0x04	; 4
    4270:	08 f4       	brcc	.+2      	; 0x4274 <KPD_u8GetPressedKey+0x15a>
    4272:	91 cf       	rjmp	.-222    	; 0x4196 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    4274:	8b 81       	ldd	r24, Y+3	; 0x03
    4276:	8c 8f       	std	Y+28, r24	; 0x1c
    4278:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    427a:	a1 96       	adiw	r28, 0x21	; 33
    427c:	0f b6       	in	r0, 0x3f	; 63
    427e:	f8 94       	cli
    4280:	de bf       	out	0x3e, r29	; 62
    4282:	0f be       	out	0x3f, r0	; 63
    4284:	cd bf       	out	0x3d, r28	; 61
    4286:	cf 91       	pop	r28
    4288:	df 91       	pop	r29
    428a:	08 95       	ret

0000428c <main>:
u8 pad2X = 1;
u8 moveLeft = 1;

void AdjustMovements();

int main(){
    428c:	0f 93       	push	r16
    428e:	1f 93       	push	r17
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	c3 5a       	subi	r28, 0xA3	; 163
    429a:	d0 40       	sbci	r29, 0x00	; 0
    429c:	0f b6       	in	r0, 0x3f	; 63
    429e:	f8 94       	cli
    42a0:	de bf       	out	0x3e, r29	; 62
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    42a6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidInit>
	DIO_voidSetPortValue(DIO_PortC, 0xFF);
    42aa:	83 e0       	ldi	r24, 0x03	; 3
    42ac:	6f ef       	ldi	r22, 0xFF	; 255
    42ae:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPortValue>
	LCD_voidInit();
    42b2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <LCD_voidInit>
	u8 pad1[] = {PAD1};
    42b6:	ce 01       	movw	r24, r28
    42b8:	8b 59       	subi	r24, 0x9B	; 155
    42ba:	9f 4f       	sbci	r25, 0xFF	; 255
    42bc:	c5 57       	subi	r28, 0x75	; 117
    42be:	df 4f       	sbci	r29, 0xFF	; 255
    42c0:	99 83       	std	Y+1, r25	; 0x01
    42c2:	88 83       	st	Y, r24
    42c4:	cb 58       	subi	r28, 0x8B	; 139
    42c6:	d0 40       	sbci	r29, 0x00	; 0
    42c8:	85 ee       	ldi	r24, 0xE5	; 229
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	c3 57       	subi	r28, 0x73	; 115
    42ce:	df 4f       	sbci	r29, 0xFF	; 255
    42d0:	99 83       	std	Y+1, r25	; 0x01
    42d2:	88 83       	st	Y, r24
    42d4:	cd 58       	subi	r28, 0x8D	; 141
    42d6:	d0 40       	sbci	r29, 0x00	; 0
    42d8:	98 e0       	ldi	r25, 0x08	; 8
    42da:	c1 57       	subi	r28, 0x71	; 113
    42dc:	df 4f       	sbci	r29, 0xFF	; 255
    42de:	98 83       	st	Y, r25
    42e0:	cf 58       	subi	r28, 0x8F	; 143
    42e2:	d0 40       	sbci	r29, 0x00	; 0
    42e4:	c3 57       	subi	r28, 0x73	; 115
    42e6:	df 4f       	sbci	r29, 0xFF	; 255
    42e8:	e8 81       	ld	r30, Y
    42ea:	f9 81       	ldd	r31, Y+1	; 0x01
    42ec:	cd 58       	subi	r28, 0x8D	; 141
    42ee:	d0 40       	sbci	r29, 0x00	; 0
    42f0:	00 80       	ld	r0, Z
    42f2:	c3 57       	subi	r28, 0x73	; 115
    42f4:	df 4f       	sbci	r29, 0xFF	; 255
    42f6:	88 81       	ld	r24, Y
    42f8:	99 81       	ldd	r25, Y+1	; 0x01
    42fa:	cd 58       	subi	r28, 0x8D	; 141
    42fc:	d0 40       	sbci	r29, 0x00	; 0
    42fe:	01 96       	adiw	r24, 0x01	; 1
    4300:	c3 57       	subi	r28, 0x73	; 115
    4302:	df 4f       	sbci	r29, 0xFF	; 255
    4304:	99 83       	std	Y+1, r25	; 0x01
    4306:	88 83       	st	Y, r24
    4308:	cd 58       	subi	r28, 0x8D	; 141
    430a:	d0 40       	sbci	r29, 0x00	; 0
    430c:	c5 57       	subi	r28, 0x75	; 117
    430e:	df 4f       	sbci	r29, 0xFF	; 255
    4310:	e8 81       	ld	r30, Y
    4312:	f9 81       	ldd	r31, Y+1	; 0x01
    4314:	cb 58       	subi	r28, 0x8B	; 139
    4316:	d0 40       	sbci	r29, 0x00	; 0
    4318:	00 82       	st	Z, r0
    431a:	c5 57       	subi	r28, 0x75	; 117
    431c:	df 4f       	sbci	r29, 0xFF	; 255
    431e:	88 81       	ld	r24, Y
    4320:	99 81       	ldd	r25, Y+1	; 0x01
    4322:	cb 58       	subi	r28, 0x8B	; 139
    4324:	d0 40       	sbci	r29, 0x00	; 0
    4326:	01 96       	adiw	r24, 0x01	; 1
    4328:	c5 57       	subi	r28, 0x75	; 117
    432a:	df 4f       	sbci	r29, 0xFF	; 255
    432c:	99 83       	std	Y+1, r25	; 0x01
    432e:	88 83       	st	Y, r24
    4330:	cb 58       	subi	r28, 0x8B	; 139
    4332:	d0 40       	sbci	r29, 0x00	; 0
    4334:	c1 57       	subi	r28, 0x71	; 113
    4336:	df 4f       	sbci	r29, 0xFF	; 255
    4338:	98 81       	ld	r25, Y
    433a:	cf 58       	subi	r28, 0x8F	; 143
    433c:	d0 40       	sbci	r29, 0x00	; 0
    433e:	91 50       	subi	r25, 0x01	; 1
    4340:	c1 57       	subi	r28, 0x71	; 113
    4342:	df 4f       	sbci	r29, 0xFF	; 255
    4344:	98 83       	st	Y, r25
    4346:	cf 58       	subi	r28, 0x8F	; 143
    4348:	d0 40       	sbci	r29, 0x00	; 0
    434a:	c1 57       	subi	r28, 0x71	; 113
    434c:	df 4f       	sbci	r29, 0xFF	; 255
    434e:	e8 81       	ld	r30, Y
    4350:	cf 58       	subi	r28, 0x8F	; 143
    4352:	d0 40       	sbci	r29, 0x00	; 0
    4354:	ee 23       	and	r30, r30
    4356:	31 f6       	brne	.-116    	; 0x42e4 <main+0x58>
	u8 pad2[] = {PAD2};
    4358:	ce 01       	movw	r24, r28
    435a:	83 59       	subi	r24, 0x93	; 147
    435c:	9f 4f       	sbci	r25, 0xFF	; 255
    435e:	c0 57       	subi	r28, 0x70	; 112
    4360:	df 4f       	sbci	r29, 0xFF	; 255
    4362:	99 83       	std	Y+1, r25	; 0x01
    4364:	88 83       	st	Y, r24
    4366:	c0 59       	subi	r28, 0x90	; 144
    4368:	d0 40       	sbci	r29, 0x00	; 0
    436a:	8d ed       	ldi	r24, 0xDD	; 221
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	ce 56       	subi	r28, 0x6E	; 110
    4370:	df 4f       	sbci	r29, 0xFF	; 255
    4372:	99 83       	std	Y+1, r25	; 0x01
    4374:	88 83       	st	Y, r24
    4376:	c2 59       	subi	r28, 0x92	; 146
    4378:	d0 40       	sbci	r29, 0x00	; 0
    437a:	98 e0       	ldi	r25, 0x08	; 8
    437c:	cc 56       	subi	r28, 0x6C	; 108
    437e:	df 4f       	sbci	r29, 0xFF	; 255
    4380:	98 83       	st	Y, r25
    4382:	c4 59       	subi	r28, 0x94	; 148
    4384:	d0 40       	sbci	r29, 0x00	; 0
    4386:	ce 56       	subi	r28, 0x6E	; 110
    4388:	df 4f       	sbci	r29, 0xFF	; 255
    438a:	e8 81       	ld	r30, Y
    438c:	f9 81       	ldd	r31, Y+1	; 0x01
    438e:	c2 59       	subi	r28, 0x92	; 146
    4390:	d0 40       	sbci	r29, 0x00	; 0
    4392:	00 80       	ld	r0, Z
    4394:	ce 56       	subi	r28, 0x6E	; 110
    4396:	df 4f       	sbci	r29, 0xFF	; 255
    4398:	88 81       	ld	r24, Y
    439a:	99 81       	ldd	r25, Y+1	; 0x01
    439c:	c2 59       	subi	r28, 0x92	; 146
    439e:	d0 40       	sbci	r29, 0x00	; 0
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	ce 56       	subi	r28, 0x6E	; 110
    43a4:	df 4f       	sbci	r29, 0xFF	; 255
    43a6:	99 83       	std	Y+1, r25	; 0x01
    43a8:	88 83       	st	Y, r24
    43aa:	c2 59       	subi	r28, 0x92	; 146
    43ac:	d0 40       	sbci	r29, 0x00	; 0
    43ae:	c0 57       	subi	r28, 0x70	; 112
    43b0:	df 4f       	sbci	r29, 0xFF	; 255
    43b2:	e8 81       	ld	r30, Y
    43b4:	f9 81       	ldd	r31, Y+1	; 0x01
    43b6:	c0 59       	subi	r28, 0x90	; 144
    43b8:	d0 40       	sbci	r29, 0x00	; 0
    43ba:	00 82       	st	Z, r0
    43bc:	c0 57       	subi	r28, 0x70	; 112
    43be:	df 4f       	sbci	r29, 0xFF	; 255
    43c0:	88 81       	ld	r24, Y
    43c2:	99 81       	ldd	r25, Y+1	; 0x01
    43c4:	c0 59       	subi	r28, 0x90	; 144
    43c6:	d0 40       	sbci	r29, 0x00	; 0
    43c8:	01 96       	adiw	r24, 0x01	; 1
    43ca:	c0 57       	subi	r28, 0x70	; 112
    43cc:	df 4f       	sbci	r29, 0xFF	; 255
    43ce:	99 83       	std	Y+1, r25	; 0x01
    43d0:	88 83       	st	Y, r24
    43d2:	c0 59       	subi	r28, 0x90	; 144
    43d4:	d0 40       	sbci	r29, 0x00	; 0
    43d6:	cc 56       	subi	r28, 0x6C	; 108
    43d8:	df 4f       	sbci	r29, 0xFF	; 255
    43da:	98 81       	ld	r25, Y
    43dc:	c4 59       	subi	r28, 0x94	; 148
    43de:	d0 40       	sbci	r29, 0x00	; 0
    43e0:	91 50       	subi	r25, 0x01	; 1
    43e2:	cc 56       	subi	r28, 0x6C	; 108
    43e4:	df 4f       	sbci	r29, 0xFF	; 255
    43e6:	98 83       	st	Y, r25
    43e8:	c4 59       	subi	r28, 0x94	; 148
    43ea:	d0 40       	sbci	r29, 0x00	; 0
    43ec:	cc 56       	subi	r28, 0x6C	; 108
    43ee:	df 4f       	sbci	r29, 0xFF	; 255
    43f0:	e8 81       	ld	r30, Y
    43f2:	c4 59       	subi	r28, 0x94	; 148
    43f4:	d0 40       	sbci	r29, 0x00	; 0
    43f6:	ee 23       	and	r30, r30
    43f8:	31 f6       	brne	.-116    	; 0x4386 <main+0xfa>
	u8 ball[] = {BALL};
    43fa:	ce 01       	movw	r24, r28
    43fc:	8b 58       	subi	r24, 0x8B	; 139
    43fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4400:	cb 56       	subi	r28, 0x6B	; 107
    4402:	df 4f       	sbci	r29, 0xFF	; 255
    4404:	99 83       	std	Y+1, r25	; 0x01
    4406:	88 83       	st	Y, r24
    4408:	c5 59       	subi	r28, 0x95	; 149
    440a:	d0 40       	sbci	r29, 0x00	; 0
    440c:	85 ed       	ldi	r24, 0xD5	; 213
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	c9 56       	subi	r28, 0x69	; 105
    4412:	df 4f       	sbci	r29, 0xFF	; 255
    4414:	99 83       	std	Y+1, r25	; 0x01
    4416:	88 83       	st	Y, r24
    4418:	c7 59       	subi	r28, 0x97	; 151
    441a:	d0 40       	sbci	r29, 0x00	; 0
    441c:	98 e0       	ldi	r25, 0x08	; 8
    441e:	c7 56       	subi	r28, 0x67	; 103
    4420:	df 4f       	sbci	r29, 0xFF	; 255
    4422:	98 83       	st	Y, r25
    4424:	c9 59       	subi	r28, 0x99	; 153
    4426:	d0 40       	sbci	r29, 0x00	; 0
    4428:	c9 56       	subi	r28, 0x69	; 105
    442a:	df 4f       	sbci	r29, 0xFF	; 255
    442c:	e8 81       	ld	r30, Y
    442e:	f9 81       	ldd	r31, Y+1	; 0x01
    4430:	c7 59       	subi	r28, 0x97	; 151
    4432:	d0 40       	sbci	r29, 0x00	; 0
    4434:	00 80       	ld	r0, Z
    4436:	c9 56       	subi	r28, 0x69	; 105
    4438:	df 4f       	sbci	r29, 0xFF	; 255
    443a:	88 81       	ld	r24, Y
    443c:	99 81       	ldd	r25, Y+1	; 0x01
    443e:	c7 59       	subi	r28, 0x97	; 151
    4440:	d0 40       	sbci	r29, 0x00	; 0
    4442:	01 96       	adiw	r24, 0x01	; 1
    4444:	c9 56       	subi	r28, 0x69	; 105
    4446:	df 4f       	sbci	r29, 0xFF	; 255
    4448:	99 83       	std	Y+1, r25	; 0x01
    444a:	88 83       	st	Y, r24
    444c:	c7 59       	subi	r28, 0x97	; 151
    444e:	d0 40       	sbci	r29, 0x00	; 0
    4450:	cb 56       	subi	r28, 0x6B	; 107
    4452:	df 4f       	sbci	r29, 0xFF	; 255
    4454:	e8 81       	ld	r30, Y
    4456:	f9 81       	ldd	r31, Y+1	; 0x01
    4458:	c5 59       	subi	r28, 0x95	; 149
    445a:	d0 40       	sbci	r29, 0x00	; 0
    445c:	00 82       	st	Z, r0
    445e:	cb 56       	subi	r28, 0x6B	; 107
    4460:	df 4f       	sbci	r29, 0xFF	; 255
    4462:	88 81       	ld	r24, Y
    4464:	99 81       	ldd	r25, Y+1	; 0x01
    4466:	c5 59       	subi	r28, 0x95	; 149
    4468:	d0 40       	sbci	r29, 0x00	; 0
    446a:	01 96       	adiw	r24, 0x01	; 1
    446c:	cb 56       	subi	r28, 0x6B	; 107
    446e:	df 4f       	sbci	r29, 0xFF	; 255
    4470:	99 83       	std	Y+1, r25	; 0x01
    4472:	88 83       	st	Y, r24
    4474:	c5 59       	subi	r28, 0x95	; 149
    4476:	d0 40       	sbci	r29, 0x00	; 0
    4478:	c7 56       	subi	r28, 0x67	; 103
    447a:	df 4f       	sbci	r29, 0xFF	; 255
    447c:	98 81       	ld	r25, Y
    447e:	c9 59       	subi	r28, 0x99	; 153
    4480:	d0 40       	sbci	r29, 0x00	; 0
    4482:	91 50       	subi	r25, 0x01	; 1
    4484:	c7 56       	subi	r28, 0x67	; 103
    4486:	df 4f       	sbci	r29, 0xFF	; 255
    4488:	98 83       	st	Y, r25
    448a:	c9 59       	subi	r28, 0x99	; 153
    448c:	d0 40       	sbci	r29, 0x00	; 0
    448e:	c7 56       	subi	r28, 0x67	; 103
    4490:	df 4f       	sbci	r29, 0xFF	; 255
    4492:	e8 81       	ld	r30, Y
    4494:	c9 59       	subi	r28, 0x99	; 153
    4496:	d0 40       	sbci	r29, 0x00	; 0
    4498:	ee 23       	and	r30, r30
    449a:	31 f6       	brne	.-116    	; 0x4428 <main+0x19c>
	u8 player1[] = "Ahmed ";
    449c:	ce 01       	movw	r24, r28
    449e:	83 58       	subi	r24, 0x83	; 131
    44a0:	9f 4f       	sbci	r25, 0xFF	; 255
    44a2:	c6 56       	subi	r28, 0x66	; 102
    44a4:	df 4f       	sbci	r29, 0xFF	; 255
    44a6:	99 83       	std	Y+1, r25	; 0x01
    44a8:	88 83       	st	Y, r24
    44aa:	ca 59       	subi	r28, 0x9A	; 154
    44ac:	d0 40       	sbci	r29, 0x00	; 0
    44ae:	8e e6       	ldi	r24, 0x6E	; 110
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	c4 56       	subi	r28, 0x64	; 100
    44b4:	df 4f       	sbci	r29, 0xFF	; 255
    44b6:	99 83       	std	Y+1, r25	; 0x01
    44b8:	88 83       	st	Y, r24
    44ba:	cc 59       	subi	r28, 0x9C	; 156
    44bc:	d0 40       	sbci	r29, 0x00	; 0
    44be:	97 e0       	ldi	r25, 0x07	; 7
    44c0:	c2 56       	subi	r28, 0x62	; 98
    44c2:	df 4f       	sbci	r29, 0xFF	; 255
    44c4:	98 83       	st	Y, r25
    44c6:	ce 59       	subi	r28, 0x9E	; 158
    44c8:	d0 40       	sbci	r29, 0x00	; 0
    44ca:	c4 56       	subi	r28, 0x64	; 100
    44cc:	df 4f       	sbci	r29, 0xFF	; 255
    44ce:	e8 81       	ld	r30, Y
    44d0:	f9 81       	ldd	r31, Y+1	; 0x01
    44d2:	cc 59       	subi	r28, 0x9C	; 156
    44d4:	d0 40       	sbci	r29, 0x00	; 0
    44d6:	00 80       	ld	r0, Z
    44d8:	c4 56       	subi	r28, 0x64	; 100
    44da:	df 4f       	sbci	r29, 0xFF	; 255
    44dc:	88 81       	ld	r24, Y
    44de:	99 81       	ldd	r25, Y+1	; 0x01
    44e0:	cc 59       	subi	r28, 0x9C	; 156
    44e2:	d0 40       	sbci	r29, 0x00	; 0
    44e4:	01 96       	adiw	r24, 0x01	; 1
    44e6:	c4 56       	subi	r28, 0x64	; 100
    44e8:	df 4f       	sbci	r29, 0xFF	; 255
    44ea:	99 83       	std	Y+1, r25	; 0x01
    44ec:	88 83       	st	Y, r24
    44ee:	cc 59       	subi	r28, 0x9C	; 156
    44f0:	d0 40       	sbci	r29, 0x00	; 0
    44f2:	c6 56       	subi	r28, 0x66	; 102
    44f4:	df 4f       	sbci	r29, 0xFF	; 255
    44f6:	e8 81       	ld	r30, Y
    44f8:	f9 81       	ldd	r31, Y+1	; 0x01
    44fa:	ca 59       	subi	r28, 0x9A	; 154
    44fc:	d0 40       	sbci	r29, 0x00	; 0
    44fe:	00 82       	st	Z, r0
    4500:	c6 56       	subi	r28, 0x66	; 102
    4502:	df 4f       	sbci	r29, 0xFF	; 255
    4504:	88 81       	ld	r24, Y
    4506:	99 81       	ldd	r25, Y+1	; 0x01
    4508:	ca 59       	subi	r28, 0x9A	; 154
    450a:	d0 40       	sbci	r29, 0x00	; 0
    450c:	01 96       	adiw	r24, 0x01	; 1
    450e:	c6 56       	subi	r28, 0x66	; 102
    4510:	df 4f       	sbci	r29, 0xFF	; 255
    4512:	99 83       	std	Y+1, r25	; 0x01
    4514:	88 83       	st	Y, r24
    4516:	ca 59       	subi	r28, 0x9A	; 154
    4518:	d0 40       	sbci	r29, 0x00	; 0
    451a:	c2 56       	subi	r28, 0x62	; 98
    451c:	df 4f       	sbci	r29, 0xFF	; 255
    451e:	98 81       	ld	r25, Y
    4520:	ce 59       	subi	r28, 0x9E	; 158
    4522:	d0 40       	sbci	r29, 0x00	; 0
    4524:	91 50       	subi	r25, 0x01	; 1
    4526:	c2 56       	subi	r28, 0x62	; 98
    4528:	df 4f       	sbci	r29, 0xFF	; 255
    452a:	98 83       	st	Y, r25
    452c:	ce 59       	subi	r28, 0x9E	; 158
    452e:	d0 40       	sbci	r29, 0x00	; 0
    4530:	c2 56       	subi	r28, 0x62	; 98
    4532:	df 4f       	sbci	r29, 0xFF	; 255
    4534:	e8 81       	ld	r30, Y
    4536:	ce 59       	subi	r28, 0x9E	; 158
    4538:	d0 40       	sbci	r29, 0x00	; 0
    453a:	ee 23       	and	r30, r30
    453c:	31 f6       	brne	.-116    	; 0x44ca <main+0x23e>
	u8 player2[] = "Hazim ";
    453e:	ce 01       	movw	r24, r28
    4540:	8c 57       	subi	r24, 0x7C	; 124
    4542:	9f 4f       	sbci	r25, 0xFF	; 255
    4544:	c1 56       	subi	r28, 0x61	; 97
    4546:	df 4f       	sbci	r29, 0xFF	; 255
    4548:	99 83       	std	Y+1, r25	; 0x01
    454a:	88 83       	st	Y, r24
    454c:	cf 59       	subi	r28, 0x9F	; 159
    454e:	d0 40       	sbci	r29, 0x00	; 0
    4550:	85 e7       	ldi	r24, 0x75	; 117
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	cf 55       	subi	r28, 0x5F	; 95
    4556:	df 4f       	sbci	r29, 0xFF	; 255
    4558:	99 83       	std	Y+1, r25	; 0x01
    455a:	88 83       	st	Y, r24
    455c:	c1 5a       	subi	r28, 0xA1	; 161
    455e:	d0 40       	sbci	r29, 0x00	; 0
    4560:	97 e0       	ldi	r25, 0x07	; 7
    4562:	cd 55       	subi	r28, 0x5D	; 93
    4564:	df 4f       	sbci	r29, 0xFF	; 255
    4566:	98 83       	st	Y, r25
    4568:	c3 5a       	subi	r28, 0xA3	; 163
    456a:	d0 40       	sbci	r29, 0x00	; 0
    456c:	cf 55       	subi	r28, 0x5F	; 95
    456e:	df 4f       	sbci	r29, 0xFF	; 255
    4570:	e8 81       	ld	r30, Y
    4572:	f9 81       	ldd	r31, Y+1	; 0x01
    4574:	c1 5a       	subi	r28, 0xA1	; 161
    4576:	d0 40       	sbci	r29, 0x00	; 0
    4578:	00 80       	ld	r0, Z
    457a:	cf 55       	subi	r28, 0x5F	; 95
    457c:	df 4f       	sbci	r29, 0xFF	; 255
    457e:	88 81       	ld	r24, Y
    4580:	99 81       	ldd	r25, Y+1	; 0x01
    4582:	c1 5a       	subi	r28, 0xA1	; 161
    4584:	d0 40       	sbci	r29, 0x00	; 0
    4586:	01 96       	adiw	r24, 0x01	; 1
    4588:	cf 55       	subi	r28, 0x5F	; 95
    458a:	df 4f       	sbci	r29, 0xFF	; 255
    458c:	99 83       	std	Y+1, r25	; 0x01
    458e:	88 83       	st	Y, r24
    4590:	c1 5a       	subi	r28, 0xA1	; 161
    4592:	d0 40       	sbci	r29, 0x00	; 0
    4594:	c1 56       	subi	r28, 0x61	; 97
    4596:	df 4f       	sbci	r29, 0xFF	; 255
    4598:	e8 81       	ld	r30, Y
    459a:	f9 81       	ldd	r31, Y+1	; 0x01
    459c:	cf 59       	subi	r28, 0x9F	; 159
    459e:	d0 40       	sbci	r29, 0x00	; 0
    45a0:	00 82       	st	Z, r0
    45a2:	c1 56       	subi	r28, 0x61	; 97
    45a4:	df 4f       	sbci	r29, 0xFF	; 255
    45a6:	88 81       	ld	r24, Y
    45a8:	99 81       	ldd	r25, Y+1	; 0x01
    45aa:	cf 59       	subi	r28, 0x9F	; 159
    45ac:	d0 40       	sbci	r29, 0x00	; 0
    45ae:	01 96       	adiw	r24, 0x01	; 1
    45b0:	c1 56       	subi	r28, 0x61	; 97
    45b2:	df 4f       	sbci	r29, 0xFF	; 255
    45b4:	99 83       	std	Y+1, r25	; 0x01
    45b6:	88 83       	st	Y, r24
    45b8:	cf 59       	subi	r28, 0x9F	; 159
    45ba:	d0 40       	sbci	r29, 0x00	; 0
    45bc:	cd 55       	subi	r28, 0x5D	; 93
    45be:	df 4f       	sbci	r29, 0xFF	; 255
    45c0:	98 81       	ld	r25, Y
    45c2:	c3 5a       	subi	r28, 0xA3	; 163
    45c4:	d0 40       	sbci	r29, 0x00	; 0
    45c6:	91 50       	subi	r25, 0x01	; 1
    45c8:	cd 55       	subi	r28, 0x5D	; 93
    45ca:	df 4f       	sbci	r29, 0xFF	; 255
    45cc:	98 83       	st	Y, r25
    45ce:	c3 5a       	subi	r28, 0xA3	; 163
    45d0:	d0 40       	sbci	r29, 0x00	; 0
    45d2:	cd 55       	subi	r28, 0x5D	; 93
    45d4:	df 4f       	sbci	r29, 0xFF	; 255
    45d6:	e8 81       	ld	r30, Y
    45d8:	c3 5a       	subi	r28, 0xA3	; 163
    45da:	d0 40       	sbci	r29, 0x00	; 0
    45dc:	ee 23       	and	r30, r30
    45de:	31 f6       	brne	.-116    	; 0x456c <main+0x2e0>

	u8 player1Score = 0;
    45e0:	fe 01       	movw	r30, r28
    45e2:	ec 59       	subi	r30, 0x9C	; 156
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	10 82       	st	Z, r1
	u8 player2Score = 0;
    45e8:	fe 01       	movw	r30, r28
    45ea:	ed 59       	subi	r30, 0x9D	; 157
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	10 82       	st	Z, r1
	DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    45f0:	83 e0       	ldi	r24, 0x03	; 3
    45f2:	66 e0       	ldi	r22, 0x06	; 6
    45f4:	40 e0       	ldi	r20, 0x00	; 0
    45f6:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
	LCD_voidGoToPosition(0,0);
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	60 e0       	ldi	r22, 0x00	; 0
    45fe:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>

	while(1){
		LCD_voidSendCommand(LCD_ClearDisplay);
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
		LCD_voidGoToPosition(0,0);
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	60 e0       	ldi	r22, 0x00	; 0
    460c:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>
		LCD_voidWriteString(player1);
    4610:	ce 01       	movw	r24, r28
    4612:	83 58       	subi	r24, 0x83	; 131
    4614:	9f 4f       	sbci	r25, 0xFF	; 255
    4616:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
		LCD_voidWriteChar(':');
    461a:	8a e3       	ldi	r24, 0x3A	; 58
    461c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
		LCD_voidWriteIntData(player1Score);
    4620:	fe 01       	movw	r30, r28
    4622:	ec 59       	subi	r30, 0x9C	; 156
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	80 81       	ld	r24, Z
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	a0 e0       	ldi	r26, 0x00	; 0
    462e:	b0 e0       	ldi	r27, 0x00	; 0
    4630:	bc 01       	movw	r22, r24
    4632:	cd 01       	movw	r24, r26
    4634:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <LCD_voidWriteIntData>
		LCD_voidGoToPosition(0,0x80 + 10);
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	6a e8       	ldi	r22, 0x8A	; 138
    463c:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>
		LCD_voidWriteString(player2);
    4640:	ce 01       	movw	r24, r28
    4642:	8c 57       	subi	r24, 0x7C	; 124
    4644:	9f 4f       	sbci	r25, 0xFF	; 255
    4646:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
		LCD_voidWriteChar(':');
    464a:	8a e3       	ldi	r24, 0x3A	; 58
    464c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_voidWriteChar>
		LCD_voidWriteIntData(player2Score);
    4650:	fe 01       	movw	r30, r28
    4652:	ed 59       	subi	r30, 0x9D	; 157
    4654:	ff 4f       	sbci	r31, 0xFF	; 255
    4656:	80 81       	ld	r24, Z
    4658:	88 2f       	mov	r24, r24
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	a0 e0       	ldi	r26, 0x00	; 0
    465e:	b0 e0       	ldi	r27, 0x00	; 0
    4660:	bc 01       	movw	r22, r24
    4662:	cd 01       	movw	r24, r26
    4664:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <LCD_voidWriteIntData>
		LCD_voidDisplaySpecialChar(pad1,7,pad1X,START);
    4668:	20 91 90 00 	lds	r18, 0x0090
    466c:	ce 01       	movw	r24, r28
    466e:	8b 59       	subi	r24, 0x9B	; 155
    4670:	9f 4f       	sbci	r25, 0xFF	; 255
    4672:	67 e0       	ldi	r22, 0x07	; 7
    4674:	42 2f       	mov	r20, r18
    4676:	20 e8       	ldi	r18, 0x80	; 128
    4678:	0e 94 40 20 	call	0x4080	; 0x4080 <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(pad2,6,pad2X,END);
    467c:	20 91 91 00 	lds	r18, 0x0091
    4680:	ce 01       	movw	r24, r28
    4682:	83 59       	subi	r24, 0x93	; 147
    4684:	9f 4f       	sbci	r25, 0xFF	; 255
    4686:	66 e0       	ldi	r22, 0x06	; 6
    4688:	42 2f       	mov	r20, r18
    468a:	23 e9       	ldi	r18, 0x93	; 147
    468c:	0e 94 40 20 	call	0x4080	; 0x4080 <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(ball,5,ballX,ballY);
    4690:	20 91 8e 00 	lds	r18, 0x008E
    4694:	30 91 8f 00 	lds	r19, 0x008F
    4698:	ce 01       	movw	r24, r28
    469a:	8b 58       	subi	r24, 0x8B	; 139
    469c:	9f 4f       	sbci	r25, 0xFF	; 255
    469e:	65 e0       	ldi	r22, 0x05	; 5
    46a0:	42 2f       	mov	r20, r18
    46a2:	23 2f       	mov	r18, r19
    46a4:	0e 94 40 20 	call	0x4080	; 0x4080 <LCD_voidDisplaySpecialChar>
		if(moveLeft){
    46a8:	80 91 92 00 	lds	r24, 0x0092
    46ac:	88 23       	and	r24, r24
    46ae:	09 f4       	brne	.+2      	; 0x46b2 <main+0x426>
    46b0:	4d c2       	rjmp	.+1178   	; 0x4b4c <main+0x8c0>
			ballY--;
    46b2:	80 91 8f 00 	lds	r24, 0x008F
    46b6:	81 50       	subi	r24, 0x01	; 1
    46b8:	80 93 8f 00 	sts	0x008F, r24
			if(ballY == START){
    46bc:	80 91 8f 00 	lds	r24, 0x008F
    46c0:	80 38       	cpi	r24, 0x80	; 128
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <main+0x43a>
    46c4:	f9 c3       	rjmp	.+2034   	; 0x4eb8 <main+0xc2c>
				if(ballX == pad1X){
    46c6:	90 91 8e 00 	lds	r25, 0x008E
    46ca:	80 91 90 00 	lds	r24, 0x0090
    46ce:	98 17       	cp	r25, r24
    46d0:	41 f4       	brne	.+16     	; 0x46e2 <main+0x456>
					ballY+=2;
    46d2:	80 91 8f 00 	lds	r24, 0x008F
    46d6:	8e 5f       	subi	r24, 0xFE	; 254
    46d8:	80 93 8f 00 	sts	0x008F, r24
					moveLeft = 0;
    46dc:	10 92 92 00 	sts	0x0092, r1
    46e0:	eb c3       	rjmp	.+2006   	; 0x4eb8 <main+0xc2c>
				}
				else{
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, High);
    46e2:	83 e0       	ldi	r24, 0x03	; 3
    46e4:	66 e0       	ldi	r22, 0x06	; 6
    46e6:	41 e0       	ldi	r20, 0x01	; 1
    46e8:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
					player2Score++;
    46ec:	de 01       	movw	r26, r28
    46ee:	ad 59       	subi	r26, 0x9D	; 157
    46f0:	bf 4f       	sbci	r27, 0xFF	; 255
    46f2:	fe 01       	movw	r30, r28
    46f4:	ed 59       	subi	r30, 0x9D	; 157
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	80 81       	ld	r24, Z
    46fa:	8f 5f       	subi	r24, 0xFF	; 255
    46fc:	8c 93       	st	X, r24
					ballY = START + 10;
    46fe:	8a e8       	ldi	r24, 0x8A	; 138
    4700:	80 93 8f 00 	sts	0x008F, r24
					ballX = 2;
    4704:	82 e0       	ldi	r24, 0x02	; 2
    4706:	80 93 8e 00 	sts	0x008E, r24

					LCD_voidSendCommand(LCD_ClearDisplay);
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
					LCD_voidGoToPosition(1, START + 5);
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	65 e8       	ldi	r22, 0x85	; 133
    4714:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>
					LCD_voidWriteString(player2);
    4718:	ce 01       	movw	r24, r28
    471a:	8c 57       	subi	r24, 0x7C	; 124
    471c:	9f 4f       	sbci	r25, 0xFF	; 255
    471e:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
					LCD_voidWriteString((u8*)"Scored!");
    4722:	80 e6       	ldi	r24, 0x60	; 96
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
    472a:	fe 01       	movw	r30, r28
    472c:	e1 5a       	subi	r30, 0xA1	; 161
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	a8 e4       	ldi	r26, 0x48	; 72
    4736:	b3 e4       	ldi	r27, 0x43	; 67
    4738:	80 83       	st	Z, r24
    473a:	91 83       	std	Z+1, r25	; 0x01
    473c:	a2 83       	std	Z+2, r26	; 0x02
    473e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4740:	8e 01       	movw	r16, r28
    4742:	05 5a       	subi	r16, 0xA5	; 165
    4744:	1f 4f       	sbci	r17, 0xFF	; 255
    4746:	fe 01       	movw	r30, r28
    4748:	e1 5a       	subi	r30, 0xA1	; 161
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	60 81       	ld	r22, Z
    474e:	71 81       	ldd	r23, Z+1	; 0x01
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	4a e7       	ldi	r20, 0x7A	; 122
    475a:	55 e4       	ldi	r21, 0x45	; 69
    475c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	f8 01       	movw	r30, r16
    4766:	80 83       	st	Z, r24
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	a2 83       	std	Z+2, r26	; 0x02
    476c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    476e:	fe 01       	movw	r30, r28
    4770:	e5 5a       	subi	r30, 0xA5	; 165
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	60 81       	ld	r22, Z
    4776:	71 81       	ldd	r23, Z+1	; 0x01
    4778:	82 81       	ldd	r24, Z+2	; 0x02
    477a:	93 81       	ldd	r25, Z+3	; 0x03
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	40 e8       	ldi	r20, 0x80	; 128
    4782:	5f e3       	ldi	r21, 0x3F	; 63
    4784:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4788:	88 23       	and	r24, r24
    478a:	44 f4       	brge	.+16     	; 0x479c <main+0x510>
		__ticks = 1;
    478c:	fe 01       	movw	r30, r28
    478e:	e7 5a       	subi	r30, 0xA7	; 167
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	81 e0       	ldi	r24, 0x01	; 1
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	91 83       	std	Z+1, r25	; 0x01
    4798:	80 83       	st	Z, r24
    479a:	64 c0       	rjmp	.+200    	; 0x4864 <main+0x5d8>
	else if (__tmp > 65535)
    479c:	fe 01       	movw	r30, r28
    479e:	e5 5a       	subi	r30, 0xA5	; 165
    47a0:	ff 4f       	sbci	r31, 0xFF	; 255
    47a2:	60 81       	ld	r22, Z
    47a4:	71 81       	ldd	r23, Z+1	; 0x01
    47a6:	82 81       	ldd	r24, Z+2	; 0x02
    47a8:	93 81       	ldd	r25, Z+3	; 0x03
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	3f ef       	ldi	r19, 0xFF	; 255
    47ae:	4f e7       	ldi	r20, 0x7F	; 127
    47b0:	57 e4       	ldi	r21, 0x47	; 71
    47b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    47b6:	18 16       	cp	r1, r24
    47b8:	0c f0       	brlt	.+2      	; 0x47bc <main+0x530>
    47ba:	43 c0       	rjmp	.+134    	; 0x4842 <main+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47bc:	fe 01       	movw	r30, r28
    47be:	e1 5a       	subi	r30, 0xA1	; 161
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	60 81       	ld	r22, Z
    47c4:	71 81       	ldd	r23, Z+1	; 0x01
    47c6:	82 81       	ldd	r24, Z+2	; 0x02
    47c8:	93 81       	ldd	r25, Z+3	; 0x03
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	40 e2       	ldi	r20, 0x20	; 32
    47d0:	51 e4       	ldi	r21, 0x41	; 65
    47d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	8e 01       	movw	r16, r28
    47dc:	07 5a       	subi	r16, 0xA7	; 167
    47de:	1f 4f       	sbci	r17, 0xFF	; 255
    47e0:	bc 01       	movw	r22, r24
    47e2:	cd 01       	movw	r24, r26
    47e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	f8 01       	movw	r30, r16
    47ee:	91 83       	std	Z+1, r25	; 0x01
    47f0:	80 83       	st	Z, r24
    47f2:	1f c0       	rjmp	.+62     	; 0x4832 <main+0x5a6>
    47f4:	fe 01       	movw	r30, r28
    47f6:	e9 5a       	subi	r30, 0xA9	; 169
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	80 e9       	ldi	r24, 0x90	; 144
    47fc:	91 e0       	ldi	r25, 0x01	; 1
    47fe:	91 83       	std	Z+1, r25	; 0x01
    4800:	80 83       	st	Z, r24
    4802:	fe 01       	movw	r30, r28
    4804:	e9 5a       	subi	r30, 0xA9	; 169
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	80 81       	ld	r24, Z
    480a:	91 81       	ldd	r25, Z+1	; 0x01
    480c:	01 97       	sbiw	r24, 0x01	; 1
    480e:	f1 f7       	brne	.-4      	; 0x480c <main+0x580>
    4810:	fe 01       	movw	r30, r28
    4812:	e9 5a       	subi	r30, 0xA9	; 169
    4814:	ff 4f       	sbci	r31, 0xFF	; 255
    4816:	91 83       	std	Z+1, r25	; 0x01
    4818:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    481a:	de 01       	movw	r26, r28
    481c:	a7 5a       	subi	r26, 0xA7	; 167
    481e:	bf 4f       	sbci	r27, 0xFF	; 255
    4820:	fe 01       	movw	r30, r28
    4822:	e7 5a       	subi	r30, 0xA7	; 167
    4824:	ff 4f       	sbci	r31, 0xFF	; 255
    4826:	80 81       	ld	r24, Z
    4828:	91 81       	ldd	r25, Z+1	; 0x01
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	11 96       	adiw	r26, 0x01	; 1
    482e:	9c 93       	st	X, r25
    4830:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4832:	fe 01       	movw	r30, r28
    4834:	e7 5a       	subi	r30, 0xA7	; 167
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	80 81       	ld	r24, Z
    483a:	91 81       	ldd	r25, Z+1	; 0x01
    483c:	00 97       	sbiw	r24, 0x00	; 0
    483e:	d1 f6       	brne	.-76     	; 0x47f4 <main+0x568>
    4840:	27 c0       	rjmp	.+78     	; 0x4890 <main+0x604>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4842:	8e 01       	movw	r16, r28
    4844:	07 5a       	subi	r16, 0xA7	; 167
    4846:	1f 4f       	sbci	r17, 0xFF	; 255
    4848:	fe 01       	movw	r30, r28
    484a:	e5 5a       	subi	r30, 0xA5	; 165
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	60 81       	ld	r22, Z
    4850:	71 81       	ldd	r23, Z+1	; 0x01
    4852:	82 81       	ldd	r24, Z+2	; 0x02
    4854:	93 81       	ldd	r25, Z+3	; 0x03
    4856:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	f8 01       	movw	r30, r16
    4860:	91 83       	std	Z+1, r25	; 0x01
    4862:	80 83       	st	Z, r24
    4864:	de 01       	movw	r26, r28
    4866:	ab 5a       	subi	r26, 0xAB	; 171
    4868:	bf 4f       	sbci	r27, 0xFF	; 255
    486a:	fe 01       	movw	r30, r28
    486c:	e7 5a       	subi	r30, 0xA7	; 167
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	80 81       	ld	r24, Z
    4872:	91 81       	ldd	r25, Z+1	; 0x01
    4874:	8d 93       	st	X+, r24
    4876:	9c 93       	st	X, r25
    4878:	fe 01       	movw	r30, r28
    487a:	eb 5a       	subi	r30, 0xAB	; 171
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	80 81       	ld	r24, Z
    4880:	91 81       	ldd	r25, Z+1	; 0x01
    4882:	01 97       	sbiw	r24, 0x01	; 1
    4884:	f1 f7       	brne	.-4      	; 0x4882 <main+0x5f6>
    4886:	fe 01       	movw	r30, r28
    4888:	eb 5a       	subi	r30, 0xAB	; 171
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	91 83       	std	Z+1, r25	; 0x01
    488e:	80 83       	st	Z, r24
					_delay_ms(200);
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, Low);
    4890:	83 e0       	ldi	r24, 0x03	; 3
    4892:	66 e0       	ldi	r22, 0x06	; 6
    4894:	40 e0       	ldi	r20, 0x00	; 0
    4896:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
    489a:	fe 01       	movw	r30, r28
    489c:	ef 5a       	subi	r30, 0xAF	; 175
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	80 e0       	ldi	r24, 0x00	; 0
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	a8 e4       	ldi	r26, 0x48	; 72
    48a6:	b4 e4       	ldi	r27, 0x44	; 68
    48a8:	80 83       	st	Z, r24
    48aa:	91 83       	std	Z+1, r25	; 0x01
    48ac:	a2 83       	std	Z+2, r26	; 0x02
    48ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b0:	8e 01       	movw	r16, r28
    48b2:	03 5b       	subi	r16, 0xB3	; 179
    48b4:	1f 4f       	sbci	r17, 0xFF	; 255
    48b6:	fe 01       	movw	r30, r28
    48b8:	ef 5a       	subi	r30, 0xAF	; 175
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	60 81       	ld	r22, Z
    48be:	71 81       	ldd	r23, Z+1	; 0x01
    48c0:	82 81       	ldd	r24, Z+2	; 0x02
    48c2:	93 81       	ldd	r25, Z+3	; 0x03
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	4a e7       	ldi	r20, 0x7A	; 122
    48ca:	55 e4       	ldi	r21, 0x45	; 69
    48cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	f8 01       	movw	r30, r16
    48d6:	80 83       	st	Z, r24
    48d8:	91 83       	std	Z+1, r25	; 0x01
    48da:	a2 83       	std	Z+2, r26	; 0x02
    48dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48de:	fe 01       	movw	r30, r28
    48e0:	e3 5b       	subi	r30, 0xB3	; 179
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	60 81       	ld	r22, Z
    48e6:	71 81       	ldd	r23, Z+1	; 0x01
    48e8:	82 81       	ldd	r24, Z+2	; 0x02
    48ea:	93 81       	ldd	r25, Z+3	; 0x03
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	40 e8       	ldi	r20, 0x80	; 128
    48f2:	5f e3       	ldi	r21, 0x3F	; 63
    48f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    48f8:	88 23       	and	r24, r24
    48fa:	44 f4       	brge	.+16     	; 0x490c <main+0x680>
		__ticks = 1;
    48fc:	fe 01       	movw	r30, r28
    48fe:	e5 5b       	subi	r30, 0xB5	; 181
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	91 83       	std	Z+1, r25	; 0x01
    4908:	80 83       	st	Z, r24
    490a:	64 c0       	rjmp	.+200    	; 0x49d4 <main+0x748>
	else if (__tmp > 65535)
    490c:	fe 01       	movw	r30, r28
    490e:	e3 5b       	subi	r30, 0xB3	; 179
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	60 81       	ld	r22, Z
    4914:	71 81       	ldd	r23, Z+1	; 0x01
    4916:	82 81       	ldd	r24, Z+2	; 0x02
    4918:	93 81       	ldd	r25, Z+3	; 0x03
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	3f ef       	ldi	r19, 0xFF	; 255
    491e:	4f e7       	ldi	r20, 0x7F	; 127
    4920:	57 e4       	ldi	r21, 0x47	; 71
    4922:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4926:	18 16       	cp	r1, r24
    4928:	0c f0       	brlt	.+2      	; 0x492c <main+0x6a0>
    492a:	43 c0       	rjmp	.+134    	; 0x49b2 <main+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    492c:	fe 01       	movw	r30, r28
    492e:	ef 5a       	subi	r30, 0xAF	; 175
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	60 81       	ld	r22, Z
    4934:	71 81       	ldd	r23, Z+1	; 0x01
    4936:	82 81       	ldd	r24, Z+2	; 0x02
    4938:	93 81       	ldd	r25, Z+3	; 0x03
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e2       	ldi	r20, 0x20	; 32
    4940:	51 e4       	ldi	r21, 0x41	; 65
    4942:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4946:	dc 01       	movw	r26, r24
    4948:	cb 01       	movw	r24, r22
    494a:	8e 01       	movw	r16, r28
    494c:	05 5b       	subi	r16, 0xB5	; 181
    494e:	1f 4f       	sbci	r17, 0xFF	; 255
    4950:	bc 01       	movw	r22, r24
    4952:	cd 01       	movw	r24, r26
    4954:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	f8 01       	movw	r30, r16
    495e:	91 83       	std	Z+1, r25	; 0x01
    4960:	80 83       	st	Z, r24
    4962:	1f c0       	rjmp	.+62     	; 0x49a2 <main+0x716>
    4964:	fe 01       	movw	r30, r28
    4966:	e7 5b       	subi	r30, 0xB7	; 183
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	80 e9       	ldi	r24, 0x90	; 144
    496c:	91 e0       	ldi	r25, 0x01	; 1
    496e:	91 83       	std	Z+1, r25	; 0x01
    4970:	80 83       	st	Z, r24
    4972:	fe 01       	movw	r30, r28
    4974:	e7 5b       	subi	r30, 0xB7	; 183
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	80 81       	ld	r24, Z
    497a:	91 81       	ldd	r25, Z+1	; 0x01
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	f1 f7       	brne	.-4      	; 0x497c <main+0x6f0>
    4980:	fe 01       	movw	r30, r28
    4982:	e7 5b       	subi	r30, 0xB7	; 183
    4984:	ff 4f       	sbci	r31, 0xFF	; 255
    4986:	91 83       	std	Z+1, r25	; 0x01
    4988:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498a:	de 01       	movw	r26, r28
    498c:	a5 5b       	subi	r26, 0xB5	; 181
    498e:	bf 4f       	sbci	r27, 0xFF	; 255
    4990:	fe 01       	movw	r30, r28
    4992:	e5 5b       	subi	r30, 0xB5	; 181
    4994:	ff 4f       	sbci	r31, 0xFF	; 255
    4996:	80 81       	ld	r24, Z
    4998:	91 81       	ldd	r25, Z+1	; 0x01
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	11 96       	adiw	r26, 0x01	; 1
    499e:	9c 93       	st	X, r25
    49a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a2:	fe 01       	movw	r30, r28
    49a4:	e5 5b       	subi	r30, 0xB5	; 181
    49a6:	ff 4f       	sbci	r31, 0xFF	; 255
    49a8:	80 81       	ld	r24, Z
    49aa:	91 81       	ldd	r25, Z+1	; 0x01
    49ac:	00 97       	sbiw	r24, 0x00	; 0
    49ae:	d1 f6       	brne	.-76     	; 0x4964 <main+0x6d8>
    49b0:	28 c0       	rjmp	.+80     	; 0x4a02 <main+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b2:	8e 01       	movw	r16, r28
    49b4:	05 5b       	subi	r16, 0xB5	; 181
    49b6:	1f 4f       	sbci	r17, 0xFF	; 255
    49b8:	fe 01       	movw	r30, r28
    49ba:	e3 5b       	subi	r30, 0xB3	; 179
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	60 81       	ld	r22, Z
    49c0:	71 81       	ldd	r23, Z+1	; 0x01
    49c2:	82 81       	ldd	r24, Z+2	; 0x02
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	f8 01       	movw	r30, r16
    49d0:	91 83       	std	Z+1, r25	; 0x01
    49d2:	80 83       	st	Z, r24
    49d4:	de 01       	movw	r26, r28
    49d6:	a9 5b       	subi	r26, 0xB9	; 185
    49d8:	bf 4f       	sbci	r27, 0xFF	; 255
    49da:	fe 01       	movw	r30, r28
    49dc:	e5 5b       	subi	r30, 0xB5	; 181
    49de:	ff 4f       	sbci	r31, 0xFF	; 255
    49e0:	80 81       	ld	r24, Z
    49e2:	91 81       	ldd	r25, Z+1	; 0x01
    49e4:	11 96       	adiw	r26, 0x01	; 1
    49e6:	9c 93       	st	X, r25
    49e8:	8e 93       	st	-X, r24
    49ea:	fe 01       	movw	r30, r28
    49ec:	e9 5b       	subi	r30, 0xB9	; 185
    49ee:	ff 4f       	sbci	r31, 0xFF	; 255
    49f0:	80 81       	ld	r24, Z
    49f2:	91 81       	ldd	r25, Z+1	; 0x01
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	f1 f7       	brne	.-4      	; 0x49f4 <main+0x768>
    49f8:	fe 01       	movw	r30, r28
    49fa:	e9 5b       	subi	r30, 0xB9	; 185
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	91 83       	std	Z+1, r25	; 0x01
    4a00:	80 83       	st	Z, r24
					_delay_ms(800);
					if(player2Score == 3){
    4a02:	fe 01       	movw	r30, r28
    4a04:	ed 59       	subi	r30, 0x9D	; 157
    4a06:	ff 4f       	sbci	r31, 0xFF	; 255
    4a08:	80 81       	ld	r24, Z
    4a0a:	83 30       	cpi	r24, 0x03	; 3
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <main+0x784>
    4a0e:	54 c2       	rjmp	.+1192   	; 0x4eb8 <main+0xc2c>
						LCD_voidSendCommand(LCD_ClearDisplay);
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
						LCD_voidGoToPosition(1, START + 5);
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	65 e8       	ldi	r22, 0x85	; 133
    4a1a:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>
						LCD_voidWriteString(player2);
    4a1e:	ce 01       	movw	r24, r28
    4a20:	8c 57       	subi	r24, 0x7C	; 124
    4a22:	9f 4f       	sbci	r25, 0xFF	; 255
    4a24:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
						LCD_voidWriteString((u8*)"Wins!");
    4a28:	88 e6       	ldi	r24, 0x68	; 104
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
						player1Score = 0;
    4a30:	fe 01       	movw	r30, r28
    4a32:	ec 59       	subi	r30, 0x9C	; 156
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	10 82       	st	Z, r1
						player2Score = 0;
    4a38:	fe 01       	movw	r30, r28
    4a3a:	ed 59       	subi	r30, 0x9D	; 157
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	10 82       	st	Z, r1
    4a40:	fe 01       	movw	r30, r28
    4a42:	ed 5b       	subi	r30, 0xBD	; 189
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	aa e7       	ldi	r26, 0x7A	; 122
    4a4c:	b4 e4       	ldi	r27, 0x44	; 68
    4a4e:	80 83       	st	Z, r24
    4a50:	91 83       	std	Z+1, r25	; 0x01
    4a52:	a2 83       	std	Z+2, r26	; 0x02
    4a54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a56:	8e 01       	movw	r16, r28
    4a58:	01 5c       	subi	r16, 0xC1	; 193
    4a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	ed 5b       	subi	r30, 0xBD	; 189
    4a60:	ff 4f       	sbci	r31, 0xFF	; 255
    4a62:	60 81       	ld	r22, Z
    4a64:	71 81       	ldd	r23, Z+1	; 0x01
    4a66:	82 81       	ldd	r24, Z+2	; 0x02
    4a68:	93 81       	ldd	r25, Z+3	; 0x03
    4a6a:	20 e0       	ldi	r18, 0x00	; 0
    4a6c:	30 e0       	ldi	r19, 0x00	; 0
    4a6e:	4a e7       	ldi	r20, 0x7A	; 122
    4a70:	55 e4       	ldi	r21, 0x45	; 69
    4a72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a76:	dc 01       	movw	r26, r24
    4a78:	cb 01       	movw	r24, r22
    4a7a:	f8 01       	movw	r30, r16
    4a7c:	80 83       	st	Z, r24
    4a7e:	91 83       	std	Z+1, r25	; 0x01
    4a80:	a2 83       	std	Z+2, r26	; 0x02
    4a82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a84:	fe 01       	movw	r30, r28
    4a86:	ff 96       	adiw	r30, 0x3f	; 63
    4a88:	60 81       	ld	r22, Z
    4a8a:	71 81       	ldd	r23, Z+1	; 0x01
    4a8c:	82 81       	ldd	r24, Z+2	; 0x02
    4a8e:	93 81       	ldd	r25, Z+3	; 0x03
    4a90:	20 e0       	ldi	r18, 0x00	; 0
    4a92:	30 e0       	ldi	r19, 0x00	; 0
    4a94:	40 e8       	ldi	r20, 0x80	; 128
    4a96:	5f e3       	ldi	r21, 0x3F	; 63
    4a98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4a9c:	88 23       	and	r24, r24
    4a9e:	2c f4       	brge	.+10     	; 0x4aaa <main+0x81e>
		__ticks = 1;
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	9e af       	std	Y+62, r25	; 0x3e
    4aa6:	8d af       	std	Y+61, r24	; 0x3d
    4aa8:	46 c0       	rjmp	.+140    	; 0x4b36 <main+0x8aa>
	else if (__tmp > 65535)
    4aaa:	fe 01       	movw	r30, r28
    4aac:	ff 96       	adiw	r30, 0x3f	; 63
    4aae:	60 81       	ld	r22, Z
    4ab0:	71 81       	ldd	r23, Z+1	; 0x01
    4ab2:	82 81       	ldd	r24, Z+2	; 0x02
    4ab4:	93 81       	ldd	r25, Z+3	; 0x03
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	3f ef       	ldi	r19, 0xFF	; 255
    4aba:	4f e7       	ldi	r20, 0x7F	; 127
    4abc:	57 e4       	ldi	r21, 0x47	; 71
    4abe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4ac2:	18 16       	cp	r1, r24
    4ac4:	64 f5       	brge	.+88     	; 0x4b1e <main+0x892>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac6:	fe 01       	movw	r30, r28
    4ac8:	ed 5b       	subi	r30, 0xBD	; 189
    4aca:	ff 4f       	sbci	r31, 0xFF	; 255
    4acc:	60 81       	ld	r22, Z
    4ace:	71 81       	ldd	r23, Z+1	; 0x01
    4ad0:	82 81       	ldd	r24, Z+2	; 0x02
    4ad2:	93 81       	ldd	r25, Z+3	; 0x03
    4ad4:	20 e0       	ldi	r18, 0x00	; 0
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	40 e2       	ldi	r20, 0x20	; 32
    4ada:	51 e4       	ldi	r21, 0x41	; 65
    4adc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	bc 01       	movw	r22, r24
    4ae6:	cd 01       	movw	r24, r26
    4ae8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4aec:	dc 01       	movw	r26, r24
    4aee:	cb 01       	movw	r24, r22
    4af0:	9e af       	std	Y+62, r25	; 0x3e
    4af2:	8d af       	std	Y+61, r24	; 0x3d
    4af4:	0f c0       	rjmp	.+30     	; 0x4b14 <main+0x888>
    4af6:	80 e9       	ldi	r24, 0x90	; 144
    4af8:	91 e0       	ldi	r25, 0x01	; 1
    4afa:	9c af       	std	Y+60, r25	; 0x3c
    4afc:	8b af       	std	Y+59, r24	; 0x3b
    4afe:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b00:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b02:	01 97       	sbiw	r24, 0x01	; 1
    4b04:	f1 f7       	brne	.-4      	; 0x4b02 <main+0x876>
    4b06:	9c af       	std	Y+60, r25	; 0x3c
    4b08:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b0e:	01 97       	sbiw	r24, 0x01	; 1
    4b10:	9e af       	std	Y+62, r25	; 0x3e
    4b12:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b14:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b16:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b18:	00 97       	sbiw	r24, 0x00	; 0
    4b1a:	69 f7       	brne	.-38     	; 0x4af6 <main+0x86a>
    4b1c:	cd c1       	rjmp	.+922    	; 0x4eb8 <main+0xc2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b1e:	fe 01       	movw	r30, r28
    4b20:	ff 96       	adiw	r30, 0x3f	; 63
    4b22:	60 81       	ld	r22, Z
    4b24:	71 81       	ldd	r23, Z+1	; 0x01
    4b26:	82 81       	ldd	r24, Z+2	; 0x02
    4b28:	93 81       	ldd	r25, Z+3	; 0x03
    4b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	9e af       	std	Y+62, r25	; 0x3e
    4b34:	8d af       	std	Y+61, r24	; 0x3d
    4b36:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b38:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b3a:	9a af       	std	Y+58, r25	; 0x3a
    4b3c:	89 af       	std	Y+57, r24	; 0x39
    4b3e:	89 ad       	ldd	r24, Y+57	; 0x39
    4b40:	9a ad       	ldd	r25, Y+58	; 0x3a
    4b42:	01 97       	sbiw	r24, 0x01	; 1
    4b44:	f1 f7       	brne	.-4      	; 0x4b42 <main+0x8b6>
    4b46:	9a af       	std	Y+58, r25	; 0x3a
    4b48:	89 af       	std	Y+57, r24	; 0x39
    4b4a:	b6 c1       	rjmp	.+876    	; 0x4eb8 <main+0xc2c>
					}
				}
			}
		}
		else{
			ballY++;
    4b4c:	80 91 8f 00 	lds	r24, 0x008F
    4b50:	8f 5f       	subi	r24, 0xFF	; 255
    4b52:	80 93 8f 00 	sts	0x008F, r24
			if(ballY == END){
    4b56:	80 91 8f 00 	lds	r24, 0x008F
    4b5a:	83 39       	cpi	r24, 0x93	; 147
    4b5c:	09 f0       	breq	.+2      	; 0x4b60 <main+0x8d4>
    4b5e:	ac c1       	rjmp	.+856    	; 0x4eb8 <main+0xc2c>
				if(ballX == pad2X){
    4b60:	90 91 8e 00 	lds	r25, 0x008E
    4b64:	80 91 91 00 	lds	r24, 0x0091
    4b68:	98 17       	cp	r25, r24
    4b6a:	49 f4       	brne	.+18     	; 0x4b7e <main+0x8f2>
					ballY-=2;
    4b6c:	80 91 8f 00 	lds	r24, 0x008F
    4b70:	82 50       	subi	r24, 0x02	; 2
    4b72:	80 93 8f 00 	sts	0x008F, r24
					moveLeft = 1;
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	80 93 92 00 	sts	0x0092, r24
    4b7c:	9d c1       	rjmp	.+826    	; 0x4eb8 <main+0xc2c>
				}
				else{
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, High);
    4b7e:	83 e0       	ldi	r24, 0x03	; 3
    4b80:	66 e0       	ldi	r22, 0x06	; 6
    4b82:	41 e0       	ldi	r20, 0x01	; 1
    4b84:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
					player1Score++;
    4b88:	de 01       	movw	r26, r28
    4b8a:	ac 59       	subi	r26, 0x9C	; 156
    4b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b8e:	fe 01       	movw	r30, r28
    4b90:	ec 59       	subi	r30, 0x9C	; 156
    4b92:	ff 4f       	sbci	r31, 0xFF	; 255
    4b94:	80 81       	ld	r24, Z
    4b96:	8f 5f       	subi	r24, 0xFF	; 255
    4b98:	8c 93       	st	X, r24
					ballY = START + 10;
    4b9a:	8a e8       	ldi	r24, 0x8A	; 138
    4b9c:	80 93 8f 00 	sts	0x008F, r24
					ballX = 2;
    4ba0:	82 e0       	ldi	r24, 0x02	; 2
    4ba2:	80 93 8e 00 	sts	0x008E, r24

					LCD_voidSendCommand(LCD_ClearDisplay);
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
					LCD_voidGoToPosition(1, START + 5);
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	65 e8       	ldi	r22, 0x85	; 133
    4bb0:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>
					LCD_voidWriteString(player1);
    4bb4:	ce 01       	movw	r24, r28
    4bb6:	83 58       	subi	r24, 0x83	; 131
    4bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bba:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
					LCD_voidWriteString((u8*)"Scored!");
    4bbe:	80 e6       	ldi	r24, 0x60	; 96
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	a8 e4       	ldi	r26, 0x48	; 72
    4bcc:	b3 e4       	ldi	r27, 0x43	; 67
    4bce:	8d ab       	std	Y+53, r24	; 0x35
    4bd0:	9e ab       	std	Y+54, r25	; 0x36
    4bd2:	af ab       	std	Y+55, r26	; 0x37
    4bd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd6:	6d a9       	ldd	r22, Y+53	; 0x35
    4bd8:	7e a9       	ldd	r23, Y+54	; 0x36
    4bda:	8f a9       	ldd	r24, Y+55	; 0x37
    4bdc:	98 ad       	ldd	r25, Y+56	; 0x38
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	4a e7       	ldi	r20, 0x7A	; 122
    4be4:	55 e4       	ldi	r21, 0x45	; 69
    4be6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	89 ab       	std	Y+49, r24	; 0x31
    4bf0:	9a ab       	std	Y+50, r25	; 0x32
    4bf2:	ab ab       	std	Y+51, r26	; 0x33
    4bf4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4bf6:	69 a9       	ldd	r22, Y+49	; 0x31
    4bf8:	7a a9       	ldd	r23, Y+50	; 0x32
    4bfa:	8b a9       	ldd	r24, Y+51	; 0x33
    4bfc:	9c a9       	ldd	r25, Y+52	; 0x34
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	40 e8       	ldi	r20, 0x80	; 128
    4c04:	5f e3       	ldi	r21, 0x3F	; 63
    4c06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4c0a:	88 23       	and	r24, r24
    4c0c:	2c f4       	brge	.+10     	; 0x4c18 <main+0x98c>
		__ticks = 1;
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	98 ab       	std	Y+48, r25	; 0x30
    4c14:	8f a7       	std	Y+47, r24	; 0x2f
    4c16:	3f c0       	rjmp	.+126    	; 0x4c96 <main+0xa0a>
	else if (__tmp > 65535)
    4c18:	69 a9       	ldd	r22, Y+49	; 0x31
    4c1a:	7a a9       	ldd	r23, Y+50	; 0x32
    4c1c:	8b a9       	ldd	r24, Y+51	; 0x33
    4c1e:	9c a9       	ldd	r25, Y+52	; 0x34
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	3f ef       	ldi	r19, 0xFF	; 255
    4c24:	4f e7       	ldi	r20, 0x7F	; 127
    4c26:	57 e4       	ldi	r21, 0x47	; 71
    4c28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4c2c:	18 16       	cp	r1, r24
    4c2e:	4c f5       	brge	.+82     	; 0x4c82 <main+0x9f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c30:	6d a9       	ldd	r22, Y+53	; 0x35
    4c32:	7e a9       	ldd	r23, Y+54	; 0x36
    4c34:	8f a9       	ldd	r24, Y+55	; 0x37
    4c36:	98 ad       	ldd	r25, Y+56	; 0x38
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	40 e2       	ldi	r20, 0x20	; 32
    4c3e:	51 e4       	ldi	r21, 0x41	; 65
    4c40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	bc 01       	movw	r22, r24
    4c4a:	cd 01       	movw	r24, r26
    4c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	98 ab       	std	Y+48, r25	; 0x30
    4c56:	8f a7       	std	Y+47, r24	; 0x2f
    4c58:	0f c0       	rjmp	.+30     	; 0x4c78 <main+0x9ec>
    4c5a:	80 e9       	ldi	r24, 0x90	; 144
    4c5c:	91 e0       	ldi	r25, 0x01	; 1
    4c5e:	9e a7       	std	Y+46, r25	; 0x2e
    4c60:	8d a7       	std	Y+45, r24	; 0x2d
    4c62:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c64:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c66:	01 97       	sbiw	r24, 0x01	; 1
    4c68:	f1 f7       	brne	.-4      	; 0x4c66 <main+0x9da>
    4c6a:	9e a7       	std	Y+46, r25	; 0x2e
    4c6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c70:	98 a9       	ldd	r25, Y+48	; 0x30
    4c72:	01 97       	sbiw	r24, 0x01	; 1
    4c74:	98 ab       	std	Y+48, r25	; 0x30
    4c76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	69 f7       	brne	.-38     	; 0x4c5a <main+0x9ce>
    4c80:	14 c0       	rjmp	.+40     	; 0x4caa <main+0xa1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c82:	69 a9       	ldd	r22, Y+49	; 0x31
    4c84:	7a a9       	ldd	r23, Y+50	; 0x32
    4c86:	8b a9       	ldd	r24, Y+51	; 0x33
    4c88:	9c a9       	ldd	r25, Y+52	; 0x34
    4c8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	98 ab       	std	Y+48, r25	; 0x30
    4c94:	8f a7       	std	Y+47, r24	; 0x2f
    4c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c98:	98 a9       	ldd	r25, Y+48	; 0x30
    4c9a:	9c a7       	std	Y+44, r25	; 0x2c
    4c9c:	8b a7       	std	Y+43, r24	; 0x2b
    4c9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ca0:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ca2:	01 97       	sbiw	r24, 0x01	; 1
    4ca4:	f1 f7       	brne	.-4      	; 0x4ca2 <main+0xa16>
    4ca6:	9c a7       	std	Y+44, r25	; 0x2c
    4ca8:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(200);
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, Low);
    4caa:	83 e0       	ldi	r24, 0x03	; 3
    4cac:	66 e0       	ldi	r22, 0x06	; 6
    4cae:	40 e0       	ldi	r20, 0x00	; 0
    4cb0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_voidSetPinValue>
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	a8 e4       	ldi	r26, 0x48	; 72
    4cba:	b4 e4       	ldi	r27, 0x44	; 68
    4cbc:	8f a3       	std	Y+39, r24	; 0x27
    4cbe:	98 a7       	std	Y+40, r25	; 0x28
    4cc0:	a9 a7       	std	Y+41, r26	; 0x29
    4cc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc4:	6f a1       	ldd	r22, Y+39	; 0x27
    4cc6:	78 a5       	ldd	r23, Y+40	; 0x28
    4cc8:	89 a5       	ldd	r24, Y+41	; 0x29
    4cca:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	4a e7       	ldi	r20, 0x7A	; 122
    4cd2:	55 e4       	ldi	r21, 0x45	; 69
    4cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	8b a3       	std	Y+35, r24	; 0x23
    4cde:	9c a3       	std	Y+36, r25	; 0x24
    4ce0:	ad a3       	std	Y+37, r26	; 0x25
    4ce2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    4ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    4ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    4cea:	9e a1       	ldd	r25, Y+38	; 0x26
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	40 e8       	ldi	r20, 0x80	; 128
    4cf2:	5f e3       	ldi	r21, 0x3F	; 63
    4cf4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4cf8:	88 23       	and	r24, r24
    4cfa:	2c f4       	brge	.+10     	; 0x4d06 <main+0xa7a>
		__ticks = 1;
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	9a a3       	std	Y+34, r25	; 0x22
    4d02:	89 a3       	std	Y+33, r24	; 0x21
    4d04:	3f c0       	rjmp	.+126    	; 0x4d84 <main+0xaf8>
	else if (__tmp > 65535)
    4d06:	6b a1       	ldd	r22, Y+35	; 0x23
    4d08:	7c a1       	ldd	r23, Y+36	; 0x24
    4d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	3f ef       	ldi	r19, 0xFF	; 255
    4d12:	4f e7       	ldi	r20, 0x7F	; 127
    4d14:	57 e4       	ldi	r21, 0x47	; 71
    4d16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4d1a:	18 16       	cp	r1, r24
    4d1c:	4c f5       	brge	.+82     	; 0x4d70 <main+0xae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d1e:	6f a1       	ldd	r22, Y+39	; 0x27
    4d20:	78 a5       	ldd	r23, Y+40	; 0x28
    4d22:	89 a5       	ldd	r24, Y+41	; 0x29
    4d24:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e2       	ldi	r20, 0x20	; 32
    4d2c:	51 e4       	ldi	r21, 0x41	; 65
    4d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	bc 01       	movw	r22, r24
    4d38:	cd 01       	movw	r24, r26
    4d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d3e:	dc 01       	movw	r26, r24
    4d40:	cb 01       	movw	r24, r22
    4d42:	9a a3       	std	Y+34, r25	; 0x22
    4d44:	89 a3       	std	Y+33, r24	; 0x21
    4d46:	0f c0       	rjmp	.+30     	; 0x4d66 <main+0xada>
    4d48:	80 e9       	ldi	r24, 0x90	; 144
    4d4a:	91 e0       	ldi	r25, 0x01	; 1
    4d4c:	98 a3       	std	Y+32, r25	; 0x20
    4d4e:	8f 8f       	std	Y+31, r24	; 0x1f
    4d50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d52:	98 a1       	ldd	r25, Y+32	; 0x20
    4d54:	01 97       	sbiw	r24, 0x01	; 1
    4d56:	f1 f7       	brne	.-4      	; 0x4d54 <main+0xac8>
    4d58:	98 a3       	std	Y+32, r25	; 0x20
    4d5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    4d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    4d60:	01 97       	sbiw	r24, 0x01	; 1
    4d62:	9a a3       	std	Y+34, r25	; 0x22
    4d64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d66:	89 a1       	ldd	r24, Y+33	; 0x21
    4d68:	9a a1       	ldd	r25, Y+34	; 0x22
    4d6a:	00 97       	sbiw	r24, 0x00	; 0
    4d6c:	69 f7       	brne	.-38     	; 0x4d48 <main+0xabc>
    4d6e:	14 c0       	rjmp	.+40     	; 0x4d98 <main+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d70:	6b a1       	ldd	r22, Y+35	; 0x23
    4d72:	7c a1       	ldd	r23, Y+36	; 0x24
    4d74:	8d a1       	ldd	r24, Y+37	; 0x25
    4d76:	9e a1       	ldd	r25, Y+38	; 0x26
    4d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	9a a3       	std	Y+34, r25	; 0x22
    4d82:	89 a3       	std	Y+33, r24	; 0x21
    4d84:	89 a1       	ldd	r24, Y+33	; 0x21
    4d86:	9a a1       	ldd	r25, Y+34	; 0x22
    4d88:	9e 8f       	std	Y+30, r25	; 0x1e
    4d8a:	8d 8f       	std	Y+29, r24	; 0x1d
    4d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <main+0xb04>
    4d94:	9e 8f       	std	Y+30, r25	; 0x1e
    4d96:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(800);
					if(player1Score == 3){
    4d98:	fe 01       	movw	r30, r28
    4d9a:	ec 59       	subi	r30, 0x9C	; 156
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	80 81       	ld	r24, Z
    4da0:	83 30       	cpi	r24, 0x03	; 3
    4da2:	c1 f4       	brne	.+48     	; 0x4dd4 <main+0xb48>
						LCD_voidSendCommand(LCD_ClearDisplay);
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	0e 94 ad 1b 	call	0x375a	; 0x375a <LCD_voidSendCommand>
						LCD_voidGoToPosition(1, START + 5);
    4daa:	81 e0       	ldi	r24, 0x01	; 1
    4dac:	65 e8       	ldi	r22, 0x85	; 133
    4dae:	0e 94 0f 20 	call	0x401e	; 0x401e <LCD_voidGoToPosition>
						LCD_voidWriteString(player1);
    4db2:	ce 01       	movw	r24, r28
    4db4:	83 58       	subi	r24, 0x83	; 131
    4db6:	9f 4f       	sbci	r25, 0xFF	; 255
    4db8:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
						LCD_voidWriteString((u8*)"Wins!");
    4dbc:	88 e6       	ldi	r24, 0x68	; 104
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LCD_voidWriteString>
						player1Score = 0;
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	ec 59       	subi	r30, 0x9C	; 156
    4dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dca:	10 82       	st	Z, r1
						player2Score = 0;
    4dcc:	fe 01       	movw	r30, r28
    4dce:	ed 59       	subi	r30, 0x9D	; 157
    4dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd2:	10 82       	st	Z, r1
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	aa e7       	ldi	r26, 0x7A	; 122
    4dda:	b4 e4       	ldi	r27, 0x44	; 68
    4ddc:	89 8f       	std	Y+25, r24	; 0x19
    4dde:	9a 8f       	std	Y+26, r25	; 0x1a
    4de0:	ab 8f       	std	Y+27, r26	; 0x1b
    4de2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4de4:	69 8d       	ldd	r22, Y+25	; 0x19
    4de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	4a e7       	ldi	r20, 0x7A	; 122
    4df2:	55 e4       	ldi	r21, 0x45	; 69
    4df4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4df8:	dc 01       	movw	r26, r24
    4dfa:	cb 01       	movw	r24, r22
    4dfc:	8d 8b       	std	Y+21, r24	; 0x15
    4dfe:	9e 8b       	std	Y+22, r25	; 0x16
    4e00:	af 8b       	std	Y+23, r26	; 0x17
    4e02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e04:	6d 89       	ldd	r22, Y+21	; 0x15
    4e06:	7e 89       	ldd	r23, Y+22	; 0x16
    4e08:	8f 89       	ldd	r24, Y+23	; 0x17
    4e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	40 e8       	ldi	r20, 0x80	; 128
    4e12:	5f e3       	ldi	r21, 0x3F	; 63
    4e14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4e18:	88 23       	and	r24, r24
    4e1a:	2c f4       	brge	.+10     	; 0x4e26 <main+0xb9a>
		__ticks = 1;
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	9c 8b       	std	Y+20, r25	; 0x14
    4e22:	8b 8b       	std	Y+19, r24	; 0x13
    4e24:	3f c0       	rjmp	.+126    	; 0x4ea4 <main+0xc18>
	else if (__tmp > 65535)
    4e26:	6d 89       	ldd	r22, Y+21	; 0x15
    4e28:	7e 89       	ldd	r23, Y+22	; 0x16
    4e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	3f ef       	ldi	r19, 0xFF	; 255
    4e32:	4f e7       	ldi	r20, 0x7F	; 127
    4e34:	57 e4       	ldi	r21, 0x47	; 71
    4e36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4e3a:	18 16       	cp	r1, r24
    4e3c:	4c f5       	brge	.+82     	; 0x4e90 <main+0xc04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    4e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e2       	ldi	r20, 0x20	; 32
    4e4c:	51 e4       	ldi	r21, 0x41	; 65
    4e4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	bc 01       	movw	r22, r24
    4e58:	cd 01       	movw	r24, r26
    4e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	9c 8b       	std	Y+20, r25	; 0x14
    4e64:	8b 8b       	std	Y+19, r24	; 0x13
    4e66:	0f c0       	rjmp	.+30     	; 0x4e86 <main+0xbfa>
    4e68:	80 e9       	ldi	r24, 0x90	; 144
    4e6a:	91 e0       	ldi	r25, 0x01	; 1
    4e6c:	9a 8b       	std	Y+18, r25	; 0x12
    4e6e:	89 8b       	std	Y+17, r24	; 0x11
    4e70:	89 89       	ldd	r24, Y+17	; 0x11
    4e72:	9a 89       	ldd	r25, Y+18	; 0x12
    4e74:	01 97       	sbiw	r24, 0x01	; 1
    4e76:	f1 f7       	brne	.-4      	; 0x4e74 <main+0xbe8>
    4e78:	9a 8b       	std	Y+18, r25	; 0x12
    4e7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e80:	01 97       	sbiw	r24, 0x01	; 1
    4e82:	9c 8b       	std	Y+20, r25	; 0x14
    4e84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e86:	8b 89       	ldd	r24, Y+19	; 0x13
    4e88:	9c 89       	ldd	r25, Y+20	; 0x14
    4e8a:	00 97       	sbiw	r24, 0x00	; 0
    4e8c:	69 f7       	brne	.-38     	; 0x4e68 <main+0xbdc>
    4e8e:	14 c0       	rjmp	.+40     	; 0x4eb8 <main+0xc2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e90:	6d 89       	ldd	r22, Y+21	; 0x15
    4e92:	7e 89       	ldd	r23, Y+22	; 0x16
    4e94:	8f 89       	ldd	r24, Y+23	; 0x17
    4e96:	98 8d       	ldd	r25, Y+24	; 0x18
    4e98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e9c:	dc 01       	movw	r26, r24
    4e9e:	cb 01       	movw	r24, r22
    4ea0:	9c 8b       	std	Y+20, r25	; 0x14
    4ea2:	8b 8b       	std	Y+19, r24	; 0x13
    4ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ea8:	98 8b       	std	Y+16, r25	; 0x10
    4eaa:	8f 87       	std	Y+15, r24	; 0x0f
    4eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eae:	98 89       	ldd	r25, Y+16	; 0x10
    4eb0:	01 97       	sbiw	r24, 0x01	; 1
    4eb2:	f1 f7       	brne	.-4      	; 0x4eb0 <main+0xc24>
    4eb4:	98 8b       	std	Y+16, r25	; 0x10
    4eb6:	8f 87       	std	Y+15, r24	; 0x0f
					}
					_delay_ms(1000);
				}
			}
		}
		AdjustMovements();
    4eb8:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <AdjustMovements>
    4ebc:	80 e0       	ldi	r24, 0x00	; 0
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	aa e7       	ldi	r26, 0x7A	; 122
    4ec2:	b3 e4       	ldi	r27, 0x43	; 67
    4ec4:	8b 87       	std	Y+11, r24	; 0x0b
    4ec6:	9c 87       	std	Y+12, r25	; 0x0c
    4ec8:	ad 87       	std	Y+13, r26	; 0x0d
    4eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ed4:	20 e0       	ldi	r18, 0x00	; 0
    4ed6:	30 e0       	ldi	r19, 0x00	; 0
    4ed8:	4a e7       	ldi	r20, 0x7A	; 122
    4eda:	55 e4       	ldi	r21, 0x45	; 69
    4edc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	8f 83       	std	Y+7, r24	; 0x07
    4ee6:	98 87       	std	Y+8, r25	; 0x08
    4ee8:	a9 87       	std	Y+9, r26	; 0x09
    4eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4eec:	6f 81       	ldd	r22, Y+7	; 0x07
    4eee:	78 85       	ldd	r23, Y+8	; 0x08
    4ef0:	89 85       	ldd	r24, Y+9	; 0x09
    4ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e8       	ldi	r20, 0x80	; 128
    4efa:	5f e3       	ldi	r21, 0x3F	; 63
    4efc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4f00:	88 23       	and	r24, r24
    4f02:	2c f4       	brge	.+10     	; 0x4f0e <main+0xc82>
		__ticks = 1;
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	9e 83       	std	Y+6, r25	; 0x06
    4f0a:	8d 83       	std	Y+5, r24	; 0x05
    4f0c:	3f c0       	rjmp	.+126    	; 0x4f8c <main+0xd00>
	else if (__tmp > 65535)
    4f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f10:	78 85       	ldd	r23, Y+8	; 0x08
    4f12:	89 85       	ldd	r24, Y+9	; 0x09
    4f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f16:	20 e0       	ldi	r18, 0x00	; 0
    4f18:	3f ef       	ldi	r19, 0xFF	; 255
    4f1a:	4f e7       	ldi	r20, 0x7F	; 127
    4f1c:	57 e4       	ldi	r21, 0x47	; 71
    4f1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4f22:	18 16       	cp	r1, r24
    4f24:	4c f5       	brge	.+82     	; 0x4f78 <main+0xcec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	40 e2       	ldi	r20, 0x20	; 32
    4f34:	51 e4       	ldi	r21, 0x41	; 65
    4f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	bc 01       	movw	r22, r24
    4f40:	cd 01       	movw	r24, r26
    4f42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f46:	dc 01       	movw	r26, r24
    4f48:	cb 01       	movw	r24, r22
    4f4a:	9e 83       	std	Y+6, r25	; 0x06
    4f4c:	8d 83       	std	Y+5, r24	; 0x05
    4f4e:	0f c0       	rjmp	.+30     	; 0x4f6e <main+0xce2>
    4f50:	80 e9       	ldi	r24, 0x90	; 144
    4f52:	91 e0       	ldi	r25, 0x01	; 1
    4f54:	9c 83       	std	Y+4, r25	; 0x04
    4f56:	8b 83       	std	Y+3, r24	; 0x03
    4f58:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f5c:	01 97       	sbiw	r24, 0x01	; 1
    4f5e:	f1 f7       	brne	.-4      	; 0x4f5c <main+0xcd0>
    4f60:	9c 83       	std	Y+4, r25	; 0x04
    4f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f64:	8d 81       	ldd	r24, Y+5	; 0x05
    4f66:	9e 81       	ldd	r25, Y+6	; 0x06
    4f68:	01 97       	sbiw	r24, 0x01	; 1
    4f6a:	9e 83       	std	Y+6, r25	; 0x06
    4f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f70:	9e 81       	ldd	r25, Y+6	; 0x06
    4f72:	00 97       	sbiw	r24, 0x00	; 0
    4f74:	69 f7       	brne	.-38     	; 0x4f50 <main+0xcc4>
    4f76:	45 cb       	rjmp	.-2422   	; 0x4602 <main+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f78:	6f 81       	ldd	r22, Y+7	; 0x07
    4f7a:	78 85       	ldd	r23, Y+8	; 0x08
    4f7c:	89 85       	ldd	r24, Y+9	; 0x09
    4f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f84:	dc 01       	movw	r26, r24
    4f86:	cb 01       	movw	r24, r22
    4f88:	9e 83       	std	Y+6, r25	; 0x06
    4f8a:	8d 83       	std	Y+5, r24	; 0x05
    4f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f90:	9a 83       	std	Y+2, r25	; 0x02
    4f92:	89 83       	std	Y+1, r24	; 0x01
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	9a 81       	ldd	r25, Y+2	; 0x02
    4f98:	01 97       	sbiw	r24, 0x01	; 1
    4f9a:	f1 f7       	brne	.-4      	; 0x4f98 <main+0xd0c>
    4f9c:	9a 83       	std	Y+2, r25	; 0x02
    4f9e:	89 83       	std	Y+1, r24	; 0x01
    4fa0:	30 cb       	rjmp	.-2464   	; 0x4602 <main+0x376>

00004fa2 <AdjustMovements>:
		_delay_ms(250);
	}
	return 0;
}

void AdjustMovements(){
    4fa2:	df 93       	push	r29
    4fa4:	cf 93       	push	r28
    4fa6:	0f 92       	push	r0
    4fa8:	cd b7       	in	r28, 0x3d	; 61
    4faa:	de b7       	in	r29, 0x3e	; 62
	u8 buttonPressed = NO_PRESSED_KEY;
    4fac:	8f ef       	ldi	r24, 0xFF	; 255
    4fae:	89 83       	std	Y+1, r24	; 0x01
	buttonPressed = KPD_u8GetPressedKey();
    4fb0:	0e 94 8d 20 	call	0x411a	; 0x411a <KPD_u8GetPressedKey>
    4fb4:	89 83       	std	Y+1, r24	; 0x01
	if(buttonPressed != NO_PRESSED_KEY){
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    4fba:	09 f4       	brne	.+2      	; 0x4fbe <AdjustMovements+0x1c>
    4fbc:	87 c0       	rjmp	.+270    	; 0x50cc <AdjustMovements+0x12a>
		if(buttonPressed == 4){
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	84 30       	cpi	r24, 0x04	; 4
    4fc2:	01 f5       	brne	.+64     	; 0x5004 <AdjustMovements+0x62>
			if(moveLeft){
    4fc4:	80 91 92 00 	lds	r24, 0x0092
    4fc8:	88 23       	and	r24, r24
    4fca:	71 f0       	breq	.+28     	; 0x4fe8 <AdjustMovements+0x46>
				pad1X++;
    4fcc:	80 91 90 00 	lds	r24, 0x0090
    4fd0:	8f 5f       	subi	r24, 0xFF	; 255
    4fd2:	80 93 90 00 	sts	0x0090, r24
				if(pad1X > 3){
    4fd6:	80 91 90 00 	lds	r24, 0x0090
    4fda:	84 30       	cpi	r24, 0x04	; 4
    4fdc:	08 f4       	brcc	.+2      	; 0x4fe0 <AdjustMovements+0x3e>
    4fde:	76 c0       	rjmp	.+236    	; 0x50cc <AdjustMovements+0x12a>
					pad1X =1;
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	80 93 90 00 	sts	0x0090, r24
    4fe6:	72 c0       	rjmp	.+228    	; 0x50cc <AdjustMovements+0x12a>
				}
			}
			else{
				ballX++;
    4fe8:	80 91 8e 00 	lds	r24, 0x008E
    4fec:	8f 5f       	subi	r24, 0xFF	; 255
    4fee:	80 93 8e 00 	sts	0x008E, r24
				if(ballX > 3){
    4ff2:	80 91 8e 00 	lds	r24, 0x008E
    4ff6:	84 30       	cpi	r24, 0x04	; 4
    4ff8:	08 f4       	brcc	.+2      	; 0x4ffc <AdjustMovements+0x5a>
    4ffa:	68 c0       	rjmp	.+208    	; 0x50cc <AdjustMovements+0x12a>
					ballX = 1;
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	80 93 8e 00 	sts	0x008E, r24
    5002:	64 c0       	rjmp	.+200    	; 0x50cc <AdjustMovements+0x12a>
				}
			}
		}
		else if(buttonPressed == '*'){
    5004:	89 81       	ldd	r24, Y+1	; 0x01
    5006:	8a 32       	cpi	r24, 0x2A	; 42
    5008:	01 f5       	brne	.+64     	; 0x504a <AdjustMovements+0xa8>
			if(moveLeft == 0){
    500a:	80 91 92 00 	lds	r24, 0x0092
    500e:	88 23       	and	r24, r24
    5010:	71 f4       	brne	.+28     	; 0x502e <AdjustMovements+0x8c>
				pad2X++;
    5012:	80 91 91 00 	lds	r24, 0x0091
    5016:	8f 5f       	subi	r24, 0xFF	; 255
    5018:	80 93 91 00 	sts	0x0091, r24
				if(pad2X > 3){
    501c:	80 91 91 00 	lds	r24, 0x0091
    5020:	84 30       	cpi	r24, 0x04	; 4
    5022:	08 f4       	brcc	.+2      	; 0x5026 <AdjustMovements+0x84>
    5024:	53 c0       	rjmp	.+166    	; 0x50cc <AdjustMovements+0x12a>
					pad2X =1;
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	80 93 91 00 	sts	0x0091, r24
    502c:	4f c0       	rjmp	.+158    	; 0x50cc <AdjustMovements+0x12a>
				}
			}
			else{
				ballX++;
    502e:	80 91 8e 00 	lds	r24, 0x008E
    5032:	8f 5f       	subi	r24, 0xFF	; 255
    5034:	80 93 8e 00 	sts	0x008E, r24
				if(ballX > 3){
    5038:	80 91 8e 00 	lds	r24, 0x008E
    503c:	84 30       	cpi	r24, 0x04	; 4
    503e:	08 f4       	brcc	.+2      	; 0x5042 <AdjustMovements+0xa0>
    5040:	45 c0       	rjmp	.+138    	; 0x50cc <AdjustMovements+0x12a>
					ballX =1;
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	80 93 8e 00 	sts	0x008E, r24
    5048:	41 c0       	rjmp	.+130    	; 0x50cc <AdjustMovements+0x12a>
				}
			}
		}
		else if(buttonPressed == 7){
    504a:	89 81       	ldd	r24, Y+1	; 0x01
    504c:	87 30       	cpi	r24, 0x07	; 7
    504e:	f1 f4       	brne	.+60     	; 0x508c <AdjustMovements+0xea>
			if(moveLeft == 1){
    5050:	80 91 92 00 	lds	r24, 0x0092
    5054:	81 30       	cpi	r24, 0x01	; 1
    5056:	69 f4       	brne	.+26     	; 0x5072 <AdjustMovements+0xd0>
				pad1X--;
    5058:	80 91 90 00 	lds	r24, 0x0090
    505c:	81 50       	subi	r24, 0x01	; 1
    505e:	80 93 90 00 	sts	0x0090, r24
				if(pad1X < 1){
    5062:	80 91 90 00 	lds	r24, 0x0090
    5066:	88 23       	and	r24, r24
    5068:	89 f5       	brne	.+98     	; 0x50cc <AdjustMovements+0x12a>
					pad1X =3;
    506a:	83 e0       	ldi	r24, 0x03	; 3
    506c:	80 93 90 00 	sts	0x0090, r24
    5070:	2d c0       	rjmp	.+90     	; 0x50cc <AdjustMovements+0x12a>
				}
			}
			else{
				ballX--;
    5072:	80 91 8e 00 	lds	r24, 0x008E
    5076:	81 50       	subi	r24, 0x01	; 1
    5078:	80 93 8e 00 	sts	0x008E, r24
				if(ballX < 1){
    507c:	80 91 8e 00 	lds	r24, 0x008E
    5080:	88 23       	and	r24, r24
    5082:	21 f5       	brne	.+72     	; 0x50cc <AdjustMovements+0x12a>
					ballX =3;
    5084:	83 e0       	ldi	r24, 0x03	; 3
    5086:	80 93 8e 00 	sts	0x008E, r24
    508a:	20 c0       	rjmp	.+64     	; 0x50cc <AdjustMovements+0x12a>
				}
			}
		}
		else if(buttonPressed == '/'){
    508c:	89 81       	ldd	r24, Y+1	; 0x01
    508e:	8f 32       	cpi	r24, 0x2F	; 47
    5090:	e9 f4       	brne	.+58     	; 0x50cc <AdjustMovements+0x12a>
			if(moveLeft == 0){
    5092:	80 91 92 00 	lds	r24, 0x0092
    5096:	88 23       	and	r24, r24
    5098:	69 f4       	brne	.+26     	; 0x50b4 <AdjustMovements+0x112>
				pad2X--;
    509a:	80 91 91 00 	lds	r24, 0x0091
    509e:	81 50       	subi	r24, 0x01	; 1
    50a0:	80 93 91 00 	sts	0x0091, r24
				if(pad2X < 1){
    50a4:	80 91 91 00 	lds	r24, 0x0091
    50a8:	88 23       	and	r24, r24
    50aa:	81 f4       	brne	.+32     	; 0x50cc <AdjustMovements+0x12a>
					pad2X =3;
    50ac:	83 e0       	ldi	r24, 0x03	; 3
    50ae:	80 93 91 00 	sts	0x0091, r24
    50b2:	0c c0       	rjmp	.+24     	; 0x50cc <AdjustMovements+0x12a>
				}
			}
			else{
				ballX--;
    50b4:	80 91 8e 00 	lds	r24, 0x008E
    50b8:	81 50       	subi	r24, 0x01	; 1
    50ba:	80 93 8e 00 	sts	0x008E, r24
				if(ballX < 1){
    50be:	80 91 8e 00 	lds	r24, 0x008E
    50c2:	88 23       	and	r24, r24
    50c4:	19 f4       	brne	.+6      	; 0x50cc <AdjustMovements+0x12a>
					ballX =3;
    50c6:	83 e0       	ldi	r24, 0x03	; 3
    50c8:	80 93 8e 00 	sts	0x008E, r24
				}
			}
		}
	}
}
    50cc:	0f 90       	pop	r0
    50ce:	cf 91       	pop	r28
    50d0:	df 91       	pop	r29
    50d2:	08 95       	ret

000050d4 <__divmodqi4>:
    50d4:	87 fb       	bst	r24, 7
    50d6:	08 2e       	mov	r0, r24
    50d8:	06 26       	eor	r0, r22
    50da:	87 fd       	sbrc	r24, 7
    50dc:	81 95       	neg	r24
    50de:	67 fd       	sbrc	r22, 7
    50e0:	61 95       	neg	r22
    50e2:	20 d0       	rcall	.+64     	; 0x5124 <__udivmodqi4>
    50e4:	0e f4       	brtc	.+2      	; 0x50e8 <__divmodqi4_1>
    50e6:	91 95       	neg	r25

000050e8 <__divmodqi4_1>:
    50e8:	07 fc       	sbrc	r0, 7
    50ea:	81 95       	neg	r24

000050ec <__divmodqi4_exit>:
    50ec:	08 95       	ret

000050ee <__divmodsi4>:
    50ee:	97 fb       	bst	r25, 7
    50f0:	09 2e       	mov	r0, r25
    50f2:	05 26       	eor	r0, r21
    50f4:	0e d0       	rcall	.+28     	; 0x5112 <__divmodsi4_neg1>
    50f6:	57 fd       	sbrc	r21, 7
    50f8:	04 d0       	rcall	.+8      	; 0x5102 <__divmodsi4_neg2>
    50fa:	20 d0       	rcall	.+64     	; 0x513c <__udivmodsi4>
    50fc:	0a d0       	rcall	.+20     	; 0x5112 <__divmodsi4_neg1>
    50fe:	00 1c       	adc	r0, r0
    5100:	38 f4       	brcc	.+14     	; 0x5110 <__divmodsi4_exit>

00005102 <__divmodsi4_neg2>:
    5102:	50 95       	com	r21
    5104:	40 95       	com	r20
    5106:	30 95       	com	r19
    5108:	21 95       	neg	r18
    510a:	3f 4f       	sbci	r19, 0xFF	; 255
    510c:	4f 4f       	sbci	r20, 0xFF	; 255
    510e:	5f 4f       	sbci	r21, 0xFF	; 255

00005110 <__divmodsi4_exit>:
    5110:	08 95       	ret

00005112 <__divmodsi4_neg1>:
    5112:	f6 f7       	brtc	.-4      	; 0x5110 <__divmodsi4_exit>
    5114:	90 95       	com	r25
    5116:	80 95       	com	r24
    5118:	70 95       	com	r23
    511a:	61 95       	neg	r22
    511c:	7f 4f       	sbci	r23, 0xFF	; 255
    511e:	8f 4f       	sbci	r24, 0xFF	; 255
    5120:	9f 4f       	sbci	r25, 0xFF	; 255
    5122:	08 95       	ret

00005124 <__udivmodqi4>:
    5124:	99 1b       	sub	r25, r25
    5126:	79 e0       	ldi	r23, 0x09	; 9
    5128:	04 c0       	rjmp	.+8      	; 0x5132 <__udivmodqi4_ep>

0000512a <__udivmodqi4_loop>:
    512a:	99 1f       	adc	r25, r25
    512c:	96 17       	cp	r25, r22
    512e:	08 f0       	brcs	.+2      	; 0x5132 <__udivmodqi4_ep>
    5130:	96 1b       	sub	r25, r22

00005132 <__udivmodqi4_ep>:
    5132:	88 1f       	adc	r24, r24
    5134:	7a 95       	dec	r23
    5136:	c9 f7       	brne	.-14     	; 0x512a <__udivmodqi4_loop>
    5138:	80 95       	com	r24
    513a:	08 95       	ret

0000513c <__udivmodsi4>:
    513c:	a1 e2       	ldi	r26, 0x21	; 33
    513e:	1a 2e       	mov	r1, r26
    5140:	aa 1b       	sub	r26, r26
    5142:	bb 1b       	sub	r27, r27
    5144:	fd 01       	movw	r30, r26
    5146:	0d c0       	rjmp	.+26     	; 0x5162 <__udivmodsi4_ep>

00005148 <__udivmodsi4_loop>:
    5148:	aa 1f       	adc	r26, r26
    514a:	bb 1f       	adc	r27, r27
    514c:	ee 1f       	adc	r30, r30
    514e:	ff 1f       	adc	r31, r31
    5150:	a2 17       	cp	r26, r18
    5152:	b3 07       	cpc	r27, r19
    5154:	e4 07       	cpc	r30, r20
    5156:	f5 07       	cpc	r31, r21
    5158:	20 f0       	brcs	.+8      	; 0x5162 <__udivmodsi4_ep>
    515a:	a2 1b       	sub	r26, r18
    515c:	b3 0b       	sbc	r27, r19
    515e:	e4 0b       	sbc	r30, r20
    5160:	f5 0b       	sbc	r31, r21

00005162 <__udivmodsi4_ep>:
    5162:	66 1f       	adc	r22, r22
    5164:	77 1f       	adc	r23, r23
    5166:	88 1f       	adc	r24, r24
    5168:	99 1f       	adc	r25, r25
    516a:	1a 94       	dec	r1
    516c:	69 f7       	brne	.-38     	; 0x5148 <__udivmodsi4_loop>
    516e:	60 95       	com	r22
    5170:	70 95       	com	r23
    5172:	80 95       	com	r24
    5174:	90 95       	com	r25
    5176:	9b 01       	movw	r18, r22
    5178:	ac 01       	movw	r20, r24
    517a:	bd 01       	movw	r22, r26
    517c:	cf 01       	movw	r24, r30
    517e:	08 95       	ret

00005180 <__prologue_saves__>:
    5180:	2f 92       	push	r2
    5182:	3f 92       	push	r3
    5184:	4f 92       	push	r4
    5186:	5f 92       	push	r5
    5188:	6f 92       	push	r6
    518a:	7f 92       	push	r7
    518c:	8f 92       	push	r8
    518e:	9f 92       	push	r9
    5190:	af 92       	push	r10
    5192:	bf 92       	push	r11
    5194:	cf 92       	push	r12
    5196:	df 92       	push	r13
    5198:	ef 92       	push	r14
    519a:	ff 92       	push	r15
    519c:	0f 93       	push	r16
    519e:	1f 93       	push	r17
    51a0:	cf 93       	push	r28
    51a2:	df 93       	push	r29
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	ca 1b       	sub	r28, r26
    51aa:	db 0b       	sbc	r29, r27
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	cd bf       	out	0x3d, r28	; 61
    51b6:	09 94       	ijmp

000051b8 <__epilogue_restores__>:
    51b8:	2a 88       	ldd	r2, Y+18	; 0x12
    51ba:	39 88       	ldd	r3, Y+17	; 0x11
    51bc:	48 88       	ldd	r4, Y+16	; 0x10
    51be:	5f 84       	ldd	r5, Y+15	; 0x0f
    51c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    51c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    51c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    51c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    51c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    51ca:	b9 84       	ldd	r11, Y+9	; 0x09
    51cc:	c8 84       	ldd	r12, Y+8	; 0x08
    51ce:	df 80       	ldd	r13, Y+7	; 0x07
    51d0:	ee 80       	ldd	r14, Y+6	; 0x06
    51d2:	fd 80       	ldd	r15, Y+5	; 0x05
    51d4:	0c 81       	ldd	r16, Y+4	; 0x04
    51d6:	1b 81       	ldd	r17, Y+3	; 0x03
    51d8:	aa 81       	ldd	r26, Y+2	; 0x02
    51da:	b9 81       	ldd	r27, Y+1	; 0x01
    51dc:	ce 0f       	add	r28, r30
    51de:	d1 1d       	adc	r29, r1
    51e0:	0f b6       	in	r0, 0x3f	; 63
    51e2:	f8 94       	cli
    51e4:	de bf       	out	0x3e, r29	; 62
    51e6:	0f be       	out	0x3f, r0	; 63
    51e8:	cd bf       	out	0x3d, r28	; 61
    51ea:	ed 01       	movw	r28, r26
    51ec:	08 95       	ret

000051ee <_exit>:
    51ee:	f8 94       	cli

000051f0 <__stop_program>:
    51f0:	ff cf       	rjmp	.-2      	; 0x51f0 <__stop_program>
